<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Volcanohong&#39;s Learning Notes</title>
  <subtitle>Enjoy everything in everyday</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://volcanohong.github.com/"/>
  <updated>2018-08-07T20:12:46.000Z</updated>
  <id>http://volcanohong.github.com/</id>
  
  <author>
    <name>Volcanohong</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Spring-boot Notes I</title>
    <link href="http://volcanohong.github.com/2018/08/02/spring-boot-notes-1/"/>
    <id>http://volcanohong.github.com/2018/08/02/spring-boot-notes-1/</id>
    <published>2018-08-02T19:49:46.000Z</published>
    <updated>2018-08-07T20:12:46.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="developer-tools"><a href="#Developer-Tools" class="headerlink" title="Developer Tools"></a><strong>Developer Tools</strong></h2><p>Spring Boot includes an additional set of tools that can make the application development experience a little more pleasant. The <code>spring-boot-devtools</code> module can be included in any project to provide additional development-time features. </p>
<p>Maven configuration, in pom.xml,</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-devtools<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">optional</span>&gt;</span>true<span class="tag">&lt;/<span class="name">optional</span>&gt;</span></div><div class="line">	<span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></div></pre></td></tr></table></figure>
<h3 id="automatic-restart"><a href="#Automatic-Restart" class="headerlink" title="Automatic Restart"></a><strong>Automatic Restart</strong></h3><p>Applications that use spring-boot-devtools automatically restart whenever files on the classpath change. Note that certain resources, such as static assets and view templates, do not need to restart the application.</p>
<p><strong>Triggering a restart</strong></p>
<p>As DevTools monitors classpath resources, the only way to trigger a restart is to update the classpath. The way in which you cause the classpath to be updated depends on the IDE that you are using. In <code>Eclipse</code>, saving a modified file causes the classpath to be updated and triggers a restart. In <code>IntelliJ IDEA</code>, building the project (Build -&gt; Build Project) has the same effect.</p>
<p><strong>Logging changes in condition evaluation</strong></p>
<p>By default, each time your application restarts, a report showing the condition evaluation delta is logged. The report shows the changes to your application’s auto-configuration as you make changes such as adding or removing beans and setting configuration properties.</p>
<p>To disable the logging of the report, set the following property:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><div class="line">spring.devtools.restart.log-condition-evaluation-delta=<span class="keyword">false</span></div></pre></td></tr></table></figure>
<p><strong>Excluding Resources</strong></p>
<p>Certain resources do not necessarily need to trigger a restart when they are changed. For example, Thymeleaf templates can be edited in-place. By default, changing resources in <code>/META-INF/maven</code>, <code>/META-INF/resources</code>, <code>/resources</code>, or <code>/templates</code> does not trigger a restart but does trigger a live reload. If you want to customize these exclusions, you can use the spring.devtools.restart.exclude property. For example, to exclude only <code>/static</code> and <code>/public</code> you would set the following property:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><div class="line">spring.devtools.restart.exclude=<span class="keyword">static</span><span class="comment">/**,public/**</span></div></pre></td></tr></table></figure>
<h3 id="note"><a href="#Note" class="headerlink" title="Note"></a><strong>Note</strong></h3><p>Found something interesting that needs to figure it out later. When a project consists of a few modules, e.g., module B depends on module A, where B has main() function. Build a project (Auto-start) only has good effects on changes in module B, while not always applies to module A. Just a remark here.</p>
<p>Refer <a href="https://docs.spring.io/spring-boot/docs/current/reference/html/using-boot-devtools.html" target="_blank" rel="external">Spring-boot Developer Tools</a> for more details.</p>
]]></content>
    
    <summary type="html">
    
      Spring-boot developer tools
    
    </summary>
    
      <category term="Java" scheme="http://volcanohong.github.com/categories/Java/"/>
    
    
      <category term="java" scheme="http://volcanohong.github.com/tags/java/"/>
    
      <category term="spring" scheme="http://volcanohong.github.com/tags/spring/"/>
    
      <category term="spring-boot" scheme="http://volcanohong.github.com/tags/spring-boot/"/>
    
  </entry>
  
  <entry>
    <title>CORS Issue Cont.</title>
    <link href="http://volcanohong.github.com/2018/04/01/cors-cont/"/>
    <id>http://volcanohong.github.com/2018/04/01/cors-cont/</id>
    <published>2018-04-01T17:35:02.000Z</published>
    <updated>2018-08-07T17:56:23.000Z</updated>
    
    <content type="html"><![CDATA[<ul>
<li><h2 id="cors-solution-cont"><a href="#CORS-Solution-Cont" class="headerlink" title="CORS Solution Cont."></a><strong>CORS Solution Cont.</strong></h2></li>
</ul>
<p>In spring-boot project configuration,</p>
<figure class="highlight java"><table><tr><td class="code"><pre><div class="line"><span class="meta">@Configuration</span></div><div class="line"><span class="meta">@ConfigurationProperties</span>(prefix = <span class="string">"app.corsSites"</span>)</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CorsSiteConfiguration</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> List&lt;String&gt; <span class="title">getAllowSites</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> allowSites;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    List&lt;String&gt; allowSites = <span class="keyword">new</span> ArrayList&lt;String&gt;();</div><div class="line"></div><div class="line">    <span class="meta">@Bean</span></div><div class="line">    <span class="function"><span class="keyword">public</span> WebMvcConfigurer <span class="title">corsConfigurer</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">new</span> WebMvcConfigurerAdapter() &#123;</div><div class="line">            <span class="meta">@Override</span></div><div class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addCorsMappings</span><span class="params">(CorsRegistry registry)</span> </span>&#123;</div><div class="line">                CorsRegistration corsRegistration = registry.addMapping(<span class="string">"/**"</span>)</div><div class="line">                        <span class="comment">//config in yml file</span></div><div class="line">                        .allowedOrigins(<span class="string">"http://10.0.0.1:8081"</span>) <span class="comment">//demo</span></div><div class="line">                        .allowedMethods(<span class="string">"GET"</span>, <span class="string">"POST"</span>, <span class="string">"PUT"</span>, <span class="string">"DELETE"</span>)</div><div class="line">                        .allowCredentials(<span class="keyword">false</span>)</div><div class="line">                        .maxAge(<span class="number">3600</span>);</div><div class="line">                <span class="keyword">if</span> (allowSites == <span class="keyword">null</span> || allowSites.size() == <span class="number">0</span>) &#123;</div><div class="line">                    corsRegistration.allowedOrigins(<span class="string">"*"</span>);</div><div class="line">                &#125; <span class="keyword">else</span> &#123;</div><div class="line">                    allowSites.forEach(site -&gt; corsRegistration.allowedOrigins(site));</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        &#125;;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>In <code>yml</code> file,</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><div class="line"><span class="attr">app:</span></div><div class="line"><span class="attr">  cors-sites:</span></div><div class="line"><span class="attr">    allow-sites:</span></div><div class="line"><span class="bullet">      -</span> <span class="string">"*"</span></div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      A late solution for CORS issue in spring-boot?
    
    </summary>
    
      <category term="Java" scheme="http://volcanohong.github.com/categories/Java/"/>
    
    
      <category term="java" scheme="http://volcanohong.github.com/tags/java/"/>
    
      <category term="angular2" scheme="http://volcanohong.github.com/tags/angular2/"/>
    
      <category term="spring" scheme="http://volcanohong.github.com/tags/spring/"/>
    
      <category term="spring-boot" scheme="http://volcanohong.github.com/tags/spring-boot/"/>
    
  </entry>
  
  <entry>
    <title>CORS Issue</title>
    <link href="http://volcanohong.github.com/2017/04/10/cors/"/>
    <id>http://volcanohong.github.com/2017/04/10/cors/</id>
    <published>2017-04-10T17:34:02.000Z</published>
    <updated>2018-08-07T17:38:49.000Z</updated>
    
    <content type="html"><![CDATA[<ul>
<li><h2 id="cors-in-my-case"><a href="#CORS-in-My-Case" class="headerlink" title="CORS in My Case"></a><strong>CORS in My Case</strong></h2></li>
</ul>
<p>With an angular 2 app in front-end which calls APIs provided by a RESTful webservice in backend, at beginning, I have CORS issue when calling HTTP GET method. I simply solved it by adding <code>@CrossOrigin</code> annotaion to REST controller, e.g.,</p>
<figure class="highlight java"><table><tr><td class="code"><pre><div class="line"><span class="meta">@CrossOrigin</span>(origins = <span class="string">"http://localhost:3000"</span>)</div></pre></td></tr></table></figure>
<p>Later, when the app calls HTTP POST or PUT, it gets same CORS error with response code 403 and return <code>invalid CORS request</code>.</p>
<p>The differences here are POST, PUT method send OPTION request first, and then, send POST or PUT request again. This procedure works fine in local dev enviroment without CORS error. However, when I deployed the app to server, it dosen’t work like that any more, I notice that only POST or PUT request sent instead of sending OPTION request first.</p>
<p><strong>Some explanation here…</strong></p>
<blockquote>
<p>In fact, there is nothing to do in Angular2 regarding cross domain requests. CORS is something natively supported by browsers. This link could help you to understand how it works:</p>
<p><a href="http://restlet.com/blog/2015/12/15/understanding-and-using-cors/" target="_blank" rel="external">http://restlet.com/blog/2015/12/15/understanding-and-using-cors/</a><br><a href="http://restlet.com/blog/2016/09/27/how-to-fix-cors-problems/" target="_blank" rel="external">http://restlet.com/blog/2016/09/27/how-to-fix-cors-problems/</a></p>
<p>To be short, in the case of cross domain request, the browser automatically adds an Origin header in the request. There are two cases:</p>
<p>Simple requests. This use case applies if we use HTTP GET, HEAD and POST methods. In the case of POST methods, only content types with the following values are supported: text/plain, application/x-www-form-urlencoded and multipart/form-data.</p>
<p>Preflighted requests. When the “simple requests” use case doesn’t apply, a first request (with the HTTP OPTIONS method) is made to check what can be done in the context of cross-domain requests.</p>
<p>So in fact most of work must be done on the server side to return the CORS headers. The main one is the Access-Control-Allow-Origin one.</p>
</blockquote>
<p>Regarding Angular2, simply use the Http object like any other requests (same domain for example):</p>
<figure class="highlight js"><table><tr><td class="code"><pre><div class="line"><span class="keyword">return</span> <span class="keyword">this</span>.http.get(<span class="string">'https://angular2.apispark.net/v1/companies/'</span>)</div><div class="line">           .map(<span class="function"><span class="params">res</span> =&gt;</span> res.json()).subscribe(</div><div class="line">  ...</div><div class="line">);</div></pre></td></tr></table></figure>
<p><strong>According to MDN</strong></p>
<blockquote>
<p>Preflighted requests</p>
<p>Unlike simple requests (discussed above), “preflighted” requests first send an HTTP OPTIONS request header to the resource on the other domain, in order to determine whether the actual request is safe to send. Cross-site requests are preflighted like this since they may have implications to user data. In particular, a request is preflighted if:</p>
<p>It uses methods other than GET or POST. Also, if POST is used to send request data with a Content-Type other than application/x-www-form-urlencoded, multipart/form-data, or text/plain, e.g. if the POST request sends an XML payload to the server using application/xml or text/xml, then the request is preflighted.<br>It sets custom headers in the request (e.g. the request uses a header such as X-PINGOTHER)</p>
</blockquote>
<p><strong>Method works in my case</strong><br>Apply intercepter and add http response headers.<br><figure class="highlight java"><table><tr><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ApiInterceptor</span> <span class="keyword">extends</span> <span class="title">HandlerInterceptorAdapter</span> </span>&#123;</div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">preHandle</span><span class="params">(HttpServletRequest request, HttpServletResponse response, Object handler)</span></span></div><div class="line">            <span class="keyword">throws</span> Exception &#123;</div><div class="line">            <span class="keyword">if</span> (<span class="string">"OPTIONS"</span>.equalsIgnoreCase(request.getMethod())) &#123;</div><div class="line">                response.setStatus(HttpServletResponse.SC_OK);</div><div class="line">            &#125; <span class="keyword">else</span> &#123;</div><div class="line">                response.setHeader(<span class="string">"Access-Control-Allow-Origin"</span>, request.getHeader(<span class="string">"Origin"</span>));</div><div class="line">                response.setHeader(<span class="string">"Access-Control-Allow-Credentials"</span>, <span class="string">"true"</span>);</div><div class="line">                response.setHeader(<span class="string">"Access-Control-Allow-Methods"</span>, <span class="string">"GET, POST, PUT, DELETE"</span>);</div><div class="line">                response.setHeader(<span class="string">"Access-Control-Max-Age"</span>, <span class="string">"3600"</span>);</div><div class="line">                response.setHeader(<span class="string">"Access-Control-Allow-Headers"</span>, <span class="string">"Content-Type, Accept"</span>);</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line">    &#125;</div></pre></td></tr></table></figure></p>
<p>Or simply use spring annotation<br><figure class="highlight java"><table><tr><td class="code"><pre><div class="line"><span class="meta">@CrossOrigin</span>(origins = <span class="string">"*"</span>)</div></pre></td></tr></table></figure></p>
<ul>
<li><h2 id="other-methods"><a href="#Other-Methods" class="headerlink" title="Other Methods"></a><strong>Other Methods</strong></h2></li>
</ul>
<p>I also tried following methods without any luck.</p>
<ol>
<li>Apply JAVA configuration e.g.,<figure class="highlight java"><table><tr><td class="code"><pre><div class="line"><span class="meta">@Bean</span></div><div class="line">   <span class="function"><span class="keyword">public</span> WebMvcConfigurer <span class="title">corsConfigurer</span><span class="params">()</span> </span>&#123;</div><div class="line">       <span class="keyword">return</span> <span class="keyword">new</span> WebMvcConfigurerAdapter() &#123;</div><div class="line">           <span class="meta">@Override</span></div><div class="line">           <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addCorsMappings</span><span class="params">(CorsRegistry registry)</span> </span>&#123;</div><div class="line">               registry.addMapping(<span class="string">"/**"</span>)</div><div class="line">                       .allowedOrigins(<span class="string">"http://localhost:3000"</span>)</div><div class="line">                       .allowedMethods(<span class="string">"GET"</span>, <span class="string">"POST"</span>, <span class="string">"PUT"</span>, <span class="string">"DELETE"</span>)</div><div class="line">                       .allowCredentials(<span class="keyword">false</span>).maxAge(<span class="number">3600</span>);</div><div class="line">           &#125;</div><div class="line">       &#125;;</div><div class="line">   &#125;</div></pre></td></tr></table></figure>
</li>
</ol>
<p>But enabling CORS for the whole application doesn’t work for me.</p>
<ol>
<li>Enable CORS filter in Tomcat</li>
</ol>
<figure class="highlight xml"><table><tr><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">filter</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>CorsFilter<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">filter-class</span>&gt;</span>org.apache.catalina.filters.CorsFilter<span class="tag">&lt;/<span class="name">filter-class</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">init-param</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>cors.exposed.headers<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>Access-Control-Allow-Origin,Access-Control-Allow-Credentials<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">init-param</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">filter</span>&gt;</span></div></pre></td></tr></table></figure>
<ol>
<li>Add headers at front-end</li>
</ol>
<figure class="highlight js"><table><tr><td class="code"><pre><div class="line">private headers:Headers = <span class="keyword">new</span> Headers(&#123;</div><div class="line">        <span class="string">'Content-Type'</span>: <span class="string">'application/json'</span>,</div><div class="line">        <span class="string">'Access-Control-Allow-Origin'</span> : <span class="string">'*'</span>, <span class="comment">// Required for CORS support to work</span></div><div class="line">        <span class="string">'Access-Control-Allow-Credentials'</span> : <span class="literal">true</span>, <span class="comment">// Required for cookies, authorization headers with HTTPS</span></div><div class="line">        Accept: <span class="string">'application/json'</span></div><div class="line">    &#125;);</div><div class="line">    </div><div class="line">get(url:string, <span class="attr">path</span>:string):Observable&lt;any&gt; &#123;</div><div class="line">        <span class="keyword">this</span>.validateSession();</div><div class="line">        url = url == <span class="string">''</span> ? <span class="keyword">this</span>.api_url : url;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.http.get(</div><div class="line">            <span class="string">`<span class="subst">$&#123;url&#125;</span><span class="subst">$&#123;path&#125;</span>`</span>, &#123;</div><div class="line">                <span class="attr">headers</span>: <span class="keyword">this</span>.headers, <span class="attr">search</span>: <span class="keyword">this</span>.urlParams</div><div class="line">            &#125;)</div><div class="line">            .map(<span class="keyword">this</span>.getJson)</div><div class="line">            .catch(<span class="keyword">this</span>.handleError);</div><div class="line">    &#125;</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      How to deal with CORS issue?
    
    </summary>
    
      <category term="Java" scheme="http://volcanohong.github.com/categories/Java/"/>
    
    
      <category term="java" scheme="http://volcanohong.github.com/tags/java/"/>
    
      <category term="angular2" scheme="http://volcanohong.github.com/tags/angular2/"/>
    
      <category term="spring" scheme="http://volcanohong.github.com/tags/spring/"/>
    
  </entry>
  
  <entry>
    <title>Angular2 Apps Script Error in Safari</title>
    <link href="http://volcanohong.github.com/2017/03/12/angular2-in-safari/"/>
    <id>http://volcanohong.github.com/2017/03/12/angular2-in-safari/</id>
    <published>2017-03-13T01:29:57.000Z</published>
    <updated>2017-03-13T02:00:18.000Z</updated>
    
    <content type="html"><![CDATA[<ul>
<li><h2 id="angular2-encounter-errors-in-safari"><a href="#Angular2-Encounter-Errors-in-Safari" class="headerlink" title="Angular2 Encounter Errors in Safari"></a><strong>Angular2 Encounter Errors in Safari</strong></h2></li>
</ul>
<p>By some workaround, I found it’s an open issue that older version Safari is not supporting angular 2 very well.</p>
<p><strong>Problem</strong>:</p>
<p>The root cause is that angular 2 pipe has some issue in Safari, since Safari missing some internationalization libs or api error.</p>
<p><strong>Possible Solutions</strong>:</p>
<ul>
<li>S1. Update the Safari from 9.x to 10.x</li>
<li>S2. Import international libs from polyfill, e.g.,</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"https://cdn.polyfill.io/v2/polyfill.min.js?features=Intl.~locale.en"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div></pre></td></tr></table></figure>
<ul>
<li>S3. Install the internationalization package:</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">npm install intl@1.1.0 --save</div></pre></td></tr></table></figure>
<p>Then add the following lines to your index.html:</p>
<figure class="highlight html"><table><tr><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"node_modules/intl/dist/Intl.min.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"node_modules/intl/locale-data/jsonp/en.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div></pre></td></tr></table></figure>
<ul>
<li>S4. Create custom pipe instead of angular2 default one. E.g.,</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><div class="line"><span class="keyword">import</span> &#123; Pipe, PipeTransform &#125; <span class="keyword">from</span> <span class="string">'@angular/core'</span>;</div><div class="line"><span class="keyword">import</span> * <span class="keyword">as</span> moment <span class="keyword">from</span> <span class="string">'moment'</span>;</div><div class="line"></div><div class="line">@Pipe(&#123;</div><div class="line">  <span class="attr">name</span>: <span class="string">'customdate'</span></div><div class="line">&#125;)</div><div class="line"><span class="keyword">export</span> <span class="class"><span class="keyword">class</span> <span class="title">CustomDatePipe</span> <span class="title">implements</span> <span class="title">PipeTransform</span> </span>&#123;</div><div class="line">  transform(value: string, <span class="attr">arg</span>: string): string &#123;</div><div class="line">     <span class="keyword">return</span> moment(value).format(arg);</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>And</p>
<figure class="highlight html"><table><tr><td class="code"><pre><div class="line">&#123;&#123; myDate | customdate: 'DD/MM/YYYY' &#125;&#125;</div></pre></td></tr></table></figure>
<p><strong>Test Results</strong>:</p>
<ul>
<li>S1 works since I updated the Safari to 10.x. </li>
<li>S2 works fine in my local environment. but fails on Demo server due to <code>Cannot GET /v2/Intl.min.js.map</code>.</li>
<li>S3 has no effects.</li>
</ul>
<blockquote>
<p>Just a note, the cdn.polyfill script mentioned above works well for the devices and user agents that the polyfill service supports, however it defaults to not providing the polyfill to ‘unrecognised’ user agents.</p>
</blockquote>
<p>The following update to the script should be made so that the polyfill still loads for unrecognised browers:<br><figure class="highlight html"><table><tr><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"https://cdn.polyfill.io/v2/polyfill.js?features=Intl.~locale.en&amp;unknown=polyfill"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div></pre></td></tr></table></figure></p>
<p><em>Also tried following methods, but no luck for me.</em></p>
<ul>
<li>put intl to package.json.:<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">&quot;dependencies&quot;: &#123; &quot;angular2&quot;: &quot;2.0.0-beta.7&quot;, &quot;intl&quot;: &quot;1.1.0&quot;,...&#125;</div></pre></td></tr></table></figure>
</li>
</ul>
<p>Run<br><figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">npm install</div></pre></td></tr></table></figure></p>
<p>Added to <code>index.html</code>:<br><figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">&lt;script src=&quot;node_modules/intl/dist/Intl.min.js&quot;&gt;&lt;/script&gt; </div><div class="line">&lt;script src=&quot;node_modules/intl/locale-data/jsonp/en.js&quot;&gt;&lt;/script&gt;</div></pre></td></tr></table></figure></p>
<p>Or</p>
<ul>
<li>After npm installed intl and then added the following to polyfill.js<figure class="highlight js"><table><tr><td class="code"><pre><div class="line"><span class="keyword">import</span> <span class="string">'intl/index'</span>;</div><div class="line"><span class="keyword">import</span> <span class="string">'intl/locale-data/jsonp/en.js'</span>;</div></pre></td></tr></table></figure>
</li>
</ul>
<p>Related Links:</p>
<ol>
<li><a href="https://github.com/angular/angular/issues/3917" target="_blank" rel="external">DatePipe needs review and potentially breaking changes</a></li>
<li><a href="https://github.com/angular/angular/issues/4445" target="_blank" rel="external">Date pipe throws Reference error in Safari</a></li>
<li><a href="https://github.com/driftyco/ionic-conference-app/issues/42" target="_blank" rel="external">DateForm Pipe has issues in Safari with internationalization</a></li>
<li><a href="https://github.com/angular/angular/issues/3333" target="_blank" rel="external">https://github.com/angular/angular/issues/3333</a></li>
</ol>
]]></content>
    
    <summary type="html">
    
      Non-Chrome browsers raised some errors about the API which is currently used in the Angular2 date and currency pipes.
    
    </summary>
    
      <category term="Angular" scheme="http://volcanohong.github.com/categories/Angular/"/>
    
    
      <category term="angular2" scheme="http://volcanohong.github.com/tags/angular2/"/>
    
      <category term="javascript" scheme="http://volcanohong.github.com/tags/javascript/"/>
    
      <category term="html" scheme="http://volcanohong.github.com/tags/html/"/>
    
      <category term="coding" scheme="http://volcanohong.github.com/tags/coding/"/>
    
      <category term="safari" scheme="http://volcanohong.github.com/tags/safari/"/>
    
  </entry>
  
  <entry>
    <title>Chart.js in Angular 2</title>
    <link href="http://volcanohong.github.com/2017/03/01/chartjs-notes/"/>
    <id>http://volcanohong.github.com/2017/03/01/chartjs-notes/</id>
    <published>2017-03-01T20:04:50.000Z</published>
    <updated>2017-03-13T00:57:03.000Z</updated>
    
    <content type="html"><![CDATA[<a id="more"></a>
<ul>
<li><h2 id="installation"><a href="#Installation" class="headerlink" title="Installation"></a><strong>Installation</strong></h2></li>
</ul>
<p>You can install ng2-charts using npm</p>
<p><code>npm install ng2-charts --save</code></p>
<p>You need to install and include <code>Chart.js</code> library in application via html or webpack bundler (more options can be found in official chart.js <a href="http://www.chartjs.org/docs/" target="_blank" rel="external">Documentation</a>)<br>E.g., </p>
<p><code>npm install chart.js --save</code></p>
<p>Important: Embedding Chart.js in application is mandatory!</p>
<p><code>&lt;script src=&quot;node_modules/chart.js/src/chart.js&quot;&gt;&lt;/script&gt;</code></p>
<p>Or</p>
<p><code>&lt;script type=&quot;text/javascript&quot; src=&quot;https://cdnjs.cloudflare.com/ajax/libs/Chart.js/2.1.3/Chart.bundle.min.js&quot;&gt;&lt;/script&gt;</code> </p>
<p>Demo and API details of ng2-charts can be found here: <a href="http://valor-software.github.io/ng2-charts/" target="_blank" rel="external">Demo</a> and <a href="https://github.com/valor-software/ng2-charts/tree/master/demo" target="_blank" rel="external">Source code</a>.</p>
<ul>
<li><h2 id="ticks-congiguration"><a href="#Ticks-Congiguration" class="headerlink" title="Ticks Congiguration"></a><strong>Ticks Congiguration</strong></h2></li>
</ul>
<blockquote>
<p>The tick configuration is nested under the scale configuration in the ticks key. It defines options for the tick marks that are generated by the axis.</p>
</blockquote>
<ul>
<li><h3 id="beginning-from-zero"><a href="#Beginning-From-Zero" class="headerlink" title="Beginning From Zero"></a><strong>Beginning From Zero</strong></h3></li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><div class="line">scales: &#123;</div><div class="line">	<span class="attr">yAxes</span>: [&#123;</div><div class="line">	    <span class="attr">ticks</span>: &#123;</div><div class="line">	        <span class="attr">beginAtZero</span>: <span class="literal">true</span></div><div class="line">	        &#125;</div><div class="line">	    &#125;]    </div><div class="line">	&#125;</div></pre></td></tr></table></figure>
<ul>
<li><h3 id="change-scale-label"><a href="#Change-Scale-Label" class="headerlink" title="Change Scale Label"></a><strong>Change Scale Label</strong></h3></li>
</ul>
<p>Creating Custom Tick Formats</p>
<blockquote>
<p>The callback method may be used for advanced tick customization. In the following example, every label of the Y axis would be displayed in scientific notation. If the callback returns null or undefined the associated grid line will be hidden.</p>
</blockquote>
<figure class="highlight js"><table><tr><td class="code"><pre><div class="line">scales: &#123;</div><div class="line">	<span class="attr">yAxes</span>: [&#123;</div><div class="line">	    <span class="attr">ticks</span>: &#123;</div><div class="line">	        <span class="attr">callback</span>: <span class="function"><span class="keyword">function</span> (<span class="params">label, index, labels</span>) </span>&#123;</div><div class="line">                        <span class="keyword">return</span> label / <span class="number">1000</span> + <span class="string">'k'</span>;</div><div class="line">                    &#125;,</div><div class="line">                    <span class="attr">scaleLabel</span>: &#123;</div><div class="line">                        <span class="attr">display</span>: <span class="literal">true</span>,</div><div class="line">                        <span class="attr">labelString</span>: <span class="string">'1k = 1000'</span></div><div class="line">                    &#125;</div><div class="line">	        &#125;</div><div class="line">	    &#125;]    </div><div class="line">	&#125;</div></pre></td></tr></table></figure>
<ul>
<li><h3 id="two-y-scales"><a href="#Two-y-scales" class="headerlink" title="Two y-scales"></a><strong>Two y-scales</strong></h3></li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><div class="line">scales: &#123;</div><div class="line">    <span class="attr">yAxes</span>: [&#123;</div><div class="line">        <span class="attr">ticks</span>: &#123;</div><div class="line">        <span class="attr">position</span>: <span class="string">"left"</span>,</div><div class="line">        <span class="string">"id"</span>: <span class="string">"y-axis-0"</span></div><div class="line">    &#125;, &#123;</div><div class="line">        <span class="attr">ticks</span>: &#123;</div><div class="line">            <span class="attr">max</span>: <span class="number">10</span>,</div><div class="line">            <span class="attr">min</span>: <span class="number">-50</span>,</div><div class="line">            <span class="attr">stepSize</span>: <span class="number">10</span>,</div><div class="line">            <span class="attr">display</span>: <span class="literal">false</span></div><div class="line">        &#125;,</div><div class="line">        <span class="attr">position</span>: <span class="string">"right"</span>,</div><div class="line">        <span class="string">"id"</span>: <span class="string">"y-axis-1"</span></div><div class="line">    &#125;]</div><div class="line">&#125;,</div></pre></td></tr></table></figure>
<p>with corresponding dataset<br><figure class="highlight js"><table><tr><td class="code"><pre><div class="line"><span class="keyword">this</span>.barChartData.push(&#123;<span class="attr">data</span>: data1, <span class="attr">label</span>: <span class="string">'a'</span>, <span class="attr">yAxisID</span>: <span class="string">"y-axis-0"</span>&#125;);</div><div class="line"><span class="keyword">this</span>.barChartData.push(&#123;<span class="attr">data</span>: data2, <span class="attr">label</span>: <span class="string">'b'</span>, <span class="attr">yAxisID</span>: <span class="string">"y-axis-1"</span>&#125;);</div></pre></td></tr></table></figure></p>
<ul>
<li><h2 id="tooltips-congiguration"><a href="#Tooltips-Congiguration" class="headerlink" title="Tooltips Congiguration"></a><strong>Tooltips Congiguration</strong></h2></li>
</ul>
<p>Sometime we have to apply tooltips in special style in chart.js.<br>For example, in the following code, the 1st and 2nd data sets show tooltips in currency format, while the 3rd data set has tooltip with percentage symbole as sufix.</p>
<figure class="highlight js"><table><tr><td class="code"><pre><div class="line">barChartOptions:any = &#123;</div><div class="line">    <span class="attr">tooltips</span>: &#123;</div><div class="line">        <span class="attr">callbacks</span>: &#123;</div><div class="line">            <span class="attr">label</span>: <span class="function"><span class="keyword">function</span> (<span class="params">tooltipItems, data</span>) </span>&#123;</div><div class="line">                <span class="keyword">if</span> (tooltipItems.datasetIndex == <span class="number">2</span>) &#123;</div><div class="line">                    <span class="keyword">return</span> data.datasets[tooltipItems.datasetIndex].label + <span class="string">': '</span> + tooltipItems.yLabel + <span class="string">'%'</span>;</div><div class="line">                &#125; <span class="keyword">else</span> &#123;</div><div class="line">                    <span class="keyword">return</span> data.datasets[tooltipItems.datasetIndex].label + <span class="string">': '</span> +</div><div class="line">                        tooltipItems.yLabel.toFixed(<span class="number">2</span>).replace(<span class="regexp">/(\d)(?=(\d&#123;3&#125;)+\.)/g</span>, <span class="string">'$1,'</span>);</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">	</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>Here, we implemented tooltip <code>label</code> callback function.</p>
<table>
<thead>
<tr>
<th style="text-align:left">Callback</th>
<th style="text-align:left">Arguments</th>
<th style="text-align:left">Description</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">label</td>
<td style="text-align:left">tooltipItem, data</td>
<td style="text-align:left">Text to render for an individual item in the tooltip</td>
</tr>
</tbody>
</table>
<blockquote>
<p>All functions are called with the same arguments: a tooltip item and the data object passed to the chart. All functions must return either a string or an array of strings. Arrays of strings are treated as multiple lines of text.</p>
</blockquote>
<p><strong>Tooltip Item Interface</strong></p>
<p>The tooltip items passed to the tooltip callbacks implement the following interface.</p>
<figure class="highlight js"><table><tr><td class="code"><pre><div class="line">&#123;</div><div class="line">    <span class="comment">// X Value of the tooltip as a string</span></div><div class="line">    xLabel: <span class="built_in">String</span>,</div><div class="line"></div><div class="line">    <span class="comment">// Y value of the tooltip as a string</span></div><div class="line">    yLabel: <span class="built_in">String</span>,</div><div class="line"></div><div class="line">    <span class="comment">// Index of the dataset the item comes from</span></div><div class="line">    datasetIndex: <span class="built_in">Number</span>,</div><div class="line"></div><div class="line">    <span class="comment">// Index of this data item in the dataset</span></div><div class="line">    index: <span class="built_in">Number</span>,</div><div class="line"></div><div class="line">    <span class="comment">// X position of matching point</span></div><div class="line">    x: <span class="built_in">Number</span>,</div><div class="line"></div><div class="line">    <span class="comment">// Y position of matching point</span></div><div class="line">    y: <span class="built_in">Number</span>,</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<hr>
<p><strong>Ref</strong></p>
<ol>
<li><a href="http://valor-software.com/ng2-charts/" target="_blank" rel="external">Chart.js</a> </li>
<li><a href="http://www.chartjs.org/docs/" target="_blank" rel="external">Documentation</a></li>
<li><a href="http://valor-software.github.io/ng2-charts/" target="_blank" rel="external">Demo</a></li>
<li><a href="https://github.com/valor-software/ng2-charts/tree/master/demo" target="_blank" rel="external">Source code</a></li>
</ol>
]]></content>
    
    <summary type="html">
    
      Notes on Chart.js options such as ticks and tooltips configuration.
    
    </summary>
    
      <category term="Angular" scheme="http://volcanohong.github.com/categories/Angular/"/>
    
    
      <category term="angular2" scheme="http://volcanohong.github.com/tags/angular2/"/>
    
      <category term="javascript" scheme="http://volcanohong.github.com/tags/javascript/"/>
    
      <category term="html" scheme="http://volcanohong.github.com/tags/html/"/>
    
      <category term="coding" scheme="http://volcanohong.github.com/tags/coding/"/>
    
      <category term="chart" scheme="http://volcanohong.github.com/tags/chart/"/>
    
  </entry>
  
  <entry>
    <title>Java Cookie</title>
    <link href="http://volcanohong.github.com/2017/02/20/java-cookie/"/>
    <id>http://volcanohong.github.com/2017/02/20/java-cookie/</id>
    <published>2017-02-20T22:09:45.000Z</published>
    <updated>2017-03-12T04:31:15.000Z</updated>
    
    <content type="html"><![CDATA[<ul>
<li><h2 id="http-only-and-secure-flag"><a href="#HTTP-Only-and-Secure-Flag" class="headerlink" title="HTTP Only and Secure Flag"></a><strong>HTTP Only and Secure Flag</strong></h2></li>
</ul>
<p>Set httpOnly and secure flags on session cookie.</p>
<ul>
<li><h3 id="jsessionid"><a href="#JSESSIONID" class="headerlink" title="JSESSIONID"></a><strong>JSESSIONID</strong></h3></li>
</ul>
<p>For JSESSIONID, we can upgrade web servlet to version 3.0,<br>update <code>web.xml</code> as<br><figure class="highlight xml"><table><tr><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">web-app</span> <span class="attr">version</span>=<span class="string">"3.0"</span> <span class="attr">xmlns</span>=<span class="string">"http://java.sun.com/xml/ns/javaee"</span></span></div><div class="line"><span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></div><div class="line"><span class="attr">xsi:schemaLocation</span>=<span class="string">"http://java.sun.com/xml/ns/javaee http://java.sun.com/xml/ns/javaee/web-app_3_0.xsd"</span>&gt;</div></pre></td></tr></table></figure></p>
<p>Then, in <code>web.xml</code>, add <code>&lt;cookie-config&gt;</code> as<br><figure class="highlight xml"><table><tr><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">session-config</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">cookie-config</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">http-only</span>&gt;</span>true<span class="tag">&lt;/<span class="name">http-only</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">secure</span>&gt;</span>true<span class="tag">&lt;/<span class="name">secure</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">cookie-config</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">session-config</span>&gt;</span></div></pre></td></tr></table></figure></p>
<a id="more"></a>
<ul>
<li><h3 id="self-defined-cookie"><a href="#Self-defined-Cookie" class="headerlink" title="Self-defined Cookie"></a><strong>Self-defined Cookie</strong></h3></li>
</ul>
<p>Somehow, the above method does not work on a self-defined cookie in my case.</p>
<p>Here we introducing an alternative solution.</p>
<p>Implement a <code>security filter</code> and made a mapping to the pages who need filter.<br><figure class="highlight xml"><table><tr><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">filter</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>Security Filter<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">filter-class</span>&gt;</span>common.SecurityFilter<span class="tag">&lt;/<span class="name">filter-class</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">filter</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">filter-mapping</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>Security Filter<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>*.jsf<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">filter-mapping</span>&gt;</span></div></pre></td></tr></table></figure></p>
<p>Implement a wrapper that extends <code>HttpServletResponseWrapper</code><br><figure class="highlight java"><table><tr><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SecureCookieSetter</span> <span class="keyword">extends</span> <span class="title">HttpServletResponseWrapper</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">SecureCookieSetter</span><span class="params">(HttpServletResponse response)</span> </span>&#123;</div><div class="line">        <span class="keyword">super</span>(response);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setHeader</span><span class="params">(String name, String value)</span> </span>&#123;</div><div class="line">        <span class="keyword">if</span> ((name.equals(<span class="string">"Set-Cookie"</span>)) &amp;&amp; (!value.matches(<span class="string">"(^|.*;)\\s*Secure"</span>))) &#123;</div><div class="line">            value = value + <span class="string">";Secure"</span>;</div><div class="line">        &#125;</div><div class="line"><span class="comment">//        if ((name.equals("Set-Cookie")) &amp;&amp; (!value.matches("(^|.*;)\\s*HttpOnly"))) &#123;</span></div><div class="line"><span class="comment">//            value = value + ";HttpOnly";</span></div><div class="line"><span class="comment">//        &#125;</span></div><div class="line">        <span class="keyword">super</span>.setHeader(name, value);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>Implement <code>security filter</code><br><figure class="highlight java"><table><tr><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SecurityFilter</span> <span class="keyword">implements</span> <span class="title">Filter</span> </span>&#123;</div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doFilter</span><span class="params">(ServletRequest request, ServletResponse response, FilterChain chain)</span> <span class="keyword">throws</span> IOException, ServletException </span>&#123;</div><div class="line">        HttpServletRequest httpReq = (HttpServletRequest) request;</div><div class="line">        HttpServletResponse httpResp = (HttpServletResponse) response;</div><div class="line">        <span class="comment">// wrap the response</span></div><div class="line">        response = <span class="keyword">new</span> SecureCookieSetter(httpResp);</div><div class="line"></div><div class="line">        <span class="comment">// touch the session if the SessionKey dose not change</span></div><div class="line">        httpReq.getSession();</div><div class="line"></div><div class="line">        <span class="comment">// overwriting the cookie with Secure attribute set</span></div><div class="line">        httpResp.setHeader(<span class="string">"Set-Cookie"</span>, <span class="string">"SessionKey="</span> + sessionKey + <span class="string">";Path=/"</span>);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<ul>
<li><h2 id="understanding-jsessionid"><a href="#Understanding-JSESSIONID" class="headerlink" title="Understanding JSESSIONID"></a><strong>Understanding JSESSIONID</strong></h2></li>
</ul>
<p>JSESSIONID is a ID generated by Servlet container like Tomcat or Jetty and used for session management in J2EE web application for http protocol.<br>The ID is sent to the client either within a cookie (default) or as part of the URL (called URLrewriting, used only if cookies are disabled on the browser).</p>
<p>How JSESSIONID works?</p>
<p>When the first request (that demands a creation of session) arrives on a J2EE server, the server creates HTTPSession object and sends the sessionID to the browser. The browser then send the same sessionId for every subsequent requests.<br>Thus the stateless protocol becomes a stateful one.</p>
<p>There are 2 ways a request(from browser) notifies a container/server to start a new session.<br>Requesting a jsp page. (as we saw above)<br>The container creates certain implicit objects for a JSP and one among those is the HTTPSession object. HTTPSession object holds the sessionId which is written to the response header. You can alter the default behaviour by adding this directive<br><code>&lt;%@ page session=&quot;false&quot;%&gt;</code><br>Requesting a servlet that has code to initiate the creation by calling,<br><figure class="highlight java"><table><tr><td class="code"><pre><div class="line">request.getSession() - returns a HTTPSession object <span class="keyword">if</span> it already exists <span class="keyword">else</span> creates a <span class="keyword">new</span> one</div><div class="line">request.getSession(<span class="keyword">true</span>) - same as above</div><div class="line">request.getSession(<span class="keyword">false</span>) - returns a pre-existing session <span class="keyword">if</span> it exits <span class="keyword">else</span> doesn<span class="string">'t create one.</span></div></pre></td></tr></table></figure></p>
<p><strong>Ref</strong>:</p>
<ol>
<li><a href="http://stackoverflow.com/questions/16398327/set-httponly-and-secure-flags-on-session-cookie-in-google-app-engine" target="_blank" rel="external">Response wrapper</a></li>
<li><a href="http://www.cs-repository.info/2014/07/understanding-jsessionid.html" target="_blank" rel="external">Understand jsessionid</a></li>
</ol>
]]></content>
    
    <summary type="html">
    
      &lt;ul&gt;
&lt;li&gt;&lt;h2 id=&quot;HTTP-Only-and-Secure-Flag&quot;&gt;&lt;a href=&quot;#HTTP-Only-and-Secure-Flag&quot; class=&quot;headerlink&quot; title=&quot;HTTP Only and Secure Flag&quot;&gt;&lt;/a&gt;&lt;strong&gt;HTTP Only and Secure Flag&lt;/strong&gt;&lt;/h2&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Set httpOnly and secure flags on session cookie.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;h3 id=&quot;JSESSIONID&quot;&gt;&lt;a href=&quot;#JSESSIONID&quot; class=&quot;headerlink&quot; title=&quot;JSESSIONID&quot;&gt;&lt;/a&gt;&lt;strong&gt;JSESSIONID&lt;/strong&gt;&lt;/h3&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;For JSESSIONID, we can upgrade web servlet to version 3.0,&lt;br&gt;update &lt;code&gt;web.xml&lt;/code&gt; as&lt;br&gt;&lt;figure class=&quot;highlight xml&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;web-app&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;version&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;3.0&quot;&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;xmlns&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;http://java.sun.com/xml/ns/javaee&quot;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;xmlns:xsi&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;http://www.w3.org/2001/XMLSchema-instance&quot;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;xsi:schemaLocation&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;http://java.sun.com/xml/ns/javaee http://java.sun.com/xml/ns/javaee/web-app_3_0.xsd&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;Then, in &lt;code&gt;web.xml&lt;/code&gt;, add &lt;code&gt;&amp;lt;cookie-config&amp;gt;&lt;/code&gt; as&lt;br&gt;&lt;figure class=&quot;highlight xml&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;session-config&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;cookie-config&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;http-only&lt;/span&gt;&amp;gt;&lt;/span&gt;true&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;http-only&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;secure&lt;/span&gt;&amp;gt;&lt;/span&gt;true&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;secure&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;cookie-config&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;session-config&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="Java" scheme="http://volcanohong.github.com/categories/Java/"/>
    
    
      <category term="java" scheme="http://volcanohong.github.com/tags/java/"/>
    
      <category term="coding" scheme="http://volcanohong.github.com/tags/coding/"/>
    
      <category term="cookie" scheme="http://volcanohong.github.com/tags/cookie/"/>
    
  </entry>
  
  <entry>
    <title>Angular2 Notes V</title>
    <link href="http://volcanohong.github.com/2017/02/09/angular2-notes-5/"/>
    <id>http://volcanohong.github.com/2017/02/09/angular2-notes-5/</id>
    <published>2017-02-09T22:03:55.000Z</published>
    <updated>2017-03-12T04:32:26.000Z</updated>
    
    <content type="html"><![CDATA[<ul>
<li><h2 id="interval-and-clock-ticker"><a href="#Interval-and-Clock-Ticker" class="headerlink" title="Interval and Clock Ticker"></a><strong>Interval and Clock Ticker</strong></h2></li>
</ul>
<p>Use <a href="http://reactivex.io/rxjs/file/es6/observable/IntervalObservable.js.html#lineNumber9" target="_blank" rel="external">IntervalObservable</a> in <code>rxjs</code> to implement interval in angular 2. <code>Create(period)</code> is a static method, which creates an Observable that emits sequential numbers every specified interval of time.</p>
<figure class="highlight java"><table><tr><td class="code"><pre><div class="line"><span class="keyword">import</span> &#123; IntervalObservable &#125; from <span class="string">'rxjs/observable/IntervalObservable'</span>;</div><div class="line"><span class="meta">@Component</span>(&#123;</div><div class="line">    selector: <span class="string">'demo'</span>,</div><div class="line">    templateUrl: <span class="string">'&lt;div&gt;&#123;&#123;time | date:'</span>HH:mm:ss<span class="string">'&#125;&#125;&lt;/div&gt;'</span></div><div class="line">&#125;)</div><div class="line">export <span class="class"><span class="keyword">class</span> <span class="title">Demo</span> <span class="keyword">implements</span> <span class="title">OnInit</span></span>&#123;</div><div class="line">    time:number = Date.now();</div><div class="line">    ngOnInit() &#123;</div><div class="line">        IntervalObservable.create(<span class="number">1000</span>).subscribe(() =&gt; <span class="keyword">this</span>.time = Date.now());</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<a id="more"></a>
<ul>
<li><h3 id="ngonchanges-not-detect-changes-in-object"><a href="#ngOnChanges-Not-Detect-Changes-in-Object" class="headerlink" title="ngOnChanges Not Detect Changes in Object"></a><strong><code>ngOnChanges</code> Not Detect Changes in Object</strong></h3></li>
</ul>
<p>During change detection, when Angular checks components’ input properties for change, it uses (essentially) === for dirty checking. For arrays, this means the array references (only) are dirty checked. Since the <code>rawLapsData</code> array reference isn’t changing, <code>ngOnChanges()</code> will not be fired.</p>
<p>Two possible solutions:</p>
<ol>
<li>Implement <code>ngDoCheck()</code> and perform your own change detection logic to determine if the array contents have changed.</li>
<li>Assign a new array to <code>rawLapsData</code> whenever you make any changes to the array contents. Then <code>ngOnChanges()</code> will be called because the array (reference) will appear as a change.</li>
</ol>
<ul>
<li><h2 id="number-pipe-parameters"><a href="#Number-Pipe-Parameters" class="headerlink" title="Number Pipe Parameters"></a><strong>Number Pipe Parameters</strong></h2></li>
</ul>
<p>For example,<br><figure class="highlight html"><table><tr><td class="code"><pre><div class="line">&#123;&#123; tmpNumber | number : '1.2-2' &#125;&#125;</div></pre></td></tr></table></figure></p>
<p>The parameter has this syntax:</p>
<p><code>{minIntegerDigits}.{minFractionDigits}-{maxFractionDigits}</code></p>
<p>So the example of ‘1.2-2’ means:</p>
<ol>
<li>A minimum of 1 digit will be shown before decimal point.</li>
<li>Show at least 2 digits after decimal point.</li>
<li>No more than 2 digits.</li>
</ol>
<ul>
<li><h2 id="matrix-url"><a href="#Matrix-URL" class="headerlink" title="Matrix URL"></a><strong>Matrix URL</strong></h2></li>
</ul>
<p>Matrix parameters are tied to a path segment, while query parameters are tied to the URL. They have different semantics.</p>
<p>Maybe it’s hard to tell because you always see it at the end of the URL, but this is also matrix paramters<br><code>localhost:3000/heroes;id=15;foo=foo/bar/baz</code></p>
<p>The parameters are tied to heroes. When you access the route.url, you will see this</p>
<figure class="highlight java"><table><tr><td class="code"><pre><div class="line"><span class="keyword">this</span>.route.url.subscribe((url: UrlSegment[]) =&gt; &#123;</div><div class="line">  let heroes = url[<span class="number">0</span>];</div><div class="line">  let heroesMatrix = heroes.parameters();</div><div class="line">  <span class="comment">// heroes should contain id=5, foo=foo</span></div><div class="line">  let bar = url[<span class="number">1</span>].path;</div><div class="line">  let baz = url[<span class="number">2</span>].path;</div><div class="line">&#125;)</div></pre></td></tr></table></figure>
<p>Is the matrix url notation the “default” to creating urls with parameters or is better to use the “old” notation with ?</p>
<p>No, both could be used, and how to use (create) them is completely different</p>
<p>matrix parameters are tied to each path, by passing an object after the path in the array</p>
<p><code>router.navigate([&#39;/foo&#39;, { id:1 }, &#39;bar&#39;, {baz: 2 } ])</code></p>
<p>Here you will get <code>/foo;id=1/bar;baz=2</code>.</p>
<p>Query parameters are created by passing the NavigationExtras as the second argument to navigate</p>
<p><code>router.navigate([&#39;/foo&#39;], { queryParams: { bar: 1, baz: 2 }});</code></p>
<p>Here you get <code>/foo?bar=1&amp;baz=2</code></p>
<p>See also:</p>
<p><a href="http://stackoverflow.com/q/401981/2587435" target="_blank" rel="external">When to use query parameters versus matrix parameters?</a></p>
<p><a href="http://stackoverflow.com/q/2048121/2587435" target="_blank" rel="external">URL matrix parameters vs. request parameters</a></p>
<ul>
<li><h2 id="canactivate-return-observable"><a href="#canActivate-Return-Observable" class="headerlink" title="canActivate Return Observable"></a><strong><code>canActivate</code> Return Observable<boolean></boolean></strong></h2></li>
</ul>
<p>Note:</p>
<ol>
<li><code>CanActive</code> is an interface, that indicates a class can be implement to be a guard deciding if a route can be activated.</li>
<li>Implement <code>canActivate()</code> method. It can return with 3 types.<br><code>canActivate(route: ActivatedRouteSnapshot, state: RouterStateSnapshot) : Observable&lt;boolean&gt;|Promise&lt;boolean&gt;|boolean</code></li>
<li>We can get previous path through RouterStateSnapshot.</li>
<li>Passing parameters via router.navigate(), and the passed params are matrix URL pattern rather than query params.<br>Have to pass the matrix URL parameters to the redirected error page, so that the error page knows what is the link that user wants to access causing an error. </li>
<li>Hope to replace <code>window.location.href</code>in the future, it is not written in angular way.</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><div class="line">canActivate(route:ActivatedRouteSnapshot, state:RouterStateSnapshot): Observable&lt;<span class="keyword">boolean</span>&gt; &#123;</div><div class="line">        <span class="keyword">this</span>.path = state.url;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.roleResourceService.checkStaffRoleResource(<span class="keyword">this</span>.path)</div><div class="line">            .map(isActivate =&gt; &#123;</div><div class="line">                <span class="keyword">if</span>(!isActivate) &#123;</div><div class="line">                    <span class="keyword">this</span>.onCanActivate(isActivate);</div><div class="line">                &#125;</div><div class="line">                <span class="keyword">return</span> isActivate;</div><div class="line">            &#125;);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    onCanActivate(canActivate:<span class="keyword">boolean</span>) &#123;</div><div class="line">        <span class="keyword">if</span> (!canActivate) &#123;</div><div class="line">            <span class="keyword">this</span>.router.navigate([<span class="string">''</span>, <span class="string">'error-role'</span>, &#123;path: <span class="keyword">this</span>.path&#125;]);</div><div class="line">            <span class="keyword">this</span>.roleResourceService.clearCache();</div><div class="line">        &#125;</div><div class="line">    &#125;</div></pre></td></tr></table></figure>
<ul>
<li><h2 id="detect-route-changes"><a href="#Detect-Route-Changes" class="headerlink" title="Detect Route Changes"></a><strong>Detect Route Changes</strong></h2></li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><div class="line"><span class="keyword">import</span> &#123; Router, NavigationStart, NavigationEnd, NavigationError, NavigationCancel, RoutesRecognized &#125; from <span class="string">'@angular/router'</span>;</div><div class="line"></div><div class="line">constructor(router:Router) &#123;</div><div class="line">  router.events.forEach((event) =&gt; &#123;</div><div class="line">    <span class="keyword">if</span>(event <span class="keyword">instanceof</span> NavigationStart) &#123;</div><div class="line">    &#125;</div><div class="line">    <span class="comment">// NavigationEnd</span></div><div class="line">    <span class="comment">// NavigationCancel</span></div><div class="line">    <span class="comment">// NavigationError</span></div><div class="line">    <span class="comment">// RoutesRecognized</span></div><div class="line">  &#125;);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>You can also filter by the given event:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><div class="line"><span class="keyword">import</span> <span class="string">'rxjs/add/operator/filter'</span>;</div><div class="line"></div><div class="line">constructor(router:Router) &#123;</div><div class="line">  router.events</div><div class="line">    .filter(event =&gt; event <span class="keyword">instanceof</span> NavigationStart)</div><div class="line">    .subscribe((event:NavigationStart) =&gt; &#123;</div><div class="line">      <span class="comment">// You only receive NavigationStart events</span></div><div class="line">    &#125;);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><a href="https://github.com/angular/angular/issues/11268#issuecomment-244601977" target="_blank" rel="external">Using pairwise operator</a> to get the previous and current event also is an nice idea. </p>
<figure class="highlight"><table><tr><td class="code"><pre><div class="line">import 'rxjs/add/operator/pairwise';</div><div class="line">import &#123;Router&#125; from '@angular/router;</div><div class="line"></div><div class="line">export class AppComponent &#123;</div><div class="line">    constructor(private router: Router) &#123;</div><div class="line">        this.router.events.pairwise().subscribe((e) =&gt; &#123;</div><div class="line">            console.log(e);</div><div class="line">        &#125;</div><div class="line">    &#125;);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<hr>
<p><strong>Ref</strong>:</p>
<ol>
<li>Rxjs <a href="http://reactivex.io/rxjs/file/es6/observable/IntervalObservable.js.html#lineNumber9" target="_blank" rel="external">IntervalObservable</a></li>
<li><a href="http://stackoverflow.com/q/401981/2587435" target="_blank" rel="external">When to use query parameters versus matrix parameters?</a></li>
<li><a href="http://stackoverflow.com/q/2048121/2587435" target="_blank" rel="external">URL matrix parameters vs. request parameters</a></li>
<li><a href="https://github.com/angular/angular/issues/11268#issuecomment-244601977" target="_blank" rel="external">Using pairwise operator</a></li>
</ol>
]]></content>
    
    <summary type="html">
    
      &lt;ul&gt;
&lt;li&gt;&lt;h2 id=&quot;Interval-and-Clock-Ticker&quot;&gt;&lt;a href=&quot;#Interval-and-Clock-Ticker&quot; class=&quot;headerlink&quot; title=&quot;Interval and Clock Ticker&quot;&gt;&lt;/a&gt;&lt;strong&gt;Interval and Clock Ticker&lt;/strong&gt;&lt;/h2&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Use &lt;a href=&quot;http://reactivex.io/rxjs/file/es6/observable/IntervalObservable.js.html#lineNumber9&quot;&gt;IntervalObservable&lt;/a&gt; in &lt;code&gt;rxjs&lt;/code&gt; to implement interval in angular 2. &lt;code&gt;Create(period)&lt;/code&gt; is a static method, which creates an Observable that emits sequential numbers every specified interval of time.&lt;/p&gt;
&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; &amp;#123; IntervalObservable &amp;#125; from &lt;span class=&quot;string&quot;&gt;&#39;rxjs/observable/IntervalObservable&#39;&lt;/span&gt;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;@Component&lt;/span&gt;(&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    selector: &lt;span class=&quot;string&quot;&gt;&#39;demo&#39;&lt;/span&gt;,&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    templateUrl: &lt;span class=&quot;string&quot;&gt;&#39;&amp;lt;div&amp;gt;&amp;#123;&amp;#123;time | date:&#39;&lt;/span&gt;HH:mm:ss&lt;span class=&quot;string&quot;&gt;&#39;&amp;#125;&amp;#125;&amp;lt;/div&amp;gt;&#39;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;export &lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Demo&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;implements&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;OnInit&lt;/span&gt;&lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    time:number = Date.now();&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    ngOnInit() &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        IntervalObservable.create(&lt;span class=&quot;number&quot;&gt;1000&lt;/span&gt;).subscribe(() =&amp;gt; &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.time = Date.now());&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
      <category term="Angular" scheme="http://volcanohong.github.com/categories/Angular/"/>
    
    
      <category term="angular2" scheme="http://volcanohong.github.com/tags/angular2/"/>
    
      <category term="javascript" scheme="http://volcanohong.github.com/tags/javascript/"/>
    
      <category term="html" scheme="http://volcanohong.github.com/tags/html/"/>
    
      <category term="coding" scheme="http://volcanohong.github.com/tags/coding/"/>
    
  </entry>
  
  <entry>
    <title>Angular2 Notes IV</title>
    <link href="http://volcanohong.github.com/2017/01/29/angular2-notes-4/"/>
    <id>http://volcanohong.github.com/2017/01/29/angular2-notes-4/</id>
    <published>2017-01-29T09:37:48.000Z</published>
    <updated>2017-03-12T04:33:57.000Z</updated>
    
    <content type="html"><![CDATA[<ul>
<li><h2 id="shadow-dom"><a href="#Shadow-DOM" class="headerlink" title="Shadow DOM"></a><strong>Shadow DOM</strong></h2>In fact, Angular doesn’t use native Shadow DOM by default, it uses an emulation. Most browsers simply don’t support Shadow DOM yet, but we should still be able to use the framework. Even better, we can easily tell Angular to use the native Shadow DOM if we want, <a href="https://blog.thoughtram.io/angular/2015/06/29/shadow-dom-strategies-in-angular2.html" target="_blank" rel="external">View Encapsulation in Angular</a>. </li>
</ul>
<p><em>View Encapsulation Types</em><br>Angular comes with view encapsulation built in, which enables us to use Shadow DOM or even emulate it. There are three view encapsulation types:</p>
<ul>
<li>ViewEncapsulation.None - No Shadow DOM at all. Therefore, also no style encapsulation.</li>
<li>ViewEncapsulation.Emulated - No Shadow DOM but style encapsulation emulation.</li>
<li>ViewEncapsulation.Native - Native Shadow DOM with all it’s goodness.</li>
</ul>
<p>To make that Angular doesn’t use Shadow DOM at all. In case adding some attributes to the style so that the style is not rendered well in the browser.<br><figure class="highlight js"><table><tr><td class="code"><pre><div class="line"><span class="keyword">import</span> &#123;Component, OnInit, ViewEncapsulation&#125; <span class="keyword">from</span> <span class="string">'@angular/core'</span>;</div><div class="line">@Component(&#123;</div><div class="line">    <span class="attr">selector</span>: <span class="string">'app-period'</span>,</div><div class="line">    <span class="attr">templateUrl</span>: <span class="string">'./period.component.html'</span>,</div><div class="line">    <span class="attr">encapsulation</span>: ViewEncapsulation.None,</div><div class="line">    <span class="attr">styleUrls</span>: [<span class="string">'./period.component.scss'</span>]</div><div class="line">&#125;)</div></pre></td></tr></table></figure></p>
<a id="more"></a>
<ul>
<li><h2 id="bootstrap-datepicker"><a href="#Bootstrap-Datepicker" class="headerlink" title="Bootstrap Datepicker"></a><strong>Bootstrap Datepicker</strong></h2></li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><div class="line"><span class="keyword">import</span> &#123;DatePickerModule&#125; <span class="keyword">from</span> <span class="string">'ng2-datepicker'</span>;</div><div class="line"><span class="keyword">import</span> &#123;NKDatetimeModule&#125; <span class="keyword">from</span> <span class="string">'ng2-datetime/ng2-datetime'</span></div><div class="line"></div><div class="line"><span class="keyword">import</span> <span class="string">'ng2-datetime/src/vendor/bootstrap-datepicker/bootstrap-datepicker.min.js'</span>;</div><div class="line"><span class="keyword">import</span> <span class="string">'ng2-datetime/src/vendor/bootstrap-timepicker/bootstrap-timepicker.min.js'</span>;</div></pre></td></tr></table></figure>
<figure class="highlight html"><table><tr><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"col-md-3 no-padding"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">datetime</span> [(<span class="attr">ngModel</span>)]=<span class="string">"fromDate"</span> [<span class="attr">timepicker</span>]=<span class="string">"false"</span> [<span class="attr">datepicker</span>]=<span class="string">"fromDateOptions"</span></span></div><div class="line">              <span class="attr">name</span>=<span class="string">"dpFromDate"</span> <span class="attr">id</span>=<span class="string">"dpFromDate"</span> (<span class="attr">ngModelChange</span>)=<span class="string">"onSelectedDates()"</span>&gt;</div><div class="line">    <span class="tag">&lt;/<span class="name">datetime</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div></pre></td></tr></table></figure>
<p>Example of datepicker options…<br><figure class="highlight js"><table><tr><td class="code"><pre><div class="line"><span class="keyword">this</span>.toDateOptions = &#123;</div><div class="line">            <span class="attr">autoclose</span>: <span class="literal">true</span>,</div><div class="line">            <span class="attr">assumeNearbyYear</span>: <span class="literal">true</span>,</div><div class="line">            <span class="attr">format</span>: <span class="string">'dd-mm-yyyy'</span>,</div><div class="line">            <span class="attr">language</span>: <span class="string">'en'</span>,</div><div class="line">            <span class="attr">todayBtn</span>: <span class="string">'linked'</span>,</div><div class="line">            <span class="attr">todayHighlight</span>: <span class="literal">true</span>,</div><div class="line">            <span class="attr">weekStart</span>: <span class="number">1</span>,</div><div class="line">            <span class="attr">icon</span>: <span class="string">'fa fa-calendar'</span></div><div class="line">        &#125;;</div></pre></td></tr></table></figure></p>
<ul>
<li><h2 id="bootstrap-dropdown-button"><a href="#Bootstrap-Dropdown-Button" class="headerlink" title="Bootstrap Dropdown Button"></a><strong>Bootstrap Dropdown Button</strong></h2></li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><div class="line"><span class="keyword">import</span> &#123; ButtonsModule, DropdownModule &#125; <span class="keyword">from</span> <span class="string">'ng2-bootstrap'</span>;</div><div class="line"></div><div class="line">@NgModule(&#123;</div><div class="line">    <span class="attr">imports</span>: [</div><div class="line">        <span class="comment">//...</span></div><div class="line">        ButtonsModule.forRoot(),</div><div class="line">        DropdownModule.forRoot(),</div><div class="line">        <span class="comment">//...</span></div><div class="line">    ],</div><div class="line">    <span class="attr">providers</span>: ...,</div><div class="line">    <span class="attr">declarations</span>: ...</div><div class="line">&#125;)</div></pre></td></tr></table></figure>
<figure class="highlight html"><table><tr><td class="code"><pre><div class="line"> <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"btn-group"</span> <span class="attr">dropdown</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">button</span> <span class="attr">id</span>=<span class="string">"dropdown-btn-curr"</span> <span class="attr">class</span>=<span class="string">"btn btn-secondary"</span> <span class="attr">dropdownToggle</span>&gt;</span></div><div class="line">        &amp;nbsp; &#123;&#123;currDefault&#125;&#125; &amp;nbsp;</div><div class="line">        <span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">"fa fa-caret-down"</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">button</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">ul</span> <span class="attr">dropdownMenu</span> <span class="attr">role</span>=<span class="string">"menu"</span> <span class="attr">aria-labelledby</span>=<span class="string">"dropdown-btn-curr"</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">li</span> <span class="attr">role</span>=<span class="string">"menuitem"</span> *<span class="attr">ngFor</span>=<span class="string">"let curr of currCodeList"</span> &gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">a</span> (<span class="attr">click</span>)=<span class="string">"onCurrencySelected(curr)"</span> <span class="attr">class</span>=<span class="string">"dropdown-item"</span>&gt;</span>&#123;&#123;curr&#125;&#125;<span class="tag">&lt;/<span class="name">a</span>&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div></pre></td></tr></table></figure>
<ul>
<li><h2 id="simple-cache-implementation"><a href="#Simple-Cache-Implementation" class="headerlink" title="Simple Cache Implementation"></a><strong>Simple Cache Implementation</strong></h2></li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><div class="line"><span class="keyword">export</span> <span class="class"><span class="keyword">class</span> <span class="title">TopWinnerService</span> </span>&#123;</div><div class="line">    pathWinningAmount:string = <span class="string">'/winning-amount'</span>;</div><div class="line"></div><div class="line">    _listWinningAmount = <span class="literal">null</span>; <span class="comment">//enable cache for winners' list</span></div><div class="line"></div><div class="line">    <span class="keyword">constructor</span>(private apiService:ApiService) &#123;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    getWinningAmount(params:URLSearchParams) &#123;</div><div class="line">        <span class="keyword">if</span>(<span class="keyword">this</span>._listWinningAmount == <span class="literal">null</span>) &#123;</div><div class="line">        <span class="built_in">console</span>.log(<span class="string">'no cache::_listWinningAmount...'</span>);</div><div class="line">        <span class="keyword">this</span>._listWinningAmount = <span class="keyword">this</span>.apiService.query(<span class="string">''</span>, <span class="keyword">this</span>.pathWinningAmount, params)</div><div class="line">            .publishReplay(<span class="number">1</span>)</div><div class="line">            .refCount();</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">this</span>._listWinningAmount;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    clearCache() &#123;</div><div class="line">        <span class="keyword">this</span>._listWinningAmount = <span class="literal">null</span>;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li><h2 id="resource-relative-path"><a href="#Resource-Relative-Path" class="headerlink" title="Resource Relative Path"></a><strong>Resource Relative Path</strong></h2></li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><div class="line">logo = <span class="built_in">require</span>(<span class="string">"../../assets/img/03.png"</span>);</div></pre></td></tr></table></figure>
<ul>
<li><h2 id="dynamic-base-href"><a href="#Dynamic-Base-Href" class="headerlink" title="Dynamic Base Href"></a><strong>Dynamic Base Href</strong></h2></li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><div class="line">&lt;base href=<span class="string">"./"</span>&gt;</div></pre></td></tr></table></figure>
<ul>
<li><h2 id="cross-origin-problem"><a href="#Cross-Origin-Problem" class="headerlink" title="Cross Origin Problem"></a><strong>Cross Origin Problem</strong></h2>Add an @CrossOrigin annotation to @RestController or @RequestMapping annotated handler method in order to enable CORS on it. By default @CrossOrigin allows all origins and the HTTP methods specified in the @RequestMapping annotation, <a href="http://docs.spring.io/spring/docs/current/spring-framework-reference/html/cors.html" target="_blank" rel="external">CROS Support</a>. E.g.,</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><div class="line"><span class="meta">@CrossOrigin</span>(origins = <span class="string">"http://domain2.com"</span>, maxAge = <span class="number">3600</span>)</div></pre></td></tr></table></figure>
<p><strong>Ref</strong>:</p>
<ol>
<li><a href="https://blog.thoughtram.io/angular/2015/06/29/shadow-dom-strategies-in-angular2.html" target="_blank" rel="external">View Encapsulation in Angular</a></li>
<li><a href="http://docs.spring.io/spring/docs/current/spring-framework-reference/html/cors.html" target="_blank" rel="external">CROS Support</a></li>
</ol>
]]></content>
    
    <summary type="html">
    
      &lt;ul&gt;
&lt;li&gt;&lt;h2 id=&quot;Shadow-DOM&quot;&gt;&lt;a href=&quot;#Shadow-DOM&quot; class=&quot;headerlink&quot; title=&quot;Shadow DOM&quot;&gt;&lt;/a&gt;&lt;strong&gt;Shadow DOM&lt;/strong&gt;&lt;/h2&gt;In fact, Angular doesn’t use native Shadow DOM by default, it uses an emulation. Most browsers simply don’t support Shadow DOM yet, but we should still be able to use the framework. Even better, we can easily tell Angular to use the native Shadow DOM if we want, &lt;a href=&quot;https://blog.thoughtram.io/angular/2015/06/29/shadow-dom-strategies-in-angular2.html&quot;&gt;View Encapsulation in Angular&lt;/a&gt;. &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;em&gt;View Encapsulation Types&lt;/em&gt;&lt;br&gt;Angular comes with view encapsulation built in, which enables us to use Shadow DOM or even emulate it. There are three view encapsulation types:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;ViewEncapsulation.None - No Shadow DOM at all. Therefore, also no style encapsulation.&lt;/li&gt;
&lt;li&gt;ViewEncapsulation.Emulated - No Shadow DOM but style encapsulation emulation.&lt;/li&gt;
&lt;li&gt;ViewEncapsulation.Native - Native Shadow DOM with all it’s goodness.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;To make that Angular doesn’t use Shadow DOM at all. In case adding some attributes to the style so that the style is not rendered well in the browser.&lt;br&gt;&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; &amp;#123;Component, OnInit, ViewEncapsulation&amp;#125; &lt;span class=&quot;keyword&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&#39;@angular/core&#39;&lt;/span&gt;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;@Component(&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;attr&quot;&gt;selector&lt;/span&gt;: &lt;span class=&quot;string&quot;&gt;&#39;app-period&#39;&lt;/span&gt;,&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;attr&quot;&gt;templateUrl&lt;/span&gt;: &lt;span class=&quot;string&quot;&gt;&#39;./period.component.html&#39;&lt;/span&gt;,&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;attr&quot;&gt;encapsulation&lt;/span&gt;: ViewEncapsulation.None,&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;attr&quot;&gt;styleUrls&lt;/span&gt;: [&lt;span class=&quot;string&quot;&gt;&#39;./period.component.scss&#39;&lt;/span&gt;]&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;)&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="Angular" scheme="http://volcanohong.github.com/categories/Angular/"/>
    
    
      <category term="angular2" scheme="http://volcanohong.github.com/tags/angular2/"/>
    
      <category term="javascript" scheme="http://volcanohong.github.com/tags/javascript/"/>
    
      <category term="html" scheme="http://volcanohong.github.com/tags/html/"/>
    
      <category term="coding" scheme="http://volcanohong.github.com/tags/coding/"/>
    
  </entry>
  
  <entry>
    <title>Angular2 Notes III</title>
    <link href="http://volcanohong.github.com/2017/01/28/angular2-notes-3/"/>
    <id>http://volcanohong.github.com/2017/01/28/angular2-notes-3/</id>
    <published>2017-01-29T00:14:33.000Z</published>
    <updated>2017-03-12T04:34:40.000Z</updated>
    
    <content type="html"><![CDATA[<ul>
<li><h2 id="angular-2-notes-modules"><a href="#Angular-2-Notes-Modules" class="headerlink" title="Angular 2 Notes - Modules"></a><strong>Angular 2 Notes - Modules</strong></h2></li>
<li><h3 id="state-management"><a href="#State-Management" class="headerlink" title="State Management"></a><strong>State Management</strong></h3></li>
</ul>
<ul>
<li><p><em>The Problem With Concurrency</em></p>
<p>  Building components which communicate with each other is a typical task involving state. We frequently have to keep up to date with different Angular components interacting with the same state: when more than one component accesses and modifies that state we call it <code>shared mutable state</code>.</p>
</li>
</ul>
<a id="more"></a>    
<ul>
<li><em>keeping the state consistent</em></li>
</ul>
<p>Create a store to manage the state. E.g., the state of Note can be accessed from the store.<br><figure class="highlight js"><table><tr><td class="code"><pre><div class="line"><span class="keyword">import</span> &#123; BehaviorSubject &#125; <span class="keyword">from</span> <span class="string">'rxjs/BehaviorSubject'</span>;</div><div class="line"><span class="keyword">import</span> &#123; Injectable &#125; <span class="keyword">from</span> <span class="string">'@angular/core'</span>;</div><div class="line"><span class="keyword">import</span> <span class="string">'rxjs/Rx'</span>;</div><div class="line"></div><div class="line"><span class="keyword">export</span> interface Note &#123;</div><div class="line">  <span class="attr">color</span>: string,</div><div class="line">  <span class="attr">title</span>: string,</div><div class="line">  <span class="attr">value</span>: string,</div><div class="line">  id?: string | number,</div><div class="line">  createdAt?: string,</div><div class="line">  updatedAt?: string,</div><div class="line">  userId?: string</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">export</span> interface State &#123;</div><div class="line">  <span class="attr">notes</span>: <span class="built_in">Array</span>&lt;Note&gt;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">const</span> defaultState : State = &#123;</div><div class="line">  <span class="attr">notes</span>: []</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">const</span> _store = <span class="keyword">new</span> BehaviorSubject&lt;State&gt;(defaultState);</div><div class="line"></div><div class="line">@Injectable()</div><div class="line"><span class="keyword">export</span> <span class="class"><span class="keyword">class</span> <span class="title">Store</span> </span>&#123;</div><div class="line">  private _store = _store;</div><div class="line">  changes = <span class="keyword">this</span>._store.asObservable().distinctUntilChanged()</div><div class="line"></div><div class="line">  setState(state: State) &#123;</div><div class="line">    <span class="keyword">this</span>._store.next(state);</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  getState(): State &#123;</div><div class="line">    <span class="keyword">return</span> <span class="keyword">this</span>._store.value;</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  purge() &#123;</div><div class="line">    <span class="keyword">this</span>._store.next(defaultState);</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>Apply a <code>store-helper</code> service to keep state…<br><figure class="highlight js"><table><tr><td class="code"><pre><div class="line"><span class="keyword">import</span> &#123; Injectable &#125; <span class="keyword">from</span> <span class="string">'@angular/core'</span>;</div><div class="line"><span class="keyword">import</span> &#123; Store &#125; <span class="keyword">from</span> <span class="string">'../store'</span>;</div><div class="line"></div><div class="line">@Injectable()</div><div class="line"><span class="keyword">export</span> <span class="class"><span class="keyword">class</span> <span class="title">StoreHelper</span> </span>&#123;</div><div class="line">  <span class="keyword">constructor</span>(private store: Store) &#123;&#125;</div><div class="line"></div><div class="line">  update(prop, state) &#123;</div><div class="line">    <span class="keyword">const</span> currentState = <span class="keyword">this</span>.store.getState();</div><div class="line">    <span class="keyword">this</span>.store.setState(<span class="built_in">Object</span>.assign(&#123;&#125;, currentState, &#123; [prop]: state &#125;));</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  add(prop, state) &#123;</div><div class="line">    <span class="keyword">const</span> currentState = <span class="keyword">this</span>.store.getState();</div><div class="line">    <span class="keyword">const</span> collection = currentState[prop];</div><div class="line">    <span class="keyword">this</span>.store.setState(<span class="built_in">Object</span>.assign(&#123;&#125;, currentState, &#123; [prop]: [state, ...collection] &#125;));</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  findAndUpdate(prop, state) &#123;</div><div class="line">    <span class="keyword">const</span> currentState = <span class="keyword">this</span>.store.getState();</div><div class="line">    <span class="keyword">const</span> collection = currentState[prop];</div><div class="line"></div><div class="line">    <span class="keyword">this</span>.store.setState(<span class="built_in">Object</span>.assign(&#123;&#125;, currentState, &#123;[prop]: collection.map(<span class="function"><span class="params">item</span> =&gt;</span> &#123;</div><div class="line">      <span class="keyword">if</span> (item.id !== state.id) &#123;</div><div class="line">        <span class="keyword">return</span> item;</div><div class="line">      &#125;</div><div class="line">      <span class="keyword">return</span> <span class="built_in">Object</span>.assign(&#123;&#125;, item, state)</div><div class="line">    &#125;)&#125;))</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  findAndDelete(prop, id) &#123;</div><div class="line">    <span class="keyword">const</span> currentState = <span class="keyword">this</span>.store.getState();</div><div class="line">    <span class="keyword">const</span> collection = currentState[prop];</div><div class="line">    <span class="keyword">this</span>.store.setState(<span class="built_in">Object</span>.assign(&#123;&#125;, currentState, &#123;[prop]: collection.filter(<span class="function"><span class="params">item</span> =&gt;</span> item.id !== id)&#125;));</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"><span class="string">``</span><span class="string">` </span></div><div class="line"></div><div class="line">Apply the store...</div><div class="line"></div><div class="line">`<span class="string">``</span>js</div><div class="line"><span class="keyword">export</span> <span class="class"><span class="keyword">class</span> <span class="title">Notes</span> </span>&#123;      </div><div class="line">      notes = [];</div><div class="line"></div><div class="line">      <span class="keyword">constructor</span>(</div><div class="line">        private store: Store,</div><div class="line">        private noteService: NoteService</div><div class="line">      ) </div><div class="line">      &#123;   </div><div class="line">        <span class="keyword">this</span>.noteService.getNotes().subscribe();</div><div class="line">        </div><div class="line">        <span class="comment">// this.store.changes.pluck('notes')</span></div><div class="line">        <span class="comment">//   .subscribe((notes: any) =&gt;  this.notes = notes);</span></div><div class="line"></div><div class="line">        <span class="keyword">this</span>.store.changes</div><div class="line">        .map(<span class="function"><span class="params">data</span> =&gt;</span> data.notes)</div><div class="line">        .subscribe(<span class="function"><span class="params">notes</span> =&gt;</span> <span class="keyword">this</span>.notes = notes);</div><div class="line">      &#125;</div><div class="line"></div><div class="line">      onCreateNote(note) &#123;</div><div class="line">        <span class="keyword">this</span>.noteService.createNote(note)</div><div class="line">        .subscribe();</div><div class="line">        <span class="comment">// .subscribe(note =&gt; this.notes.push(note));</span></div><div class="line">      &#125;</div><div class="line"></div><div class="line">      onNoteChecked(note) &#123;</div><div class="line">        <span class="keyword">this</span>.noteService.completeNote(note)</div><div class="line">        .subscribe();</div><div class="line">        <span class="comment">// .subscribe(note =&gt; &#123;</span></div><div class="line">        <span class="comment">//   const i = this.notes.findIndex(localNote =&gt; localNote.id === note.id);</span></div><div class="line">        <span class="comment">//   this.notes.splice(i, 1);</span></div><div class="line">        <span class="comment">// &#125;);</span></div><div class="line">      &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<ul>
<li><h3 id="authentication-management"><a href="#Authentication-Management" class="headerlink" title="Authentication Management"></a><strong>Authentication Management</strong></h3></li>
</ul>
<p>Create authentication service, <code>auth.ts</code>…<br><figure class="highlight js"><table><tr><td class="code"><pre><div class="line"><span class="keyword">import</span> &#123; Injectable &#125; <span class="keyword">from</span> <span class="string">'@angular/core'</span>;</div><div class="line"><span class="keyword">import</span> &#123;CanActivate, Router&#125; <span class="keyword">from</span> <span class="string">'@angular/router'</span>;</div><div class="line"><span class="keyword">import</span> <span class="string">'rxjs/Rx'</span>;</div><div class="line"></div><div class="line">@Injectable()</div><div class="line"><span class="keyword">export</span> <span class="class"><span class="keyword">class</span> <span class="title">AuthService</span> <span class="title">implements</span> <span class="title">CanActivate</span> </span>&#123;</div><div class="line">  JWT_KEY: string = <span class="string">'retain_token'</span>;</div><div class="line">  JWT: string = <span class="string">''</span>;</div><div class="line"></div><div class="line">  <span class="keyword">constructor</span>(private router: Router) &#123;&#125;</div><div class="line"></div><div class="line">  isAuthorized(): boolean &#123;</div><div class="line">    <span class="keyword">return</span> <span class="built_in">Boolean</span>(<span class="keyword">this</span>.JWT);</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  canActivate(): boolean &#123;</div><div class="line">    <span class="keyword">const</span> canActivate = <span class="keyword">this</span>.isAuthorized();</div><div class="line">    <span class="keyword">this</span>.onCanActivate(canActivate);</div><div class="line">    <span class="keyword">return</span> canActivate;</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  onCanActivate(canActivate: boolean) &#123;</div><div class="line">    <span class="keyword">if</span> (!canActivate) &#123;</div><div class="line">      <span class="keyword">this</span>.router.navigate([<span class="string">''</span>, <span class="string">'auth'</span>]);</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>Add auth control in <code>routes.ts</code>.<br><figure class="highlight js"><table><tr><td class="code"><pre><div class="line"><span class="keyword">import</span> &#123; RouterModule &#125; <span class="keyword">from</span> <span class="string">'@angular/router'</span>;</div><div class="line"><span class="keyword">import</span> &#123; ModuleWithProviders &#125; <span class="keyword">from</span> <span class="string">'@angular/core'</span>;</div><div class="line"><span class="keyword">import</span> &#123; Main, Notes, About, Auth &#125; <span class="keyword">from</span> <span class="string">'./containers'</span>;</div><div class="line"><span class="keyword">import</span> &#123; AuthService &#125; <span class="keyword">from</span> <span class="string">'./services'</span>;</div><div class="line"></div><div class="line"><span class="keyword">export</span> <span class="keyword">const</span> routes: ModuleWithProviders = RouterModule.forRoot([</div><div class="line">  &#123;</div><div class="line">    <span class="attr">path</span>: <span class="string">''</span>,</div><div class="line">    <span class="attr">component</span>: Main,</div><div class="line">    <span class="attr">canActivate</span>: [ AuthService ],</div><div class="line">    <span class="attr">children</span>: [</div><div class="line">      &#123; <span class="attr">path</span>: <span class="string">''</span>, <span class="attr">component</span>: Notes &#125;,</div><div class="line">      &#123; <span class="attr">path</span>: <span class="string">'about'</span>, <span class="attr">component</span>: About &#125;</div><div class="line">    ]</div><div class="line">  &#125;,</div><div class="line">  &#123; <span class="attr">path</span>: <span class="string">'auth'</span>, <span class="attr">component</span>: Auth&#125;,</div><div class="line">  &#123; <span class="attr">path</span>: <span class="string">'**'</span>, <span class="attr">redirectTo</span>: <span class="string">''</span> &#125;</div><div class="line">]);</div></pre></td></tr></table></figure></p>
<p>Auth page for example…<br><figure class="highlight js"><table><tr><td class="code"><pre><div class="line"><span class="keyword">import</span> &#123; Component &#125; <span class="keyword">from</span> <span class="string">'@angular/core'</span>;</div><div class="line">@Component(&#123;</div><div class="line">  <span class="attr">selector</span>: <span class="string">'auth-container'</span>,</div><div class="line">  <span class="attr">template</span>: <span class="string">`     &lt;div class="auth-container"&gt;</span></div><div class="line">      &lt;h1&gt;Auth&lt;/h1&gt;</div><div class="line">    &lt;/div&gt;</div><div class="line">  `</div><div class="line">&#125;) </div><div class="line"><span class="keyword">export</span> <span class="class"><span class="keyword">class</span> <span class="title">Auth</span> </span>&#123;&#125;</div></pre></td></tr></table></figure></p>
<hr>
]]></content>
    
    <summary type="html">
    
      &lt;ul&gt;
&lt;li&gt;&lt;h2 id=&quot;Angular-2-Notes-Modules&quot;&gt;&lt;a href=&quot;#Angular-2-Notes-Modules&quot; class=&quot;headerlink&quot; title=&quot;Angular 2 Notes - Modules&quot;&gt;&lt;/a&gt;&lt;strong&gt;Angular 2 Notes - Modules&lt;/strong&gt;&lt;/h2&gt;&lt;/li&gt;
&lt;li&gt;&lt;h3 id=&quot;State-Management&quot;&gt;&lt;a href=&quot;#State-Management&quot; class=&quot;headerlink&quot; title=&quot;State Management&quot;&gt;&lt;/a&gt;&lt;strong&gt;State Management&lt;/strong&gt;&lt;/h3&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;em&gt;The Problem With Concurrency&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;  Building components which communicate with each other is a typical task involving state. We frequently have to keep up to date with different Angular components interacting with the same state: when more than one component accesses and modifies that state we call it &lt;code&gt;shared mutable state&lt;/code&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
      <category term="Angular" scheme="http://volcanohong.github.com/categories/Angular/"/>
    
    
      <category term="angular2" scheme="http://volcanohong.github.com/tags/angular2/"/>
    
      <category term="javascript" scheme="http://volcanohong.github.com/tags/javascript/"/>
    
      <category term="html" scheme="http://volcanohong.github.com/tags/html/"/>
    
      <category term="coding" scheme="http://volcanohong.github.com/tags/coding/"/>
    
  </entry>
  
  <entry>
    <title>Angular2 Notes II</title>
    <link href="http://volcanohong.github.com/2017/01/04/angular2-notes-2/"/>
    <id>http://volcanohong.github.com/2017/01/04/angular2-notes-2/</id>
    <published>2017-01-05T03:25:27.000Z</published>
    <updated>2017-01-29T22:37:41.000Z</updated>
    
    <content type="html"><![CDATA[<ul>
<li><h2 id="angular-2-notes-modules"><a href="#Angular-2-Notes-Modules" class="headerlink" title="Angular 2 Notes - Modules"></a><strong>Angular 2 Notes - Modules</strong></h2></li>
<li><h3 id="api-service"><a href="#API-Service" class="headerlink" title="API Service"></a><strong>API Service</strong></h3></li>
</ul>
<ul>
<li>First, configure the application to use server communication facilities.</li>
</ul>
<p>The Angular <code>Http</code> client communicates with the server using a familiar HTTP request/response protocol. The <code>Http</code> client is one of a family of services in the Angular HTTP library.</p>
<p>E.g., <code>main.ts</code></p>
<figure class="highlight js"><table><tr><td class="code"><pre><div class="line">...</div><div class="line">import &#123; HttpModule&#125; <span class="keyword">from</span> <span class="string">'@angular/http'</span>;</div><div class="line"><span class="comment">//import &#123; HttpModule, JsonpModule &#125; from '@angular/http';</span></div><div class="line"><span class="keyword">import</span> &#123; App, providers&#125; <span class="keyword">from</span> <span class="string">'./app'</span>;</div><div class="line">...</div><div class="line">@NgModule(&#123;</div><div class="line">    <span class="attr">declarations</span>: [</div><div class="line">        App,</div><div class="line">        Main</div><div class="line">        ],</div><div class="line">    providers,</div><div class="line">    <span class="attr">imports</span>: [BrowserModule, FormsModule, HttpModule], </div><div class="line">    <span class="attr">bootstrap</span>: [App]</div><div class="line">&#125;)</div></pre></td></tr></table></figure>
<a id="more"></a>
<p><em>When importing from the @angular/http module, SystemJS knows how to load services from the Angular HTTP library because the systemjs.config.js file maps to that module name.</em></p>
<p><em>JsonpModule isn’t necessary for plain HTTP.</em></p>
<ul>
<li><h4 id="make-a-general-service"><a href="#Make-a-General-Service" class="headerlink" title="Make a General Service"></a><strong>Make a General Service</strong></h4>E.g., <code>api.ts</code></li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><div class="line"><span class="keyword">import</span> &#123; Injectable &#125; <span class="keyword">from</span> <span class="string">'@angular/core'</span>;</div><div class="line"><span class="keyword">import</span> &#123; Headers, Http, Response &#125; <span class="keyword">from</span> <span class="string">'@angular/http'</span>;</div><div class="line"><span class="keyword">import</span> &#123; Observable &#125; <span class="keyword">from</span> <span class="string">'rxjs/Observable'</span>;</div><div class="line"><span class="keyword">import</span> <span class="string">'rxjs/Rx'</span>;</div><div class="line"><span class="keyword">import</span> <span class="string">'rxjs/add/observable/throw'</span>;</div><div class="line"></div><div class="line">@Injectable()</div><div class="line"><span class="keyword">export</span> <span class="class"><span class="keyword">class</span> <span class="title">ApiService</span> </span>&#123;</div><div class="line">  headers: Headers = <span class="keyword">new</span> Headers(&#123;</div><div class="line">    <span class="string">'Content-Type'</span>: <span class="string">'application/json'</span>,</div><div class="line">    <span class="attr">Accept</span>: <span class="string">'application/json'</span></div><div class="line">  &#125;);</div><div class="line"></div><div class="line">  api_url: string = <span class="string">'http://localhost:3500'</span>;</div><div class="line"></div><div class="line">  <span class="comment">//Http client service is injected the constructor.</span></div><div class="line">  <span class="keyword">constructor</span>(private http: Http) &#123;&#125;</div><div class="line"></div><div class="line">  <span class="comment">//the response object doesn't hold the data in a form the app can use directly. </span></div><div class="line">  <span class="comment">//we must parse the response data into a JSON object.</span></div><div class="line">  private getJson(response: Response) &#123;</div><div class="line">    <span class="keyword">return</span> response.json();</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  <span class="comment">//always handle errors</span></div><div class="line">  private checkForError(response: Response): Response &#123;</div><div class="line">    <span class="keyword">if</span> (response.status &gt;= <span class="number">200</span> &amp;&amp; response.status &lt; <span class="number">300</span>) &#123;</div><div class="line">      <span class="keyword">return</span> response;</div><div class="line">    &#125; <span class="keyword">else</span> &#123;</div><div class="line">      <span class="keyword">var</span> error = <span class="keyword">new</span> <span class="built_in">Error</span>(response.statusText)</div><div class="line">      error[<span class="string">'response'</span>] = response;</div><div class="line">      <span class="built_in">console</span>.error(error);</div><div class="line">      <span class="keyword">throw</span> error;</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  <span class="comment">//it will return an Observable when the Http client fetched from the server.</span></div><div class="line">  <span class="comment">//think of an Observable as a stream of events published by some source. </span></div><div class="line">  get(path: string): Observable&lt;any&gt; &#123;</div><div class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.http.get(<span class="string">`<span class="subst">$&#123;<span class="keyword">this</span>.api_url&#125;</span><span class="subst">$&#123;path&#125;</span>`</span>, &#123; <span class="attr">headers</span>: <span class="keyword">this</span>.headers &#125;)</div><div class="line">    .map(<span class="keyword">this</span>.checkForError)</div><div class="line">    .catch(<span class="function"><span class="params">err</span> =&gt;</span> Observable.throw(err))</div><div class="line">    .map(<span class="keyword">this</span>.getJson)</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  post(path: string, body): Observable&lt;any&gt; &#123;</div><div class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.http.post(</div><div class="line">      <span class="string">`<span class="subst">$&#123;<span class="keyword">this</span>.api_url&#125;</span><span class="subst">$&#123;path&#125;</span>`</span>,</div><div class="line">      <span class="built_in">JSON</span>.stringify(body),</div><div class="line">      &#123; <span class="attr">headers</span>: <span class="keyword">this</span>.headers &#125;</div><div class="line">    )</div><div class="line">    .map(<span class="keyword">this</span>.checkForError)</div><div class="line">    .catch(<span class="function"><span class="params">err</span> =&gt;</span> Observable.throw(err))</div><div class="line">    .map(<span class="keyword">this</span>.getJson)</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  <span class="keyword">delete</span>(path: string): Observable&lt;any&gt; &#123;</div><div class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.http.delete(</div><div class="line">      <span class="string">`<span class="subst">$&#123;<span class="keyword">this</span>.api_url&#125;</span><span class="subst">$&#123;path&#125;</span>`</span>,</div><div class="line">      &#123; <span class="attr">headers</span>: <span class="keyword">this</span>.headers &#125;</div><div class="line">    )</div><div class="line">    .map(<span class="keyword">this</span>.checkForError)</div><div class="line">    .catch(<span class="function"><span class="params">err</span> =&gt;</span> Observable.throw(err))</div><div class="line">    .map(<span class="keyword">this</span>.getJson)</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><em>In fact, the http.get method returns an Observable of HTTP Responses (Observable<response>) from the RxJS library and map is one of the RxJS operators.</response></em></p>
<ul>
<li>Export providers<br>E.g., <code>../index.ts</code></li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><div class="line"><span class="keyword">import</span> * <span class="keyword">as</span> services <span class="keyword">from</span> <span class="string">'./services'</span></div><div class="line"><span class="keyword">export</span> &#123; App &#125; <span class="keyword">from</span> <span class="string">'./app'</span>;</div><div class="line"></div><div class="line"><span class="keyword">const</span> mapValuesToArray = <span class="function">(<span class="params">obj</span>) =&gt;</span> <span class="built_in">Object</span>.keys(obj).map(<span class="function"><span class="params">key</span> =&gt;</span> obj[key]);</div><div class="line"></div><div class="line"><span class="keyword">export</span> <span class="keyword">const</span> providers = [  </div><div class="line">  ...mapValuesToArray(services)</div><div class="line">];</div></pre></td></tr></table></figure>
<ul>
<li>Export services<br>E.g., <code>../services/index.ts</code></li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><div class="line"><span class="keyword">export</span> &#123; ApiService &#125; <span class="keyword">from</span> <span class="string">'./api'</span>;</div><div class="line"><span class="keyword">export</span> &#123; NoteService &#125; <span class="keyword">from</span> <span class="string">'./notes'</span>;</div></pre></td></tr></table></figure>
<ul>
<li><h4 id="implement-a-service"><a href="#Implement-a-service" class="headerlink" title="Implement a service"></a><strong>Implement a service</strong></h4>E.g., <code>note.ts</code></li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><div class="line"><span class="keyword">import</span> &#123; Injectable &#125; <span class="keyword">from</span> <span class="string">'@angular/core'</span>;</div><div class="line"><span class="keyword">import</span> &#123; ApiService &#125; <span class="keyword">from</span> <span class="string">'./api'</span>;</div><div class="line"><span class="keyword">import</span> <span class="string">'rxjs/Rx'</span>;</div><div class="line"></div><div class="line">@Injectable()</div><div class="line"><span class="keyword">export</span> <span class="class"><span class="keyword">class</span> <span class="title">NoteService</span> </span>&#123;</div><div class="line">  path: string = <span class="string">'/notes'</span>;</div><div class="line">  <span class="keyword">constructor</span>(private apiService: ApiService) &#123;&#125;</div><div class="line"></div><div class="line">  createNote(note) &#123;</div><div class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.apiService.post(<span class="keyword">this</span>.path, note)</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  getNotes() &#123;</div><div class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.apiService.get(<span class="keyword">this</span>.path)</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  completeNote(note) &#123;</div><div class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.apiService.delete(<span class="string">`<span class="subst">$&#123;<span class="keyword">this</span>.path&#125;</span>/<span class="subst">$&#123;note.id&#125;</span>`</span>)</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li><h4 id="apply-a-service"><a href="#Apply-a-service" class="headerlink" title="Apply a service"></a><strong>Apply a service</strong></h4>E.g., <code>notes.ts</code></li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><div class="line"><span class="keyword">import</span> &#123; NoteService &#125; <span class="keyword">from</span> <span class="string">'../services'</span>;</div><div class="line">...</div><div class="line">export <span class="class"><span class="keyword">class</span> <span class="title">Notes</span> </span>&#123;</div><div class="line">    notes = [];</div><div class="line">    <span class="comment">//inject NoteService to constructor</span></div><div class="line">    <span class="keyword">constructor</span>(private noteService: NoteService) &#123;&#125;</div><div class="line">    </div><div class="line">    <span class="comment">//Although at runtime the component requests heroes immediately after   </span></div><div class="line">    <span class="comment">//creation, you don't call the service's get method in the component's </span></div><div class="line">    <span class="comment">//constructor. Instead, call it inside the ngOnInit()</span></div><div class="line">    ngOnInit() &#123; </div><div class="line">      <span class="keyword">this</span>.noteService.getNotes()</div><div class="line">          .subscribe(<span class="function"><span class="params">res</span> =&gt;</span> <span class="keyword">this</span>.notes = res.data);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">	 <span class="comment">//golden rule: always delegate data access to a supporting service class.</span></div><div class="line">    onCreateNote(note) &#123;</div><div class="line">      <span class="keyword">this</span>.noteService.createNote(note)</div><div class="line">          .subscribe(<span class="function"><span class="params">note</span> =&gt;</span> <span class="keyword">this</span>.notes.push(note));</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    onNoteChecked(note) &#123;</div><div class="line">      <span class="keyword">this</span>.noteService.completeNote(note)</div><div class="line">        .subscribe(<span class="function"><span class="params">note</span> =&gt;</span> &#123;</div><div class="line">            <span class="keyword">const</span> i = <span class="keyword">this</span>.notes.findIndex(<span class="function"><span class="params">localNote</span> =&gt;</span> localNote.id === note.id);</div><div class="line">            <span class="keyword">this</span>.notes.splice(i, <span class="number">1</span>);</div><div class="line">      &#125;);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><em>This is a best practice. Components are easier to test and debug when their constructors are simple, and all real work (especially calling a remote server) is handled in a separate method.</em></p>
<p><em>To listen for events in this stream, subscribe to the Observable (Here, we have translated the obserable to json). These subscriptions specify the actions to take when the web request produces a success event (with the data in the event payload) or a fail event (with the error in the payload).</em></p>
<ul>
<li><h4 id="promise-based"><a href="#Promise-Based" class="headerlink" title="Promise Based"></a><strong>Promise Based</strong></h4></li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><div class="line">getHeroes (): <span class="built_in">Promise</span>&lt;Hero[]&gt; &#123;</div><div class="line">  <span class="keyword">return</span> <span class="keyword">this</span>.http.get(<span class="keyword">this</span>.heroesUrl)</div><div class="line">                  .toPromise()</div><div class="line">                  .then(<span class="keyword">this</span>.extractData)</div><div class="line">                  .catch(<span class="keyword">this</span>.handleError);</div><div class="line">&#125;</div><div class="line">addHero (name: string): <span class="built_in">Promise</span>&lt;Hero&gt; &#123;</div><div class="line">  <span class="keyword">let</span> headers = <span class="keyword">new</span> Headers(&#123; <span class="string">'Content-Type'</span>: <span class="string">'application/json'</span> &#125;);</div><div class="line">  <span class="keyword">let</span> options = <span class="keyword">new</span> RequestOptions(&#123; <span class="attr">headers</span>: headers &#125;);</div><div class="line">  <span class="keyword">return</span> <span class="keyword">this</span>.http.post(<span class="keyword">this</span>.heroesUrl, &#123; name &#125;, options)</div><div class="line">             .toPromise()</div><div class="line">             .then(<span class="keyword">this</span>.extractData)</div><div class="line">             .catch(<span class="keyword">this</span>.handleError);</div><div class="line">&#125;</div><div class="line">private extractData(res: Response) &#123;</div><div class="line">  <span class="keyword">let</span> body = res.json();</div><div class="line">  <span class="keyword">return</span> body.data || &#123; &#125;;</div><div class="line">&#125;</div><div class="line">private handleError (error: Response | any) &#123;</div><div class="line">  <span class="comment">// In a real world app, we might use a remote logging infrastructure</span></div><div class="line">  <span class="keyword">let</span> errMsg: string;</div><div class="line">  <span class="keyword">if</span> (error <span class="keyword">instanceof</span> Response) &#123;</div><div class="line">    <span class="keyword">const</span> body = error.json() || <span class="string">''</span>;</div><div class="line">    <span class="keyword">const</span> err = body.error || <span class="built_in">JSON</span>.stringify(body);</div><div class="line">    errMsg = <span class="string">`<span class="subst">$&#123;error.status&#125;</span> - <span class="subst">$&#123;error.statusText || <span class="string">''</span>&#125;</span> <span class="subst">$&#123;err&#125;</span>`</span>;</div><div class="line">  &#125; <span class="keyword">else</span> &#123;</div><div class="line">    errMsg = error.message ? error.message : error.toString();</div><div class="line">  &#125;</div><div class="line">  <span class="built_in">console</span>.error(errMsg);</div><div class="line">  <span class="keyword">return</span> <span class="built_in">Promise</span>.reject(errMsg);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>We can follow the promise <code>then(this.extractData).catch(this.handleError)</code> pattern as in this example.</p>
<blockquote>
<p>While promises may be more familiar, observables have many advantages.</p>
</blockquote>
<p>Alternatively, you can call <code>toPromise(success, fail)</code>. The observable’s map callback moves to the first success parameter and its catch callback to the second fail parameter in this pattern: <code>.toPromise(this.extractData</code>, this.handleError).</p>
<p>Also, We have to adjust the calling component to expect a Promise instead of an observable:<br><figure class="highlight js"><table><tr><td class="code"><pre><div class="line">getHeroes() &#123;</div><div class="line">  <span class="keyword">this</span>.heroService.getHeroes()</div><div class="line">                   .then(</div><div class="line">                     <span class="function"><span class="params">heroes</span> =&gt;</span> <span class="keyword">this</span>.heroes = heroes,</div><div class="line">                     error =&gt;  <span class="keyword">this</span>.errorMessage = &lt;any&gt;error);</div><div class="line">&#125;</div><div class="line">addHero (name: string) &#123;</div><div class="line">  if (!name) &#123; return; &#125;</div><div class="line">  this.heroService.addHero(name)</div><div class="line">                   .then(</div><div class="line">                     hero  =&gt; this.heroes.push(hero),</div><div class="line">                     error =&gt;  this.errorMessage = &lt;any&gt;error);</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>The less obvious but critical difference is that these two methods return very different results.</p>
<blockquote>
<p>The promise-based <code>then</code> returns another promise. You can keep chaining more <code>then</code> and <code>catch</code> calls, getting a new promise each time.<br>The <code>subscribe</code> method returns a <code>Subscription</code>. A <code>Subscription</code> is not another <code>Observable</code>. It’s the end of the line for observables. You can’t call map on it or call subscribe again. The <code>Subscription</code> object has a different purpose, signified by its primary method, <code>unsubscribe</code>.</p>
</blockquote>
<ul>
<li><h4 id="observalbe-based"><a href="#Observalbe-Based" class="headerlink" title="Observalbe Based*"></a><strong>Observalbe Based*</strong></h4></li>
</ul>
<p><strong>Concept</strong><br><code>Observable</code> in short addresses asynchronous processing and events. Comparing to <code>promise</code>, it can be described as <code>observable</code> = <code>promise</code> + events.</p>
<p>What is great with <code>observables</code> is that they are <em>lazy</em>. <code>Observables</code> can be canceled and you can apply some operators in them (like <code>map</code>, <code>filter</code>, …). This allows to handle asynchronous things in a very flexible way.</p>
<p>A great sample describing the strong power of <code>observables</code> is the way to connect a filter input to a corresponding filtered list. When the user enters characters, the list is refreshed. <code>Observables</code> handle corresponding AJAX requests and cancel previous in progress requests if another one is triggered by new value in the input. E.g.,</p>
<figure class="highlight js"><table><tr><td class="code"><pre><div class="line"><span class="keyword">this</span>.textValue.valueChanges </div><div class="line">    .debounceTime(<span class="number">500</span>) </div><div class="line">    .switchMap(<span class="function"><span class="params">data</span> =&gt;</span> <span class="keyword">this</span>.httpService.getListValues(data)) </div><div class="line">    .subscribe(<span class="function"><span class="params">data</span> =&gt;</span> <span class="built_in">console</span>.log(<span class="string">'new list values'</span>, data));</div></pre></td></tr></table></figure>
<p><strong>In action</strong> </p>
<ol>
<li>Manage the observable by your own. In this case, call the <code>subscribe</code> method on the observable and assign the result into an attribute of the component. Then use this attribute in the view to iterate over the collection:</li>
</ol>
<figure class="highlight js"><table><tr><td class="code"><pre><div class="line">@Component(&#123;</div><div class="line">  <span class="attr">template</span>: <span class="string">`</span></div><div class="line">    &lt;h1&gt;My Friends&lt;/h1&gt;</div><div class="line">    &lt;ul&gt;</div><div class="line">      &lt;li *ngFor="#frnd of result"&gt;</div><div class="line">        &#123;&#123;frnd.name&#125;&#125; is &#123;&#123;frnd.age&#125;&#125; years old.</div><div class="line">      &lt;/li&gt;</div><div class="line">    &lt;/ul&gt;</div><div class="line">  `,</div><div class="line">  <span class="attr">directive</span>:[CORE_DIRECTIVES]</div><div class="line">&#125;)</div><div class="line"></div><div class="line"><span class="keyword">export</span> <span class="class"><span class="keyword">class</span> <span class="title">FriendsList</span> <span class="title">implement</span> <span class="title">OnInit</span>, <span class="title">OnDestroy</span> </span>&#123;</div><div class="line">  result:<span class="built_in">Array</span>&lt;<span class="built_in">Object</span>&gt;; </div><div class="line"></div><div class="line">  <span class="keyword">constructor</span>(http: Http) &#123;</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  ngOnInit() &#123;</div><div class="line">    <span class="keyword">this</span>.friendsObservable = http.get(<span class="string">'friends.json'</span>)</div><div class="line">                  .map(<span class="function"><span class="params">response</span> =&gt;</span> response.json())</div><div class="line">                  .subscribe(<span class="function"><span class="params">result</span> =&gt;</span> <span class="keyword">this</span>.result = result);</div><div class="line">   &#125;</div><div class="line"></div><div class="line">   ngOnDestroy() &#123;</div><div class="line">     <span class="keyword">this</span>.friendsObservable.dispose();</div><div class="line">   &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>Returns from both get and map methods are the observable not the result (in the same way than with promises).</p>
<ol>
<li>Manage the observable by the Angular template. You can also use the a pipe to implicitly manage the observable. In this case, there is no need to explicitly call the subscribe method.</li>
</ol>
<figure class="highlight js"><table><tr><td class="code"><pre><div class="line">@Component(&#123;</div><div class="line">  <span class="attr">template</span>: <span class="string">`</span></div><div class="line">    &lt;h1&gt;My Friends&lt;/h1&gt;</div><div class="line">    &lt;ul&gt;</div><div class="line">      &lt;li *ngFor="#frnd of (result | async)"&gt;</div><div class="line">        &#123;&#123;frnd.name&#125;&#125; is &#123;&#123;frnd.age&#125;&#125; years old.</div><div class="line">      &lt;/li&gt;</div><div class="line">    &lt;/ul&gt;</div><div class="line">  `,</div><div class="line">  <span class="attr">directive</span>:[CORE_DIRECTIVES]</div><div class="line">&#125;)</div><div class="line"></div><div class="line"><span class="keyword">export</span> <span class="class"><span class="keyword">class</span> <span class="title">FriendsList</span> <span class="title">implement</span> <span class="title">OnInit</span> </span>&#123;</div><div class="line">  result:<span class="built_in">Array</span>&lt;<span class="built_in">Object</span>&gt;; </div><div class="line"></div><div class="line">  <span class="keyword">constructor</span>(http: Http) &#123;</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  ngOnInit() &#123;</div><div class="line">    <span class="keyword">this</span>.result = http.get(<span class="string">'friends.json'</span>)</div><div class="line">                  .map(<span class="function"><span class="params">response</span> =&gt;</span> response.json());</div><div class="line">   &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>Note that observables are lazy. So the corresponding HTTP request will be only called once when a listener attached on it is using the subscribe method.</p>
<p>The <code>map</code> method is used to extract the JSON content from the response and use it in the observable processing.</p>
<ul>
<li><h3 id="state-management"><a href="#State-Management" class="headerlink" title="State Management"></a><strong>State Management</strong></h3></li>
<li><h4 id="make-a-store"><a href="#Make-a-Store" class="headerlink" title="Make a Store"></a><strong>Make a Store</strong></h4></li>
</ul>
<p>e.g., <code>store.ts</code><br><figure class="highlight js"><table><tr><td class="code"><pre><div class="line"><span class="keyword">import</span> &#123; BehaviorSubject &#125; <span class="keyword">from</span> <span class="string">'rxjs/BehaviorSubject'</span>;</div><div class="line"><span class="keyword">import</span> &#123; Injectable &#125; <span class="keyword">from</span> <span class="string">'@angular/core'</span>;</div><div class="line"><span class="keyword">import</span> <span class="string">'rxjs/Rx'</span>;</div><div class="line"></div><div class="line"><span class="keyword">export</span> interface Note &#123;</div><div class="line">  <span class="attr">color</span>: string,</div><div class="line">  <span class="attr">title</span>: string,</div><div class="line">  <span class="attr">value</span>: string,</div><div class="line">  id?: string | number,</div><div class="line">  createdAt?: string,</div><div class="line">  updatedAt?: string,</div><div class="line">  userId?: string</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">export</span> interface State &#123;</div><div class="line">  <span class="attr">notes</span>: <span class="built_in">Array</span>&lt;Note&gt;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">const</span> defaultState : State = &#123;</div><div class="line">  <span class="attr">notes</span>: []</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">const</span> _store = <span class="keyword">new</span> BehaviorSubject&lt;State&gt;(defaultState);</div><div class="line"></div><div class="line">@Injectable()</div><div class="line"><span class="keyword">export</span> <span class="class"><span class="keyword">class</span> <span class="title">Store</span> </span>&#123;</div><div class="line">  private _store = _store;</div><div class="line">  changes = <span class="keyword">this</span>._store.asObservable().distinctUntilChanged()</div><div class="line"></div><div class="line">  setState(state: State) &#123;</div><div class="line">    <span class="keyword">this</span>._store.next(state);</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  getState(): State &#123;</div><div class="line">    <span class="keyword">return</span> <span class="keyword">this</span>._store.value;</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  purge() &#123;</div><div class="line">    <span class="keyword">this</span>._store.next(defaultState);</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<ul>
<li><h4 id="make-a-store-helper"><a href="#Make-a-Store-Helper" class="headerlink" title="Make a Store-Helper"></a><strong>Make a Store-Helper</strong></h4></li>
</ul>
<p>e.g., <code>store-helper.ts</code></p>
<figure class="highlight js"><table><tr><td class="code"><pre><div class="line"><span class="keyword">import</span> &#123; Injectable &#125; <span class="keyword">from</span> <span class="string">'@angular/core'</span>;</div><div class="line"><span class="keyword">import</span> &#123; Store &#125; <span class="keyword">from</span> <span class="string">'../store'</span>;</div><div class="line"></div><div class="line">@Injectable()</div><div class="line"><span class="keyword">export</span> <span class="class"><span class="keyword">class</span> <span class="title">StoreHelper</span> </span>&#123;</div><div class="line">  <span class="keyword">constructor</span>(private store: Store) &#123;&#125;</div><div class="line"></div><div class="line">  update(prop, state) &#123;</div><div class="line">    <span class="keyword">const</span> currentState = <span class="keyword">this</span>.store.getState();</div><div class="line">    <span class="keyword">this</span>.store.setState(<span class="built_in">Object</span>.assign(&#123;&#125;, currentState, &#123; [prop]: state &#125;));</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  add(prop, state) &#123;</div><div class="line">    <span class="keyword">const</span> currentState = <span class="keyword">this</span>.store.getState();</div><div class="line">    <span class="keyword">const</span> collection = currentState[prop];</div><div class="line">    <span class="keyword">this</span>.store.setState(<span class="built_in">Object</span>.assign(&#123;&#125;, currentState, &#123; [prop]: [state, ...collection] &#125;));</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  findAndUpdate(prop, state) &#123;</div><div class="line">    <span class="keyword">const</span> currentState = <span class="keyword">this</span>.store.getState();</div><div class="line">    <span class="keyword">const</span> collection = currentState[prop];</div><div class="line"></div><div class="line">    <span class="keyword">this</span>.store.setState(<span class="built_in">Object</span>.assign(&#123;&#125;, currentState, &#123;[prop]: collection.map(<span class="function"><span class="params">item</span> =&gt;</span> &#123;</div><div class="line">      <span class="keyword">if</span> (item.id !== state.id) &#123;</div><div class="line">        <span class="keyword">return</span> item;</div><div class="line">      &#125;</div><div class="line">      <span class="keyword">return</span> <span class="built_in">Object</span>.assign(&#123;&#125;, item, state)</div><div class="line">    &#125;)&#125;))</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  findAndDelete(prop, id) &#123;</div><div class="line">    <span class="keyword">const</span> currentState = <span class="keyword">this</span>.store.getState();</div><div class="line">    <span class="keyword">const</span> collection = currentState[prop];</div><div class="line">    <span class="keyword">this</span>.store.setState(<span class="built_in">Object</span>.assign(&#123;&#125;, currentState, &#123;[prop]: collection.filter(<span class="function"><span class="params">item</span> =&gt;</span> item.id !== id)&#125;));</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li><h4 id="implement-a-store"><a href="#Implement-a-Store" class="headerlink" title="Implement a Store"></a><strong>Implement a Store</strong></h4></li>
</ul>
<p>In container <code>note.ts</code>, </p>
<figure class="highlight js"><table><tr><td class="code"><pre><div class="line"><span class="keyword">import</span> &#123; Store &#125; <span class="keyword">from</span> <span class="string">'../store'</span>;</div><div class="line"><span class="comment">//...</span></div><div class="line"><span class="keyword">export</span> <span class="class"><span class="keyword">class</span> <span class="title">Notes</span> <span class="title">implements</span> <span class="title">OnDestroy</span></span>&#123;</div><div class="line">      notes = [];</div><div class="line">      <span class="keyword">constructor</span>(</div><div class="line">        private store: Store,</div><div class="line">        private noteService: NoteService</div><div class="line">      )&#123;   </div><div class="line">        <span class="keyword">this</span>.noteService.getNotes().subscribe();</div><div class="line">        </div><div class="line">        <span class="comment">// this.store.changes.pluck('notes')</span></div><div class="line">        <span class="comment">//   .subscribe((notes: any) =&gt;  this.notes = notes);</span></div><div class="line">		 	</div><div class="line">        <span class="keyword">this</span>.store.changes</div><div class="line">        .map(<span class="function"><span class="params">data</span> =&gt;</span> data.notes)</div><div class="line">        .subscribe(<span class="function"><span class="params">notes</span> =&gt;</span> <span class="keyword">this</span>.notes = notes);</div><div class="line">      &#125;</div><div class="line">      </div><div class="line">      onCreateNote(note) &#123;</div><div class="line">        <span class="keyword">this</span>.noteService.createNote(note)</div><div class="line">        .subscribe();</div><div class="line">        <span class="comment">// .subscribe(note =&gt; this.notes.push(note));</span></div><div class="line">      &#125;</div><div class="line"></div><div class="line">      onNoteChecked(note) &#123;</div><div class="line">        <span class="keyword">this</span>.noteService.completeNote(note)</div><div class="line">        .subscribe();</div><div class="line">        <span class="comment">// .subscribe(note =&gt; &#123;</span></div><div class="line">        <span class="comment">//   const i = this.notes.findIndex(localNote =&gt; localNote.id === note.id);</span></div><div class="line">        <span class="comment">//   this.notes.splice(i, 1);</span></div><div class="line">        <span class="comment">// &#125;);</span></div><div class="line">      &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>In service <code>note.ts</code>, keep the store up-to-date.</p>
<figure class="highlight js"><table><tr><td class="code"><pre><div class="line"><span class="keyword">import</span> &#123; StoreHelper &#125; <span class="keyword">from</span> <span class="string">'./store-helper'</span>;</div><div class="line"><span class="comment">//...</span></div><div class="line">@Injectable()</div><div class="line"><span class="keyword">export</span> <span class="class"><span class="keyword">class</span> <span class="title">NoteService</span> </span>&#123;</div><div class="line">  path: string = <span class="string">'/notes'</span>;</div><div class="line">  <span class="keyword">constructor</span>(</div><div class="line">    private apiService: ApiService,</div><div class="line">    private storeHelper: StoreHelper</div><div class="line">    ) &#123;&#125;</div><div class="line"></div><div class="line">  createNote(note) &#123;</div><div class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.apiService.post(<span class="keyword">this</span>.path, note)</div><div class="line">    .do(<span class="function"><span class="params">savedNote</span> =&gt;</span> <span class="keyword">this</span>.storeHelper.add(<span class="string">'notes'</span>, savedNote))</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  getNotes() &#123;</div><div class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.apiService.get(<span class="keyword">this</span>.path)</div><div class="line">    .do(<span class="function"><span class="params">res</span> =&gt;</span> <span class="keyword">this</span>.storeHelper.update(<span class="string">'notes'</span>, res.data));</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  completeNote(note) &#123;</div><div class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.apiService.delete(<span class="string">`<span class="subst">$&#123;<span class="keyword">this</span>.path&#125;</span>/<span class="subst">$&#123;note.id&#125;</span>`</span>)</div><div class="line">    .do(<span class="function"><span class="params">res</span> =&gt;</span> <span class="keyword">this</span>.storeHelper.findAndDelete(<span class="string">'notes'</span>, res.id));</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<hr>
<p><strong>Ref:</strong></p>
<ol>
<li><a href="https://angular.io/docs/ts/latest/guide/server-communication.html" target="_blank" rel="external">angular2 http client</a></li>
</ol>
]]></content>
    
    <summary type="html">
    
      &lt;ul&gt;
&lt;li&gt;&lt;h2 id=&quot;Angular-2-Notes-Modules&quot;&gt;&lt;a href=&quot;#Angular-2-Notes-Modules&quot; class=&quot;headerlink&quot; title=&quot;Angular 2 Notes - Modules&quot;&gt;&lt;/a&gt;&lt;strong&gt;Angular 2 Notes - Modules&lt;/strong&gt;&lt;/h2&gt;&lt;/li&gt;
&lt;li&gt;&lt;h3 id=&quot;API-Service&quot;&gt;&lt;a href=&quot;#API-Service&quot; class=&quot;headerlink&quot; title=&quot;API Service&quot;&gt;&lt;/a&gt;&lt;strong&gt;API Service&lt;/strong&gt;&lt;/h3&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;ul&gt;
&lt;li&gt;First, configure the application to use server communication facilities.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The Angular &lt;code&gt;Http&lt;/code&gt; client communicates with the server using a familiar HTTP request/response protocol. The &lt;code&gt;Http&lt;/code&gt; client is one of a family of services in the Angular HTTP library.&lt;/p&gt;
&lt;p&gt;E.g., &lt;code&gt;main.ts&lt;/code&gt;&lt;/p&gt;
&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;...&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;import &amp;#123; HttpModule&amp;#125; &lt;span class=&quot;keyword&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&#39;@angular/http&#39;&lt;/span&gt;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//import &amp;#123; HttpModule, JsonpModule &amp;#125; from &#39;@angular/http&#39;;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; &amp;#123; App, providers&amp;#125; &lt;span class=&quot;keyword&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&#39;./app&#39;&lt;/span&gt;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;...&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;@NgModule(&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;attr&quot;&gt;declarations&lt;/span&gt;: [&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        App,&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        Main&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        ],&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    providers,&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;attr&quot;&gt;imports&lt;/span&gt;: [BrowserModule, FormsModule, HttpModule], &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;attr&quot;&gt;bootstrap&lt;/span&gt;: [App]&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;)&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
      <category term="Angular" scheme="http://volcanohong.github.com/categories/Angular/"/>
    
    
      <category term="angular2" scheme="http://volcanohong.github.com/tags/angular2/"/>
    
      <category term="javascript" scheme="http://volcanohong.github.com/tags/javascript/"/>
    
      <category term="html" scheme="http://volcanohong.github.com/tags/html/"/>
    
      <category term="coding" scheme="http://volcanohong.github.com/tags/coding/"/>
    
  </entry>
  
  <entry>
    <title>Angular Datatable Notes</title>
    <link href="http://volcanohong.github.com/2017/01/01/angular-datatable/"/>
    <id>http://volcanohong.github.com/2017/01/01/angular-datatable/</id>
    <published>2017-01-01T18:50:00.000Z</published>
    <updated>2017-03-12T04:36:07.000Z</updated>
    
    <content type="html"><![CDATA[<p>Recently, I am developing Apps by using angular datatables.</p>
<p>The followings are some issues or note that I have to record.</p>
<h2 id="datatable-options"><a href="#Datatable-Options" class="headerlink" title="Datatable Options"></a><strong>Datatable Options</strong></h2><p>Selected datatable options…</p>
<figure class="highlight js"><table><tr><td class="code"><pre><div class="line">vm.dtOptions = DTOptionsBuilder.newOptions()</div><div class="line">    .withDOM(<span class="string">'&lt;"html5buttons"B&gt;lTfgitp'</span>)</div><div class="line">    .withOption(<span class="string">'deferRender'</span>, <span class="literal">true</span>) <span class="comment">// deferred rendering for additional speed of initialisation</span></div><div class="line">    .withOption(<span class="string">'deferLoading'</span>, <span class="literal">true</span>) <span class="comment">// delay the loading of server-side data until second draw</span></div><div class="line">    .withOption(<span class="string">'processing'</span>, <span class="literal">true</span>) <span class="comment">// add processing indicator</span></div><div class="line">    <span class="comment">// change the options in the page length select list.</span></div><div class="line">    .withOption(<span class="string">'lengthMenu'</span>, [[<span class="number">5</span>, <span class="number">10</span>, <span class="number">25</span>, <span class="number">50</span>, <span class="number">100</span>, <span class="number">-1</span>], [<span class="number">5</span>, <span class="number">10</span>, <span class="number">25</span>, <span class="number">50</span>, <span class="number">100</span>, <span class="string">'ALL'</span>]])</div><div class="line">    .withOption(<span class="string">'aoColumnDefs'</span>, [&#123;<span class="string">"bVisible"</span>: <span class="literal">false</span>, <span class="string">"aTargets"</span>: [<span class="number">3</span>, <span class="number">4</span>]&#125;]) <span class="comment">//could affect search function</span></div><div class="line">    <span class="comment">// .withOption('scrollX', '600px') // add horizontal scroll</span></div><div class="line">    <span class="comment">// .withOption('scrollY', '500px') // add vertical scroll </span></div><div class="line">    <span class="comment">// .withOption('scrollCollapse', true) // table collapse on less data</span></div><div class="line">    <span class="comment">// .withOption('paging', false) // disable pagination</span></div><div class="line">    <span class="comment">// .withOption('searchCols', [null, null, null, &#123; "search": ''&#125;]) // define an initial search for individual columns.</span></div><div class="line">    .withOption(<span class="string">'aoColumnDefs'</span>, [&#123;<span class="string">"bVisible"</span>: <span class="literal">false</span>, <span class="string">"aTargets"</span>: [<span class="number">3</span>, <span class="number">4</span>]&#125;]) <span class="comment">//enable or disable the display of this column</span></div></pre></td></tr></table></figure>
<a id="more"></a>
<p>More options and instruction can refer <a href="https://datatables.net/reference/option/" target="_blank" rel="external">datatable options</a>.</p>
<h2 id="reloading-datatable"><a href="#Reloading-Datatable" class="headerlink" title="Reloading Datatable"></a><strong>Reloading Datatable</strong></h2><p>Calling <code>dtInstance..rerender()</code>…</p>
<figure class="highlight html"><table><tr><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">table</span> <span class="attr">datatable</span>=<span class="string">"ng"</span> <span class="attr">dt-options</span>=<span class="string">"ps.dtOptions"</span> <span class="attr">dt-instance</span>=<span class="string">"ps.dtInstance"</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">table</span>&gt;</span></div></pre></td></tr></table></figure>
<figure class="highlight js"><table><tr><td class="code"><pre><div class="line">$scope.reloadData = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">	<span class="comment">//call api and get some data</span></div><div class="line">        setTimeout(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">            $scope.$apply(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">            <span class="comment">//  vm.dtInstance.rerender();</span></div><div class="line">                $scope.dtInstance._renderer.rerender();</div><div class="line">            &#125;);</div><div class="line">        &#125;, <span class="number">1</span>);</div><div class="line">    &#125;;</div></pre></td></tr></table></figure>
<h2 id="create-a-new-filter"><a href="#Create-a-New-Filter" class="headerlink" title="Create a New Filter"></a><strong>Create a New Filter</strong></h2><p>Create a new filter for datatable by calling function <code>$.fn.dataTableExt.afnFiltering.push(function (oSettings, aData, iDataIndex) {}</code>.</p>
<p>Then, redraw the table, <code>dtInstance.dataTable.fnDraw()</code>, to apply the filter.</p>
<p>For example:<br><figure class="highlight js"><table><tr><td class="code"><pre><div class="line">vm.reloadDataByFilter = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">        $.fn.dataTableExt.afnFiltering.push(<span class="function"><span class="keyword">function</span> (<span class="params">oSettings, aData, iDataIndex</span>) </span>&#123;</div><div class="line">           <span class="comment">// `aData` returns current data array in the table   </span></div><div class="line">           &#123; <span class="comment">// some logic here...</span></div><div class="line">            <span class="keyword">var</span> val = aData.slice(<span class="number">5</span>);</div><div class="line">            <span class="keyword">var</span> res = <span class="literal">false</span>;</div><div class="line">            angular.forEach(val, <span class="function"><span class="keyword">function</span> (<span class="params">v, k</span>) </span>&#123;</div><div class="line">                v = <span class="built_in">Number</span>(v.replace(<span class="regexp">/[^0-9\.]+/g</span>, <span class="string">""</span>)); <span class="comment">//remove currency symbol</span></div><div class="line">                res = vm.checkValue(v, aData[<span class="number">4</span>], aData[<span class="number">3</span>]) || res;</div><div class="line">                <span class="keyword">if</span> (res) <span class="keyword">return</span> res;</div><div class="line">            &#125;);</div><div class="line">            <span class="keyword">return</span> res;</div><div class="line">           &#125;	</div><div class="line">        &#125;);</div><div class="line">        vm.dtInstance.dataTable.fnDraw();</div><div class="line">    &#125;;</div></pre></td></tr></table></figure></p>
<ul>
<li><h2 id="missing-buttons-on-data-change"><a href="#Missing-Buttons-on-Data-Change" class="headerlink" title="Missing Buttons on Data Change"></a><strong>Missing Buttons on Data Change</strong></h2></li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><div class="line">&lt;%--angular-datatables - v0<span class="number">.5</span><span class="number">.2</span>--%&gt;</div><div class="line"><span class="xml"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"../dataTables/datatables.min.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></div><div class="line">&lt;script src=<span class="string">"../dataTables/angular-datatables.min.js"</span>&gt;<span class="xml"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></div><div class="line">&lt;script src=<span class="string">"../dataTables/angular-datatables.buttons.min.js"</span>&gt;<span class="xml"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></div><div class="line"></div><div class="line"></div><div class="line"><span class="comment">//datatable controller </span></div><div class="line">$scope.dtOptions = DTOptionsBuilder.newOptions()</div><div class="line">        .withDOM(<span class="string">'&lt;"html5buttons"B&gt;lTfgitp'</span>)</div><div class="line">        .withButtons([</div><div class="line">            &#123;<span class="attr">extend</span>: <span class="string">'copy'</span>&#125;,</div><div class="line">            &#123;<span class="attr">extend</span>: <span class="string">'csv'</span>&#125;,</div><div class="line">            &#123;</div><div class="line">                <span class="attr">extend</span>: <span class="string">'print'</span>,</div><div class="line">                <span class="attr">customize</span>: <span class="function"><span class="keyword">function</span> (<span class="params">win</span>) </span>&#123;</div><div class="line">                    $(win.document.body).addClass(<span class="string">'white-bg'</span>);</div><div class="line">                    $(win.document.body).css(<span class="string">'font-size'</span>, <span class="string">'10px'</span>);</div><div class="line"></div><div class="line">                    $(win.document.body).find(<span class="string">'table'</span>)</div><div class="line">                        .addClass(<span class="string">'compact'</span>)</div><div class="line">                        .css(<span class="string">'font-size'</span>, <span class="string">'inherit'</span>);</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        ]);</div></pre></td></tr></table></figure>
<p>When the data is changed, the buttons such as ‘Copy’, ‘Print’ and ‘CSV’ from datatable-buttons plugin disappear.</p>
<p><strong>Cause:</strong> It seems the datatable dose not redraw the options like button plugin after data change. </p>
<p><strong>Solution:</strong><br>We can manually add button-options by using angular-datatable <a href="https://datatables.net/reference/option/drawCallback" target="_blank" rel="external">drawCallback function</a>, where the function is called every time DataTables performs a draw.</p>
<figure class="highlight js"><table><tr><td class="code"><pre><div class="line"><span class="keyword">var</span> buttonsOpt = [</div><div class="line">        &#123;</div><div class="line">            <span class="attr">text</span>: <span class="string">'&lt;i class="fa fa-copy"&gt;&lt;/i&gt;'</span>,</div><div class="line">            <span class="attr">extend</span>: <span class="string">'copy'</span></div><div class="line">        &#125;,</div><div class="line">        &#123;</div><div class="line">            <span class="attr">text</span>: <span class="string">'&lt;i class="fa fa-file-text-o"&gt;&lt;/i&gt;'</span>,</div><div class="line">            <span class="attr">extend</span>: <span class="string">'csv'</span></div><div class="line">        &#125;</div><div class="line">    ];</div><div class="line"></div><div class="line">vm.dtOptions = DTOptionsBuilder.newOptions()</div><div class="line">    .withDOM(<span class="string">'&lt;"html5buttons"B&gt;lTfgitp'</span>)</div><div class="line">    .withButtons(buttonsOpt.slice());</div><div class="line"></div><div class="line">vm.dtOptions.drawCallback = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">        <span class="keyword">var</span> api = $(<span class="keyword">this</span>).DataTable();</div><div class="line"></div><div class="line">        <span class="keyword">new</span> $.fn.dataTable.Buttons(api, &#123;</div><div class="line">            <span class="attr">buttons</span>: buttonsOpt.slice()</div><div class="line">        &#125;);</div><div class="line"></div><div class="line">        $(<span class="keyword">this</span>).parent().find(<span class="string">'.dt-buttons'</span>).replaceWith(api.buttons().container());</div><div class="line">    &#125;;</div></pre></td></tr></table></figure>
<p><strong>Ref:</strong></p>
<ol>
<li><a href="https://datatables.net/" target="_blank" rel="external">datatables</a></li>
</ol>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Recently, I am developing Apps by using angular datatables.&lt;/p&gt;
&lt;p&gt;The followings are some issues or note that I have to record.&lt;/p&gt;
&lt;h2 id=&quot;Datatable-Options&quot;&gt;&lt;a href=&quot;#Datatable-Options&quot; class=&quot;headerlink&quot; title=&quot;Datatable Options&quot;&gt;&lt;/a&gt;&lt;strong&gt;Datatable Options&lt;/strong&gt;&lt;/h2&gt;&lt;p&gt;Selected datatable options…&lt;/p&gt;
&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;vm.dtOptions = DTOptionsBuilder.newOptions()&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    .withDOM(&lt;span class=&quot;string&quot;&gt;&#39;&amp;lt;&quot;html5buttons&quot;B&amp;gt;lTfgitp&#39;&lt;/span&gt;)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    .withOption(&lt;span class=&quot;string&quot;&gt;&#39;deferRender&#39;&lt;/span&gt;, &lt;span class=&quot;literal&quot;&gt;true&lt;/span&gt;) &lt;span class=&quot;comment&quot;&gt;// deferred rendering for additional speed of initialisation&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    .withOption(&lt;span class=&quot;string&quot;&gt;&#39;deferLoading&#39;&lt;/span&gt;, &lt;span class=&quot;literal&quot;&gt;true&lt;/span&gt;) &lt;span class=&quot;comment&quot;&gt;// delay the loading of server-side data until second draw&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    .withOption(&lt;span class=&quot;string&quot;&gt;&#39;processing&#39;&lt;/span&gt;, &lt;span class=&quot;literal&quot;&gt;true&lt;/span&gt;) &lt;span class=&quot;comment&quot;&gt;// add processing indicator&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;// change the options in the page length select list.&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    .withOption(&lt;span class=&quot;string&quot;&gt;&#39;lengthMenu&#39;&lt;/span&gt;, [[&lt;span class=&quot;number&quot;&gt;5&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;10&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;25&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;50&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;100&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;-1&lt;/span&gt;], [&lt;span class=&quot;number&quot;&gt;5&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;10&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;25&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;50&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;100&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;ALL&#39;&lt;/span&gt;]])&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    .withOption(&lt;span class=&quot;string&quot;&gt;&#39;aoColumnDefs&#39;&lt;/span&gt;, [&amp;#123;&lt;span class=&quot;string&quot;&gt;&quot;bVisible&quot;&lt;/span&gt;: &lt;span class=&quot;literal&quot;&gt;false&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&quot;aTargets&quot;&lt;/span&gt;: [&lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;4&lt;/span&gt;]&amp;#125;]) &lt;span class=&quot;comment&quot;&gt;//could affect search function&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;// .withOption(&#39;scrollX&#39;, &#39;600px&#39;) // add horizontal scroll&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;// .withOption(&#39;scrollY&#39;, &#39;500px&#39;) // add vertical scroll &lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;// .withOption(&#39;scrollCollapse&#39;, true) // table collapse on less data&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;// .withOption(&#39;paging&#39;, false) // disable pagination&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;// .withOption(&#39;searchCols&#39;, [null, null, null, &amp;#123; &quot;search&quot;: &#39;&#39;&amp;#125;]) // define an initial search for individual columns.&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    .withOption(&lt;span class=&quot;string&quot;&gt;&#39;aoColumnDefs&#39;&lt;/span&gt;, [&amp;#123;&lt;span class=&quot;string&quot;&gt;&quot;bVisible&quot;&lt;/span&gt;: &lt;span class=&quot;literal&quot;&gt;false&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&quot;aTargets&quot;&lt;/span&gt;: [&lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;4&lt;/span&gt;]&amp;#125;]) &lt;span class=&quot;comment&quot;&gt;//enable or disable the display of this column&lt;/span&gt;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
      <category term="Javascript" scheme="http://volcanohong.github.com/categories/Javascript/"/>
    
    
      <category term="datatable" scheme="http://volcanohong.github.com/tags/datatable/"/>
    
      <category term="java" scheme="http://volcanohong.github.com/tags/java/"/>
    
      <category term="angular" scheme="http://volcanohong.github.com/tags/angular/"/>
    
  </entry>
  
  <entry>
    <title>Jhipster MicroService</title>
    <link href="http://volcanohong.github.com/2016/12/18/jhipster-microservice/"/>
    <id>http://volcanohong.github.com/2016/12/18/jhipster-microservice/</id>
    <published>2016-12-18T20:16:51.000Z</published>
    <updated>2017-03-12T04:36:25.000Z</updated>
    
    <content type="html"><![CDATA[<ul>
<li><h2 id="introduction-of-jhipster-ms"><a href="#Introduction-of-JHipster-MS" class="headerlink" title="Introduction of JHipster MS"></a><strong>Introduction of JHipster MS</strong></h2></li>
</ul>
<ol>
<li><strong>JHipster Registry</strong></li>
<li><strong>Create Microservice</strong><br> a. <strong>Microservice: Job App</strong><br> b. <strong>Microservice: Gateway App</strong></li>
<li><strong>Security</strong><br> a. <strong>JWT (JSON Web Token)</strong></li>
<li><strong>Access Control</strong><br> a. <strong>Microservice - Job App API</strong><br> b. <strong>Microservice - Gateway App API</strong></li>
</ol>


	<div class="row">
    <embed src="/content/pdf/JHipsterMicroservice-181216.pdf" width="100%" height="550" type="application/pdf">
	</div>


]]></content>
    
    <summary type="html">
    
      &lt;ul&gt;
&lt;li&gt;&lt;h2 id=&quot;introduction-of-jhipster-ms&quot;&gt;&lt;a href=&quot;#Introduction-of-JHipster-MS&quot; class=&quot;headerlink&quot; title=&quot;Introduction of JHipster MS&quot;&gt;
    
    </summary>
    
      <category term="Framework" scheme="http://volcanohong.github.com/categories/Framework/"/>
    
    
      <category term="java" scheme="http://volcanohong.github.com/tags/java/"/>
    
      <category term="angular" scheme="http://volcanohong.github.com/tags/angular/"/>
    
      <category term="framework" scheme="http://volcanohong.github.com/tags/framework/"/>
    
      <category term="jhipster" scheme="http://volcanohong.github.com/tags/jhipster/"/>
    
      <category term="microservice" scheme="http://volcanohong.github.com/tags/microservice/"/>
    
  </entry>
  
  <entry>
    <title>Firebase Cloud Messaging Notification</title>
    <link href="http://volcanohong.github.com/2016/12/10/fcm-notification/"/>
    <id>http://volcanohong.github.com/2016/12/10/fcm-notification/</id>
    <published>2016-12-10T20:16:51.000Z</published>
    <updated>2016-12-18T20:51:00.000Z</updated>
    
    <content type="html"><![CDATA[<ul>
<li><h3 id="integration-of-google-fcm-notification"><a href="#Integration-of-Google-FCM-Notification" class="headerlink" title="Integration of Google FCM Notification"></a><strong>Integration of Google FCM Notification</strong></h3></li>
</ul>
<ol>
<li><strong>Introduction</strong><br> a. <strong>Key Capability</strong><br> b. <strong>FCM Message Type</strong><br> c. <strong>Implementation Path</strong></li>
<li><strong>Create FCM Project</strong></li>
<li><strong>Server Side Implementation</strong><br> a. <strong>Server Coding</strong><br> b. <strong>Server API Test</strong></li>
</ol>


	<div class="row">
    <embed src="/content/pdf/FirebaseCloudMessagingNotification-181216.pdf" width="100%" height="550" type="application/pdf">
	</div>



]]></content>
    
    <summary type="html">
    
      &lt;ul&gt;
&lt;li&gt;&lt;h3 id=&quot;integration-of-google-fcm-notification&quot;&gt;&lt;a href=&quot;#Integration-of-Google-FCM-Notification&quot; class=&quot;headerlink&quot; title=&quot;Integra
    
    </summary>
    
      <category term="Java" scheme="http://volcanohong.github.com/categories/Java/"/>
    
    
      <category term="java" scheme="http://volcanohong.github.com/tags/java/"/>
    
      <category term="google" scheme="http://volcanohong.github.com/tags/google/"/>
    
      <category term="fcm" scheme="http://volcanohong.github.com/tags/fcm/"/>
    
      <category term="notification" scheme="http://volcanohong.github.com/tags/notification/"/>
    
  </entry>
  
  <entry>
    <title>Jhipster Project</title>
    <link href="http://volcanohong.github.com/2016/11/18/jhipster-project/"/>
    <id>http://volcanohong.github.com/2016/11/18/jhipster-project/</id>
    <published>2016-11-19T05:37:31.000Z</published>
    <updated>2016-12-18T20:15:20.000Z</updated>
    
    <content type="html"><![CDATA[<ul>
<li><h3 id="security-configuration"><a href="#Security-Configuration" class="headerlink" title="Security Configuration"></a><strong>Security Configuration</strong></h3></li>
<li><h4 id="jhipster-security"><a href="#JHipster-Security" class="headerlink" title="JHipster Security"></a><strong>JHipster Security</strong></h4><blockquote>
<p>To use Spring Security with a Single Web Page Application, like the ones generated by JHipster, you need Ajax login/logout/error views. We have configured Spring Security in order to use those views correctly, and of course we generate all the JavaScript and HTML code for you.<br>By default, JHipster comes with 4 different users:<br>“system”, who is mainly used by our audit logs, when something is done automatically<br>“anonymousUser”, who is given to anonymous users when they do an action<br>“user”, who is a normal user with “ROLE_USER” authorization. His default password is “user”<br>“admin”, who is an admin user with “ROLE_USER” and “ROLE_ADMIN” authorizations. His default password is “admin”<br>For security reasons, you should change those default passwords.<br>More info are provided here: <a href="https://jhipster.github.io/security/" target="_blank" rel="external">https://jhipster.github.io/security/</a></p>
</blockquote>
</li>
</ul>
<a id="more"></a>
<ul>
<li><h4 id="role-management"><a href="#Role-Management" class="headerlink" title="Role Management"></a><strong>Role Management</strong></h4>When adding a new ROLE, consider the following steps,</li>
</ul>
<ol>
<li>Update role data in DB, In <code>src/main/resources/config/liquibase</code> directory, add new role to <code>authorities.cs</code>.</li>
<li>Update <code>AuthoritiesConstants.java</code>, add new role constant, and the static method if you need.</li>
<li>Change the corresponding security control and your logic.</li>
</ol>
<ul>
<li><h4 id="java-security-configuration"><a href="#Java-Security-Configuration" class="headerlink" title="Java Security Configuration"></a><strong>Java Security Configuration</strong></h4></li>
</ul>
<ol>
<li><p>Project level </p>
<ul>
<li><p>In <code>SecurityConfiguration.java</code>, define WebSecurity (e.g., specify which api is an exemption) and HttpSecurity</p>
<figure class="highlight java"><table><tr><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">configure</span><span class="params">(WebSecurity web)</span> <span class="keyword">throws</span> Exception </span>&#123;</div><div class="line">    web.ignoring()</div><div class="line">        .antMatchers(<span class="string">"/swagger-ui/index.html"</span>)</div><div class="line">        .antMatchers(<span class="string">"/api/register"</span>)</div><div class="line">        .antMatchers(<span class="string">"/api/activate"</span>);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
<li><p>In <code>OAuth2ServerConfiguration.java</code>, prevent an API from OAuth2 authentication.</p>
</li>
</ul>
</li>
<li><p>Object level<br>Allow a particular role to access an API.</p>
<figure class="highlight java"><table><tr><td class="code"><pre><div class="line"><span class="meta">@RestController</span></div><div class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/api"</span>)</div><div class="line"><span class="meta">@Secured</span>(AuthoritiesConstants.USER)</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">IpsUserProfileResource</span> </span>&#123;...&#125;</div></pre></td></tr></table></figure>
</li>
<li><p>Method level<br>Check whether or not the current login user has a particular role.</p>
<figure class="highlight java"><table><tr><td class="code"><pre><div class="line"><span class="keyword">if</span> (!SecurityUtils.isUserInRole(AuthoritiesConstants.ADMIN)) &#123;</div><div class="line">    <span class="comment">//...</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
</ol>
<ul>
<li><h4 id="angular-security-configuration"><a href="#Angular-Security-Configuration" class="headerlink" title="Angular Security Configuration"></a><strong>Angular Security Configuration</strong></h4><p>Some recommendation here (need explore more and the differences…) </p>
<figure class="highlight html"><table><tr><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">has-role</span>=<span class="string">"ROLE_ADMIN"</span>&gt;</span> <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">has-authority</span>=<span class="string">"ROLE_ADMIN"</span>&gt;</span> <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div></pre></td></tr></table></figure>
</li>
<li><h3 id="more-features"><a href="#More-Features" class="headerlink" title="More Features"></a><strong>More Features</strong></h3></li>
<li><h4 id="oauth2-authentication"><a href="#OAuth2-Authentication" class="headerlink" title="OAuth2 Authentication"></a><strong>OAuth2 Authentication</strong></h4><p>OAuth2 is a stateless security mechanism, so you might prefer it if you want to scale your application across several machines. Spring Security provides an OAuth2 implementation, which we have configured for you.<br>The biggest issue with OAuth2 is that requires to have several database tables in order to store its security tokens. If you are using an SQL database, we provide the necessary Liquibase changlog so that those tables are automatically created for you.</p>
</li>
<li><h4 id="jwt-authentication"><a href="#JWT-authentication" class="headerlink" title="JWT authentication"></a><strong>JWT authentication</strong></h4>JSON Web Token (JWT) authentication, like OAuth2, is a stateless security mechanism, so it’s another good option if you want to scale on several different servers.<br>This authentication mechanism doesn’t exist by default with Spring Security, it’s a JHipster-specific integration of the Java JWT project. It is easier to use and implement than OAuth2, as it does not require a persistence mechanism, so it works on all SQL and NoSQL options.<br>This solution uses a secure token that holds the user’s login name and authorities. As the token is signed, it cannot be altered by a user.<br>The secret key should be configured in the application.yml file, as the jhipster.security.authentication.jwt.secret property.</li>
<li><h4 id="http-session-authentication"><a href="#HTTP-Session-Authentication" class="headerlink" title="HTTP Session Authentication"></a><strong>HTTP Session Authentication</strong></h4>This is the “classical” Spring Security authentication mechanism, but we have improved it quite significantly. It uses the HTTP Session, so it is a stateful mechanism: if you plan to scale your application on multiple servers, you need to have a load balancer with sticky sessions so that each user stays on the same server.</li>
</ul>
<ul>
<li><strong>Improved remember-me mechanism</strong><br>We have modified the Spring Security remember-me mechanism so that you have a unique token, that is stored in your database (SQL or NoSQL database, depending on your choice during generation!). We also store more information than the standard implementation, so you have a better understanding of where those tokens come from: IP address, browser, date… And we generate a complete administration screen, so that you can invalidate sessions, for example if you forgot to log out on another computer.</li>
<li><strong>Cookie theft protection</strong><br>We have added a very complete cookie theft protection mechanism: we store your security information in a cookie, as well as in the database, and each time a user logs in we modify those values and check if they have been altered. That way, if a user ever steals your cookie, he will be able to use only once, at most.</li>
<li><strong>CSRF protection</strong><br>Spring Security and AngularJS both have CSRF protection out-of-the-box, but unfortunately they don’t use the same cookies or HTTP headers! In practice, you have in fact no protection at all for CSRF attacks. Of course, we re-configure both tools so that they correctly work together.</li>
</ul>
<ul>
<li><h4 id="social-login"><a href="#Social-Login" class="headerlink" title="Social Login"></a><strong>Social Login</strong></h4><p>JHipster provide “social login”, using Spring Social, so users can connect to your application using their Google, Facebook or Twitter authentication. This is configured using Sping Boot’s starter modules.</p>
</li>
<li><h3 id="db-management"><a href="#DB-Management" class="headerlink" title="DB Management"></a><strong>DB Management</strong></h3></li>
<li><h4 id="update-db-manually"><a href="#Update-DB-Manually" class="headerlink" title="Update DB Manually"></a><strong>Update DB Manually</strong></h4><blockquote>
<p>Database updates by manually editing the change log</p>
</blockquote>
<p>  If you prefer (or need) to do a database update manually, here is the development workflow:</p>
</li>
</ul>
<ol>
<li>Modify your JPA entity (add a field, a relationship, etc.)</li>
<li><p>Create a new <code>change log</code> in your <code>src/main/resources/config/liquibase/changelog</code> directory. The files in that directory are prefixed by their creation date (in <code>yyyyMMddHHmmss</code> format), and then have a title describing what they do. For example, <code>20141006152300_added_price_to_product.xml</code> is a good name.</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><div class="line">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</div><div class="line"><span class="tag">&lt;<span class="name">databaseChangeLog</span> <span class="attr">xmlns</span>=<span class="string">"http://www.liquibase.org/xml/ns/dbchangelog"</span></span></div><div class="line">                   <span class="attr">xmlns:ext</span>=<span class="string">"http://www.liquibase.org/xml/ns/dbchangelog-ext"</span></div><div class="line">                   <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></div><div class="line">                   <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://www.liquibase.org/xml/ns/dbchangelog-ext http://www.liquibase.org/xml/ns/dbchangelog/dbchangelog-ext.xsd http://www.liquibase.org/xml/ns/dbchangelog http://www.liquibase.org/xml/ns/dbchangelog/dbchangelog-3.5.xsd"</span>&gt;</div><div class="line">    <span class="tag">&lt;<span class="name">changeSet</span> <span class="attr">author</span>=<span class="string">"volcanohong (generated)"</span> <span class="attr">id</span>=<span class="string">"1481426741244-1"</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">addColumn</span> <span class="attr">tableName</span>=<span class="string">"loyalty_scheme"</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">column</span> <span class="attr">name</span>=<span class="string">"created_date"</span> <span class="attr">type</span>=<span class="string">"timestamp"</span>/&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="name">addColumn</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">changeSet</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">changeSet</span> <span class="attr">author</span>=<span class="string">"volcanohong (generated)"</span> <span class="attr">id</span>=<span class="string">"1481426741244-2"</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">addColumn</span> <span class="attr">tableName</span>=<span class="string">"loyalty_scheme"</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">column</span> <span class="attr">name</span>=<span class="string">"last_modified_date"</span> <span class="attr">type</span>=<span class="string">"timestamp"</span>/&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="name">addColumn</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">changeSet</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">databaseChangeLog</span>&gt;</span></div></pre></td></tr></table></figure>
</li>
<li><p>Add this “change log” file in your <code>src/main/resources/config/liquibase/master.xml</code> file, so it is applied the next time you run your application<br>More information for using <a href="http://www.liquibase.org" target="_blank" rel="external">Liquibase</a>.</p>
</li>
</ol>
<p><strong>Note</strong> that in <code>pom.xml</code>, liquibase plugin configuration needs to be updated accordingly.</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">plugin</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.liquibase<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>liquibase-maven-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;liquibase.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.javassist<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>javassist<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.18.2-GA<span class="tag">&lt;/<span class="name">version</span>&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.liquibase.ext<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>liquibase-hibernate4<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;liquibase-hibernate4.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-data-jpa<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;project.parent.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></div><div class="line">    <span class="comment">&lt;!--&lt;configuration&gt;--&gt;</span></div><div class="line">        <span class="comment">&lt;!--&lt;changeLogFile&gt;src/main/resources/config/liquibase/master.xml&lt;/changeLogFile&gt;--&gt;</span></div><div class="line">        <span class="comment">&lt;!--&lt;diffChangeLogFile&gt;src/main/resources/config/liquibase/changelog/$&#123;maven.build.timestamp&#125;_changelog.xml&lt;/diffChangeLogFile&gt;--&gt;</span></div><div class="line">        <span class="comment">&lt;!--&lt;driver&gt;org.h2.Driver&lt;/driver&gt;--&gt;</span></div><div class="line">        <span class="comment">&lt;!--&lt;url&gt;jdbc:h2:file:./target/h2db/db/xxxisg&lt;/url&gt;--&gt;</span></div><div class="line">        <span class="comment">&lt;!--&lt;defaultSchemaName /&gt;--&gt;</span></div><div class="line">        <span class="comment">&lt;!--&lt;username&gt;xxxISG&lt;/username&gt;--&gt;</span></div><div class="line">        <span class="comment">&lt;!--&lt;password /&gt;--&gt;</span></div><div class="line">        <span class="comment">&lt;!--&lt;referenceUrl&gt;hibernate:spring:com.xxx.isg.domain?dialect=org.hibernate.dialect.H2Dialect&amp;amp;hibernate.ejb.naming_strategy=org.springframework.boot.orm.jpa.hibernate.SpringNamingStrategy&lt;/referenceUrl&gt;--&gt;</span></div><div class="line">        <span class="comment">&lt;!--&lt;verbose&gt;true&lt;/verbose&gt;--&gt;</span></div><div class="line">        <span class="comment">&lt;!--&lt;logging&gt;debug&lt;/logging&gt;--&gt;</span></div><div class="line">        <span class="comment">&lt;!--&lt;diffExcludeObjects&gt;oauth_access_token, oauth_approvals, oauth_client_details, oauth_client_token, oauth_code, oauth_refresh_token&lt;/diffExcludeObjects&gt;--&gt;</span></div><div class="line">    <span class="comment">&lt;!--&lt;/configuration&gt;--&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">configuration</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">changeLogFile</span>&gt;</span>src/main/resources/config/liquibase/master.xml<span class="tag">&lt;/<span class="name">changeLogFile</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">diffChangeLogFile</span>&gt;</span>src/main/resources/config/liquibase/changelog/$&#123;maven.build.timestamp&#125;_changelog.xml<span class="tag">&lt;/<span class="name">diffChangeLogFile</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">driver</span>&gt;</span>com.microsoft.sqlserver.jdbc.SQLServerDriver<span class="tag">&lt;/<span class="name">driver</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">url</span>&gt;</span>jdbc:sqlserver://xxx.xxx.net:1433;databaseName=xxx_iscango<span class="tag">&lt;/<span class="name">url</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">defaultSchemaName</span> /&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">username</span>&gt;</span>admin<span class="tag">&lt;/<span class="name">username</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">password</span>&gt;</span>admin<span class="tag">&lt;/<span class="name">password</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">referenceUrl</span>&gt;</span>hibernate:spring:com.xxx.isg.domain?dialect=org.hibernate.dialect.H2Dialect&amp;amp;hibernate.ejb.naming_strategy=org.springframework.boot.orm.jpa.hibernate.SpringNamingStrategy<span class="tag">&lt;/<span class="name">referenceUrl</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">verbose</span>&gt;</span>true<span class="tag">&lt;/<span class="name">verbose</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">logging</span>&gt;</span>debug<span class="tag">&lt;/<span class="name">logging</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">diffExcludeObjects</span>&gt;</span>oauth_access_token, oauth_approvals, oauth_client_details, oauth_client_token, oauth_code, oauth_refresh_token<span class="tag">&lt;/<span class="name">diffExcludeObjects</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></div></pre></td></tr></table></figure>
<p>And there is no need to change any existing <code>xml</code> files except <code>master.xml</code>. Otherwise, a liquibase checksum validation error will raise.</p>
<ul>
<li><h4 id="load-data-to-db"><a href="#Load-Data-to-DB" class="headerlink" title="Load Data to DB"></a><strong>Load Data to DB</strong></h4></li>
</ul>
<ol>
<li>Create a <code>.csv</code> file with data in <code>src/main/resources/config/liquibase</code> directory.</li>
<li><p>Create a <code>change log</code> in <code>src/main/resources/config/liquibase/changelog</code> directory. For example, a <code>xml</code> file with name <code>20161140000001_load_data_UserDevice.xml</code>, which specify the changelog id, data file, separator and table name.</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><div class="line">&lt;?xml version="1.0" encoding="utf-8"?&gt;</div><div class="line"><span class="tag">&lt;<span class="name">databaseChangeLog</span></span></div><div class="line">    <span class="attr">xmlns</span>=<span class="string">"http://www.liquibase.org/xml/ns/dbchangelog"</span></div><div class="line">    <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></div><div class="line">    <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://www.liquibase.org/xml/ns/dbchangelog http://www.liquibase.org/xml/ns/dbchangelog/dbchangelog-3.4.xsd"</span>&gt;</div><div class="line">    <span class="comment">&lt;!--</span></div><div class="line">        Loaded data for UserDevice.</div><div class="line">    --&gt;</div><div class="line">    <span class="tag">&lt;<span class="name">changeSet</span> <span class="attr">id</span>=<span class="string">"20161110000001-3"</span> <span class="attr">author</span>=<span class="string">"jhipster"</span>&gt;</span></div><div class="line"> </div><div class="line">        <span class="tag">&lt;<span class="name">loadData</span> <span class="attr">encoding</span>=<span class="string">"UTF-8"</span></span></div><div class="line">                  <span class="attr">file</span>=<span class="string">"config/liquibase/user_device.csv"</span></div><div class="line">                  <span class="attr">separator</span>=<span class="string">","</span></div><div class="line">                  <span class="attr">tableName</span>=<span class="string">"user_device"</span>/&gt;</div><div class="line">    <span class="tag">&lt;/<span class="name">changeSet</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">databaseChangeLog</span>&gt;</span></div></pre></td></tr></table></figure>
</li>
<li><p>Update <code>master.xml</code> file with the changelog of loading data.</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">databaseChangeLog</span>&gt;</span></div><div class="line">...</div><div class="line">    <span class="tag">&lt;<span class="name">include</span> <span class="attr">file</span>=<span class="string">"classpath:config/liquibase/changelog/20161140000001_load_data_UserDevice.xml"</span> <span class="attr">relativeToChangelogFile</span>=<span class="string">"false"</span>/&gt;</span></div><div class="line">...</div><div class="line"><span class="tag">&lt;/<span class="name">databaseChangeLog</span>&gt;</span></div></pre></td></tr></table></figure>
</li>
<li><p>run <code>./mvnw clean</code> to clean the DB.</p>
</li>
</ol>
<ul>
<li><h4 id="update-default-data"><a href="#Update-Default-Data" class="headerlink" title="Update Default Data"></a><strong>Update Default Data</strong></h4>Here taking <code>USER</code> and <code>USER_AUTHORITY</code> table for example. </li>
</ul>
<ol>
<li><p>In file <code>users.csv</code>, update all default user data<br>The password should be encrypted.</p>
<figure class="highlight java"><table><tr><td class="code"><pre><div class="line"><span class="keyword">import</span> org.springframework.security.crypto.password.PasswordEncoder;</div><div class="line"></div><div class="line"><span class="meta">@Inject</span></div><div class="line"><span class="keyword">private</span> PasswordEncoder passwordEncoder;</div><div class="line"></div><div class="line">String encryptedPassword = passwordEncoder.encode(password);</div></pre></td></tr></table></figure>
</li>
<li><p>In file <code>users_authorities.csv</code>, update user authorities bridge table.</p>
</li>
<li><p>Run maven test to make sure all tests can pass. For example, if the admin user is changed, one of the test in <code>UserResourceIntTest.java</code> might be failed.<br><img src="/content/images/2016/jhipster_load_data.png" alt=""></p>
</li>
</ol>
]]></content>
    
    <summary type="html">
    
      &lt;ul&gt;
&lt;li&gt;&lt;h3 id=&quot;Security-Configuration&quot;&gt;&lt;a href=&quot;#Security-Configuration&quot; class=&quot;headerlink&quot; title=&quot;Security Configuration&quot;&gt;&lt;/a&gt;&lt;strong&gt;Security Configuration&lt;/strong&gt;&lt;/h3&gt;&lt;/li&gt;
&lt;li&gt;&lt;h4 id=&quot;JHipster-Security&quot;&gt;&lt;a href=&quot;#JHipster-Security&quot; class=&quot;headerlink&quot; title=&quot;JHipster Security&quot;&gt;&lt;/a&gt;&lt;strong&gt;JHipster Security&lt;/strong&gt;&lt;/h4&gt;&lt;blockquote&gt;
&lt;p&gt;To use Spring Security with a Single Web Page Application, like the ones generated by JHipster, you need Ajax login/logout/error views. We have configured Spring Security in order to use those views correctly, and of course we generate all the JavaScript and HTML code for you.&lt;br&gt;By default, JHipster comes with 4 different users:&lt;br&gt;“system”, who is mainly used by our audit logs, when something is done automatically&lt;br&gt;“anonymousUser”, who is given to anonymous users when they do an action&lt;br&gt;“user”, who is a normal user with “ROLE_USER” authorization. His default password is “user”&lt;br&gt;“admin”, who is an admin user with “ROLE_USER” and “ROLE_ADMIN” authorizations. His default password is “admin”&lt;br&gt;For security reasons, you should change those default passwords.&lt;br&gt;More info are provided here: &lt;a href=&quot;https://jhipster.github.io/security/&quot;&gt;https://jhipster.github.io/security/&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
      <category term="Framework" scheme="http://volcanohong.github.com/categories/Framework/"/>
    
    
      <category term="java" scheme="http://volcanohong.github.com/tags/java/"/>
    
      <category term="framework" scheme="http://volcanohong.github.com/tags/framework/"/>
    
      <category term="jhipster" scheme="http://volcanohong.github.com/tags/jhipster/"/>
    
  </entry>
  
  <entry>
    <title>Jhipster Notes</title>
    <link href="http://volcanohong.github.com/2016/11/11/jhipster-notes/"/>
    <id>http://volcanohong.github.com/2016/11/11/jhipster-notes/</id>
    <published>2016-11-12T05:37:31.000Z</published>
    <updated>2016-11-19T15:27:36.000Z</updated>
    
    <content type="html"><![CDATA[<ul>
<li><h3 id="install-jhipster"><a href="#Install-JHipster" class="headerlink" title="Install JHipster"></a><strong>Install JHipster</strong></h3></li>
</ul>
<p>Requirement: Java 8, Maven, Git, Node.js</p>
<p>Start with installing <code>Yeoman</code> and <code>Bower</code></p>
<p><code>npm install -g yo</code></p>
<blockquote>
<p><a href="http://yeoman.io/" target="_blank" rel="external">YEOMAN</a>, the web’s scaffording tool for webapps. Yeoman helps you to kickstart new projects, prescribing best practices and tools to help you stay productive.</p>
</blockquote>
<p><code>npm install -g bower</code></p>
<blockquote>
<p><a href="https://bower.io/" target="_blank" rel="external">BOWER</a>, a package manager for the web. Web sites are made of lots of things — frameworks, libraries, assets, and utilities. Bower manages all these things for you. Bower keeps track of these packages in a manifest file, <code>bower.json</code>.</p>
</blockquote>
<p>Then, install <code>Grunt</code> and <code>jHipster</code></p>
<p><code>npm install -g grunt-cli</code></p>
<blockquote>
<p><a href="http://gruntjs.com/" target="_blank" rel="external">GRUNT</a>, the javascript task runner. With literally hundreds of plugins to choose from, you can use Grunt to automate just about anything with a minimum of effort.</p>
</blockquote>
<p><code>npm install -g generator-jhipster</code></p>
<blockquote>
<p><a href="https://jhipster.github.io/" target="_blank" rel="external">JHipster</a> is a fully Open Source, widely used application generator. Easily create high-quality Spring Boot + AngularJS projects!</p>
</blockquote>
<a id="more"></a>
<p>We may also need to do this.<br><code>npm install</code></p>
<p><code>bower install</code></p>
<p>And option for installing <code>Gulp</code></p>
<p><code>gulp install</code></p>
<blockquote>
<p><a href="http://gulpjs.com/" target="_blank" rel="external">Gulp</a> is a task/build runner for development. It allows you to do a lot of stuff within your development workflow. You can compile sass files, uglify and compress js files and much more. The kicker for gulp is that its a streaming build system which doesn’t write temp files. It’s like Pipes in bash. One task flow into another. Gulp could be compared to Grunt in its usage. </p>
</blockquote>
<ul>
<li><h3 id="new-project"><a href="#New-Project" class="headerlink" title="New Project"></a><strong>New Project</strong></h3></li>
</ul>
<p>Invoke <code>jHipster</code> to create a new project</p>
<p><code>yo jhipster</code></p>
<p>On running this command, it needs to answer questions about how the application to be generated.<br><img src="/content/images/2016/jhipster_generating_app.png" alt="Generating the application"></p>
<p>After answering all the questions, JHipster created a whole bunch of files.</p>
<ul>
<li><h4 id="run-test"><a href="#Run-Test" class="headerlink" title="Run Test"></a><strong>Run Test</strong></h4></li>
</ul>
<p>To make sure everything was good to go, </p>
<p>Run unit tests using <code>grunt test</code> or <code>./mvnw test</code> (or <code>mvn test</code> if you have maven).</p>
<ul>
<li><h4 id="run-project"><a href="#Run-Project" class="headerlink" title="Run Project"></a><strong>Run Project</strong></h4></li>
</ul>
<p>Command for running a project</p>
<p><code>./mvnw</code></p>
<p>Whenever the DB is updated, it has to clean the <code>/target</code> file which including temporary and DB files to initialize the DB.</p>
<p><code>./mvnw clean</code></p>
<p>Sometimes, when the temporary files are deleted, the app may raise error like <code>... bean not found</code>. Try to avoid it by compile again</p>
<p><code>./mvnw compile</code> </p>
<ul>
<li><h4 id="update-jhipster"><a href="#Update-Jhipster" class="headerlink" title="Update Jhipster"></a><strong>Update Jhipster</strong></h4></li>
</ul>
<p>Update <code>jHipster</code><br><figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">npm update -g generator-jhipster</div></pre></td></tr></table></figure></p>
<p>This installs the latest version of JHipster, but does nothing to upgrade the project. Then, run the following command to update the project.<br><figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">yo jhipster</div></pre></td></tr></table></figure></p>
<ul>
<li><h4 id="add-material-design"><a href="#Add-Material-Design" class="headerlink" title="Add Material Design"></a><strong>Add Material Design</strong></h4></li>
</ul>
<p>For instance,<br>Check <code>bower.json</code> with<br><figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">&quot;bootstrap-material-design&quot;: &quot;~0.3.0&quot;</div></pre></td></tr></table></figure></p>
<p>At bottom of <code>index.html</code> (<code>src/main/webapp/index.html</code>), add<br><figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">&lt;script&gt;</div><div class="line">    $.material.init()</div><div class="line">&lt;/script&gt;</div></pre></td></tr></table></figure></p>
<ul>
<li><h4 id="liquibase-inconsistency"><a href="#Liquibase-Inconsistency" class="headerlink" title="Liquibase Inconsistency"></a><strong>Liquibase Inconsistency</strong></h4></li>
</ul>
<p>If you add or modify a JPA entity, you will need to update your DB schema.</p>
<p>If you have choosen to use MySQL, MariaDB or PostgreSQL in development, you can use the <code>./mvnw liquibase:diff</code> goal to automatically generate a changelog.</p>
<ul>
<li><h4 id="entity-creation-or-update"><a href="#Entity-Creation-or-Update" class="headerlink" title="Entity Creation or Update"></a><strong>Entity Creation or Update</strong></h4></li>
</ul>
<p><strong>Method 1</strong>: The jhipster command used to create an entity, then in command line, answer the questions, such as field name, type, constraints and relationships to other entities.</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><div class="line">yo jhipster:entity &lt;name&gt;</div></pre></td></tr></table></figure>
<p><strong>Method 2</strong>: Generating an entity directily by json files.</p>
<p>For instance, first creating json file, e.g., <code>UserGroup.json</code>, then, run <code>yo jhipster:entity userGroup</code> and re-gernerate the entity.</p>
<figure class="highlight json"><table><tr><td class="code"><pre><div class="line">&#123;</div><div class="line">    <span class="attr">"fluentMethods"</span>: <span class="literal">true</span>,</div><div class="line">    <span class="attr">"relationships"</span>: [</div><div class="line">        &#123;</div><div class="line">            <span class="attr">"relationshipType"</span>: <span class="string">"many-to-one"</span>,</div><div class="line">            <span class="attr">"relationshipName"</span>: <span class="string">"loyaltyScheme"</span>,</div><div class="line">            <span class="attr">"otherEntityName"</span>: <span class="string">"loyaltyScheme"</span>,</div><div class="line">            <span class="attr">"otherEntityField"</span>: <span class="string">"id"</span></div><div class="line">        &#125;</div><div class="line">    ],</div><div class="line">    <span class="attr">"fields"</span>: [</div><div class="line">        &#123;</div><div class="line">            <span class="attr">"fieldName"</span>: <span class="string">"name"</span>,</div><div class="line">            <span class="attr">"fieldType"</span>: <span class="string">"String"</span>,</div><div class="line">            <span class="attr">"fieldValidateRules"</span>: [</div><div class="line">                <span class="string">"required"</span></div><div class="line">            ]</div><div class="line">        &#125;,</div><div class="line">        &#123;</div><div class="line">            <span class="attr">"fieldName"</span>: <span class="string">"age"</span>,</div><div class="line">            <span class="attr">"fieldType"</span>: <span class="string">"Integer"</span></div><div class="line">        &#125;,</div><div class="line">        &#123;</div><div class="line">            <span class="attr">"fieldName"</span>: <span class="string">"gender"</span>,</div><div class="line">            <span class="attr">"fieldType"</span>: <span class="string">"GenderType"</span>,</div><div class="line">            <span class="attr">"fieldValues"</span>: <span class="string">"M,F"</span></div><div class="line">        &#125;</div><div class="line">    ],</div><div class="line">    <span class="attr">"changelogDate"</span>: <span class="string">"20161107000001"</span>,</div><div class="line">    <span class="attr">"dto"</span>: <span class="string">"mapstruct"</span>,</div><div class="line">    <span class="attr">"service"</span>: <span class="string">"no"</span>,</div><div class="line">    <span class="attr">"entityTableName"</span>: <span class="string">"user_group"</span>,</div><div class="line">    <span class="attr">"pagination"</span>: <span class="string">"infinite-scroll"</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>The above json file define the entity name, fields, relationships, changelog id,  whether or not to generate DTO and service layers, the style of pagination at the same time.</p>
<p><strong>Method 3</strong>: Using <a href="https://jhipster.github.io/jdl/" target="_blank" rel="external">JDL</a> to create a whole bunch of entities based on DB schema.</p>
<ul>
<li><h3 id="jhipster-domain-language-jdl"><a href="#Jhipster-Domain-Language-JDL" class="headerlink" title="Jhipster Domain Language (JDL)"></a><strong>Jhipster Domain Language (JDL)</strong></h3></li>
</ul>
<blockquote>
<p>The <a href="https://jhipster.github.io/jdl/" target="_blank" rel="external">JDL</a> is a JHipster specific domain language which describes all the entities and their relationships in a single file (or more than one) with a simple and user-friendly syntax.</p>
</blockquote>
<p><img src="/content/images/2016/jhipster_entity_jdl.png" alt="Generating entity by JDL"></p>
<p>Entity syntax:</p>
<ol>
<li><code>entity name</code> is the name of the entity,</li>
<li><code>field name</code> the name of one field of the entity,</li>
<li><code>type</code> the JHipster supported type of the field,</li>
<li>and as an option <validation> the validations for the field.</validation></li>
</ol>
<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">entity Author &#123;</div><div class="line">    name String required,</div><div class="line">    address String required maxlength(100),</div><div class="line">    age Integer required min(18)</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">relationship (OneToMany | ManyToOne | OneToOne | ManyToMany) </div><div class="line">&#123;</div><div class="line">    &lt;from entity&gt;[&#123;&lt;relationship name&gt;&#125;] to &lt;to entity&gt;[&#123;&lt;relationship name&gt;&#125;]</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>For example,<br><figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">relationship OneToMany &#123;</div><div class="line">  Author&#123;book&#125; to Book&#123;writer(name)&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>Command for jhipster to create entity by using JDL file</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><div class="line">yo jhipster:import-jdl jhipster-jdl.jh</div></pre></td></tr></table></figure>
<ul>
<li><h3 id="q-amp-a"><a href="#Q-amp-A" class="headerlink" title="Q &amp; A"></a><strong>Q &amp; A</strong></h3></li>
</ul>
<ul>
<li><p>Delete a entity ?<br><em>Currently, jhipster has no function to delete an entity after creating it (20+ files). The best way is using version control to revert to the version before creating new entities.</em></p>
</li>
<li><p>Make Foreign Key to be required field?<br><em>All the relationships in jhipster is a loose control. So the FK cannot set to be required when creating entities.</em></p>
</li>
</ul>
<hr>
<p><strong>Ref</strong></p>
<ol>
<li><a href="https://jhipster.github.io/" target="_blank" rel="external">JHipster</a></li>
</ol>
]]></content>
    
    <summary type="html">
    
      &lt;ul&gt;
&lt;li&gt;&lt;h3 id=&quot;Install-JHipster&quot;&gt;&lt;a href=&quot;#Install-JHipster&quot; class=&quot;headerlink&quot; title=&quot;Install JHipster&quot;&gt;&lt;/a&gt;&lt;strong&gt;Install JHipster&lt;/strong&gt;&lt;/h3&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Requirement: Java 8, Maven, Git, Node.js&lt;/p&gt;
&lt;p&gt;Start with installing &lt;code&gt;Yeoman&lt;/code&gt; and &lt;code&gt;Bower&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;npm install -g yo&lt;/code&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;a href=&quot;http://yeoman.io/&quot;&gt;YEOMAN&lt;/a&gt;, the web’s scaffording tool for webapps. Yeoman helps you to kickstart new projects, prescribing best practices and tools to help you stay productive.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;code&gt;npm install -g bower&lt;/code&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;a href=&quot;https://bower.io/&quot;&gt;BOWER&lt;/a&gt;, a package manager for the web. Web sites are made of lots of things — frameworks, libraries, assets, and utilities. Bower manages all these things for you. Bower keeps track of these packages in a manifest file, &lt;code&gt;bower.json&lt;/code&gt;.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Then, install &lt;code&gt;Grunt&lt;/code&gt; and &lt;code&gt;jHipster&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;npm install -g grunt-cli&lt;/code&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;a href=&quot;http://gruntjs.com/&quot;&gt;GRUNT&lt;/a&gt;, the javascript task runner. With literally hundreds of plugins to choose from, you can use Grunt to automate just about anything with a minimum of effort.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;code&gt;npm install -g generator-jhipster&lt;/code&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;a href=&quot;https://jhipster.github.io/&quot;&gt;JHipster&lt;/a&gt; is a fully Open Source, widely used application generator. Easily create high-quality Spring Boot + AngularJS projects!&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="Framework" scheme="http://volcanohong.github.com/categories/Framework/"/>
    
    
      <category term="java" scheme="http://volcanohong.github.com/tags/java/"/>
    
      <category term="framework" scheme="http://volcanohong.github.com/tags/framework/"/>
    
      <category term="jhipster" scheme="http://volcanohong.github.com/tags/jhipster/"/>
    
  </entry>
  
  <entry>
    <title>AngularJS notes I</title>
    <link href="http://volcanohong.github.com/2016/11/01/angularjs-notes-1/"/>
    <id>http://volcanohong.github.com/2016/11/01/angularjs-notes-1/</id>
    <published>2016-11-02T04:37:31.000Z</published>
    <updated>2016-11-08T03:25:11.000Z</updated>
    
    <content type="html"><![CDATA[<ul>
<li><h4 id="error-digest-already-in-progress-when-calling-scopeapply"><a href="#Error-digest-already-in-progress-when-calling-scope-apply" class="headerlink" title="Error: $digest already in progress when calling $scope.$apply()"></a><strong>Error: <code>$digest</code> already in progress when calling <code>$scope.$apply()</code></strong></h4></li>
</ul>
<p>Raise error when calling <code>$scope.$apply()</code></p>
<figure class="highlight js"><table><tr><td class="code"><pre><div class="line">$scope.$apply(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">    vm.error = <span class="string">'ERROR'</span>;</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<p>Problem is fixed by calling <code>$timeout</code> instead.</p>
<figure class="highlight js"><table><tr><td class="code"><pre><div class="line">$timeout(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">   <span class="comment">//code here will run afterwards</span></div><div class="line">   vm.error = <span class="string">'ERROR'</span>;</div><div class="line">&#125;, <span class="number">1</span>);</div></pre></td></tr></table></figure>
<a id="more"></a>
<p><strong>Comments:</strong></p>
<p>Simply using <code>$timeout</code> is not the best nor the right solution. Also, make sure that if you are concerned by performances or scalability.</p>
<p>Things we should know</p>
<p><strong><code>$$phase</code></strong> is private to the framework and there are good reasons for that.</p>
<p><strong><code>$timeout(callback)</code></strong> will wait until the current digest cycle (if any) is done, then execute the callback, then run at the end a full <code>$apply</code>.</p>
<p><strong><code>$timeout(callback, delay, false)</code></strong> will do the same (with an optional delay before executing the callback), but will not fire an <code>$apply</code> (third argument) which saves performances if you didn’t modify your Angular model (<code>$scope</code>).</p>
<p><strong><code>$scope.$apply(callback)</code></strong> invokes, among other things, <strong><code>$rootScope.$digest</code></strong>, which means it will redigest the root scope of the application and all of its children, even if you’re within an isolated scope.</p>
<p><strong><code>$scope.$digest()</code></strong> will simply sync its model to the view, but will not digest its parents scope, which can save a lot of performances when working on an isolated part of your HTML with an isolated scope (from a directive mostly). <code>$digest</code> does not take a callback: you execute the code, then digest.</p>
<p><strong><code>$scope.$evalAsync(callback)</code></strong> has been introduced with angularjs 1.2, and will probably solve most of your troubles. Please refer to the last paragraph to learn more about it.<br>if you get the <code>$digest</code> already in progress error, then your architecture is wrong: either you don’t need to redigest your scope, or you should not be in charge of that (see below).</p>
<p><strong>How to structure your code</strong></p>
<p>When you get that error, you’re trying to digest your scope while it’s already in progress: since you don’t know the state of your scope at that point, you’re not in charge of dealing with its digestion.</p>
<figure class="highlight js"><table><tr><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">editModel</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    $scope.someVar = someVal;</div><div class="line">    <span class="comment">/* Do not apply your scope here since we don't know if that function is called synchronously from Angular or from an asynchronous code */</span></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// Processed by Angular, for instance called by a ng-click directive</span></div><div class="line">$scope.applyModelSynchronously = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="comment">// No need to digest</span></div><div class="line">    editModel();</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// Any kind of asynchronous code, for instance a server request</span></div><div class="line">callServer(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="comment">/* That code is not watched nor digested by Angular, thus we can safely $apply it */</span></div><div class="line">    $scope.$apply(editModel);</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<p>And if you know what you’re doing and working on an isolated small directive while part of a big Angular application, you could prefer <code>$digest</code> instead over <code>$apply</code> to save performances.</p>
<p><strong>Update since Angularjs 1.2</strong></p>
<p>A new, powerful method has been added to any <code>$scope: $evalAsync</code>. Basically, it will execute its callback within the current digest cycle if one is occurring, otherwise a new digest cycle will start executing the callback.</p>
<p>That is still not as good as a <code>$scope.$digest</code> if you really know that you only need to synchronize an isolated part of your HTML (since a new <code>$apply</code> will be triggered if none is in progress), but this is the best solution when you are executing a function which you cannot know it if will be executed synchronously or not, for instance after fetching a resource potentially cached: sometimes this will require an async call to a server, otherwise the resource will be locally fetched synchronously.</p>
<p>In these cases and all the others where you had a ! <code>$scope.$$phase</code>, be sure to use <code>$scope.$evalAsync(callback)</code>.</p>
<hr>
<p><strong>Ref</strong></p>
<ol>
<li><a href="https://angular.io/docs" target="_blank" rel="external">angular docs.</a></li>
</ol>
]]></content>
    
    <summary type="html">
    
      &lt;ul&gt;
&lt;li&gt;&lt;h4 id=&quot;Error-digest-already-in-progress-when-calling-scope-apply&quot;&gt;&lt;a href=&quot;#Error-digest-already-in-progress-when-calling-scope-apply&quot; class=&quot;headerlink&quot; title=&quot;Error: $digest already in progress when calling $scope.$apply()&quot;&gt;&lt;/a&gt;&lt;strong&gt;Error: &lt;code&gt;$digest&lt;/code&gt; already in progress when calling &lt;code&gt;$scope.$apply()&lt;/code&gt;&lt;/strong&gt;&lt;/h4&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Raise error when calling &lt;code&gt;$scope.$apply()&lt;/code&gt;&lt;/p&gt;
&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;$scope.$apply(&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; (&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    vm.error = &lt;span class=&quot;string&quot;&gt;&#39;ERROR&#39;&lt;/span&gt;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;);&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;Problem is fixed by calling &lt;code&gt;$timeout&lt;/code&gt; instead.&lt;/p&gt;
&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;$timeout(&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; (&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;   &lt;span class=&quot;comment&quot;&gt;//code here will run afterwards&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;   vm.error = &lt;span class=&quot;string&quot;&gt;&#39;ERROR&#39;&lt;/span&gt;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;, &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;);&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
      <category term="Javascript" scheme="http://volcanohong.github.com/categories/Javascript/"/>
    
    
      <category term="angular" scheme="http://volcanohong.github.com/tags/angular/"/>
    
      <category term="javascript" scheme="http://volcanohong.github.com/tags/javascript/"/>
    
      <category term="html" scheme="http://volcanohong.github.com/tags/html/"/>
    
      <category term="coding" scheme="http://volcanohong.github.com/tags/coding/"/>
    
  </entry>
  
  <entry>
    <title>Java QR code</title>
    <link href="http://volcanohong.github.com/2016/10/07/java-qr-code/"/>
    <id>http://volcanohong.github.com/2016/10/07/java-qr-code/</id>
    <published>2016-10-08T04:27:41.000Z</published>
    <updated>2017-01-01T18:49:36.000Z</updated>
    
    <content type="html"><![CDATA[<ul>
<li><h4 id="qr-code-generator"><a href="#QR-Code-Generator" class="headerlink" title="QR Code Generator"></a><strong>QR Code Generator</strong></h4></li>
</ul>
<p>Utilize google QR code generator …<br>Define the <code>charset</code>, <code>format</code>, and <code>size</code>.<br>Use <code>MatrixToImageWriter</code> to write a <code>BitMatrix</code> to <code>BufferedImage</code>, file or stream. </p>
<a id="more"></a>
<p><em>toBufferedImage</em> method<br><figure class="highlight java"><table><tr><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> BufferedImage <span class="title">toBufferedImage</span><span class="params">(BitMatrix matrix)</span> </span>&#123;...&#125;</div></pre></td></tr></table></figure></p>
<p><em>encode</em> method<br><figure class="highlight java"><table><tr><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> BitMatrix <span class="title">encode</span><span class="params">(String contents, BarcodeFormat format, <span class="keyword">int</span> width, <span class="keyword">int</span> height, Map&lt;EncodeHintType, ?&gt; hints)</span> <span class="keyword">throws</span> WriterException </span>&#123;...&#125;</div></pre></td></tr></table></figure></p>
<p><em>decode</em> method<br><figure class="highlight java"><table><tr><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> Result <span class="title">decode</span><span class="params">(BinaryBitmap image, Map&lt;DecodeHintType, ?&gt; hints)</span> <span class="keyword">throws</span> NotFoundException </span>&#123;...&#125;</div></pre></td></tr></table></figure></p>
<p>Available <code>BarcodeFormat</code><br><figure class="highlight java"><table><tr><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="keyword">enum</span> BarcodeFormat &#123;</div><div class="line">    AZTEC,</div><div class="line">    CODABAR,</div><div class="line">    CODE_39,</div><div class="line">    CODE_93,</div><div class="line">    CODE_128,</div><div class="line">    DATA_MATRIX,</div><div class="line">    EAN_8,</div><div class="line">    EAN_13,</div><div class="line">    ITF,</div><div class="line">    MAXICODE,</div><div class="line">    PDF_417,</div><div class="line">    QR_CODE,</div><div class="line">    RSS_14,</div><div class="line">    RSS_EXPANDED,</div><div class="line">    UPC_A,</div><div class="line">    UPC_E,</div><div class="line">    UPC_EAN_EXTENSION;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>An example goes here …<br><figure class="highlight java"><table><tr><td class="code"><pre><div class="line"><span class="keyword">import</span> com.google.zxing.*;</div><div class="line"><span class="keyword">import</span> com.google.zxing.client.j2se.BufferedImageLuminanceSource;</div><div class="line"><span class="keyword">import</span> com.google.zxing.client.j2se.MatrixToImageWriter;</div><div class="line"><span class="keyword">import</span> com.google.zxing.common.HybridBinarizer;</div><div class="line"><span class="keyword">import</span> com.google.zxing.qrcode.decoder.ErrorCorrectionLevel;</div><div class="line"></div><div class="line"><span class="keyword">import</span> javax.imageio.ImageIO;</div><div class="line"><span class="keyword">import</span> java.*;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ZxingUtil</span> </span>&#123;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Map&lt;EncodeHintType, ErrorCorrectionLevel&gt; encodeMap = <span class="keyword">new</span> HashMap&lt;EncodeHintType, ErrorCorrectionLevel&gt;();</div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Map&lt;DecodeHintType, ErrorCorrectionLevel&gt; decodeMap = <span class="keyword">new</span> HashMap&lt;DecodeHintType, ErrorCorrectionLevel&gt;();</div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String charset=<span class="string">"UTF-8"</span>, format=<span class="string">"png"</span>;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> size = <span class="number">150</span>;</div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="title">ZxingUtil</span><span class="params">()</span> </span>&#123;&#125;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * QR code encoder</div><div class="line">     *</div><div class="line">     * <span class="doctag">@param</span> data data to be encoded</div><div class="line">     * <span class="doctag">@throws</span> WriterException</div><div class="line">     * <span class="doctag">@throws</span> IOException</div><div class="line">     */</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> BufferedImage <span class="title">createQRCode</span><span class="params">(String data)</span></span></div><div class="line">        <span class="keyword">throws</span> WriterException, IOException &#123;</div><div class="line">        <span class="keyword">return</span> MatrixToImageWriter.toBufferedImage(<span class="keyword">new</span> MultiFormatWriter()</div><div class="line">                .encode(<span class="keyword">new</span> String(data.getBytes(charset), charset),</div><div class="line">                    BarcodeFormat.QR_CODE, size, size, encodeMap));</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * QR code decoder</div><div class="line">     *</div><div class="line">     * <span class="doctag">@param</span> image QR code image</div><div class="line">     * <span class="doctag">@return</span></div><div class="line">     * <span class="doctag">@throws</span> FileNotFoundException</div><div class="line">     * <span class="doctag">@throws</span> IOException</div><div class="line">     * <span class="doctag">@throws</span> NotFoundException</div><div class="line">     */</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">readQRCode</span><span class="params">(<span class="keyword">byte</span>[] image)</span></span></div><div class="line">        <span class="keyword">throws</span> FileNotFoundException, IOException, NotFoundException &#123;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">new</span> MultiFormatReader().decode(</div><div class="line">            <span class="keyword">new</span> BinaryBitmap(</div><div class="line">                <span class="keyword">new</span> HybridBinarizer(</div><div class="line">                    <span class="keyword">new</span> BufferedImageLuminanceSource(</div><div class="line">                        ImageIO.read(<span class="keyword">new</span> ByteArrayInputStream(image))))), decodeMap).getText();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<ul>
<li><h4 id="example-to-create-qr-code"><a href="#Example-to-Create-QR-Code" class="headerlink" title="Example to Create QR Code"></a><strong>Example to Create QR Code</strong></h4></li>
</ul>
<p>An example of using above method to create QR code …</p>
<figure class="highlight java"><table><tr><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * create user QR scan code</div><div class="line"> * <span class="doctag">@param</span> userScanCodeDTO</div><div class="line"> * <span class="doctag">@return</span> Optional&lt;BufferedImage&gt;</div><div class="line"> */</div><div class="line"><span class="function"><span class="keyword">public</span> Optional&lt;Image&gt; <span class="title">createUserQRCode</span><span class="params">(@NotNull UserScanCodeDTO userScanCodeDTO)</span> </span>&#123;</div><div class="line">    log.debug(<span class="string">"create user QR code : &#123;&#125;"</span>, userScanCodeDTO);</div><div class="line">    <span class="keyword">return</span> Optional.of(userScanCodeDTO)</div><div class="line">        .map(usc -&gt; &#123;</div><div class="line">            BufferedImage bufferedImage = <span class="keyword">null</span>;</div><div class="line">            <span class="keyword">try</span> &#123;</div><div class="line">                bufferedImage = ZxingUtil.createQRCode(usc.getScanCode());</div><div class="line">            &#125; <span class="keyword">catch</span> (Exception e) &#123;</div><div class="line">                log.debug(e.getMessage());</div><div class="line">            &#125;</div><div class="line"></div><div class="line">            <span class="keyword">return</span> bufferedImage;</div><div class="line">        &#125;)</div><div class="line">        .map(bufferedImage -&gt; &#123;</div><div class="line">            ByteArrayOutputStream bs = <span class="keyword">new</span> ByteArrayOutputStream();</div><div class="line">            Image image = <span class="keyword">null</span>;</div><div class="line">            <span class="keyword">try</span> &#123;</div><div class="line">                ImageIO.write(bufferedImage, <span class="string">"png"</span>, bs);</div><div class="line">                 image = <span class="keyword">new</span> Image()</div><div class="line">                    .name(userScanCodeDTO.getScanCode())</div><div class="line">                    .image(bs.toByteArray())</div><div class="line">                    .imageContentType(<span class="string">"image/png"</span>);</div><div class="line">                bs.close();</div><div class="line">            &#125; <span class="keyword">catch</span> (IOException e) &#123;</div><div class="line">                log.debug(e.getMessage());</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">return</span> image;</div><div class="line">        &#125;);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<hr>
<p><strong>Ref:</strong></p>
<ol>
<li><a href="https://zxing.github.io/zxing/apidocs" target="_blank" rel="external">ZXing 3.3.0 API</a></li>
</ol>
]]></content>
    
    <summary type="html">
    
      &lt;ul&gt;
&lt;li&gt;&lt;h4 id=&quot;QR-Code-Generator&quot;&gt;&lt;a href=&quot;#QR-Code-Generator&quot; class=&quot;headerlink&quot; title=&quot;QR Code Generator&quot;&gt;&lt;/a&gt;&lt;strong&gt;QR Code Generator&lt;/strong&gt;&lt;/h4&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Utilize google QR code generator …&lt;br&gt;Define the &lt;code&gt;charset&lt;/code&gt;, &lt;code&gt;format&lt;/code&gt;, and &lt;code&gt;size&lt;/code&gt;.&lt;br&gt;Use &lt;code&gt;MatrixToImageWriter&lt;/code&gt; to write a &lt;code&gt;BitMatrix&lt;/code&gt; to &lt;code&gt;BufferedImage&lt;/code&gt;, file or stream. &lt;/p&gt;
    
    </summary>
    
      <category term="Java" scheme="http://volcanohong.github.com/categories/Java/"/>
    
    
      <category term="java" scheme="http://volcanohong.github.com/tags/java/"/>
    
      <category term="coding" scheme="http://volcanohong.github.com/tags/coding/"/>
    
      <category term="qrcode" scheme="http://volcanohong.github.com/tags/qrcode/"/>
    
  </entry>
  
  <entry>
    <title>Java8 notes I</title>
    <link href="http://volcanohong.github.com/2016/10/06/java8-notes-1/"/>
    <id>http://volcanohong.github.com/2016/10/06/java8-notes-1/</id>
    <published>2016-10-07T03:22:12.000Z</published>
    <updated>2016-11-06T02:51:35.000Z</updated>
    
    <content type="html"><![CDATA[<ul>
<li><h4 id="javautiloptional"><a href="#java-util-Optional" class="headerlink" title="java.util.Optional"></a><strong>java.util.Optional<t></t></strong></h4>Imagine <code>Optional</code> as a container that may or may not contain some value. Just like all references in Java can point to some object or be null, <code>Option</code> may enclose some (non-null!) reference or be empty.</li>
</ul>
<p><code>Optional</code> instead of plain null is statically checked at compile time and much more informative as it clearly indicates that a given variable may be present or not. Of course it requires some discipline - you should never assign null to any variable any more.<br><a id="more"></a></p>
<p>There are few ways of creating <code>Optional</code>:<br><figure class="highlight java"><table><tr><td class="code"><pre><div class="line">\\Optional must contain not <span class="keyword">null</span> value and will <span class="keyword">throw</span> an exception <span class="keyword">if</span> <span class="keyword">null</span> is passed. </div><div class="line">opt = Optional.of(notNull);</div><div class="line"></div><div class="line">\\ofNullable() <span class="function">will either return empty or <span class="title">present</span> <span class="params">(set)</span> Optional.</span></div><div class="line">opt = Optional.ofNullable(mayBeNull);</div><div class="line"></div><div class="line">\\empty() always <span class="keyword">return</span> empty Optional, corresponding to <span class="keyword">null</span>. It’s a singleton because Optional&lt;T&gt; is immutable.</div><div class="line">opt = Optional.empty();</div></pre></td></tr></table></figure></p>
<p>In this case, <code>opt</code> is never null, but may or may not contain some value (present or empty).</p>
<ul>
<li><h5 id="ifpresent-do-something-when-optional-is-set"><a href="#ifPresent-do-something-when-Optional-is-set" class="headerlink" title="ifPresent() - do something when Optional is set"></a><strong>ifPresent()</strong> - <em>do something when Optional is set</em></h5></li>
</ul>
<p>Tedious if statement:<br><figure class="highlight java"><table><tr><td class="code"><pre><div class="line"><span class="keyword">if</span> (x != <span class="keyword">null</span>) &#123;</div><div class="line">    print(x);</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>can be replaced with higher-order function <code>ifPresent()</code>:<br><figure class="highlight java"><table><tr><td class="code"><pre><div class="line">opt.ifPresent(x -&gt; print(x));</div><div class="line">opt.ifPresent(<span class="keyword">this</span>::print);</div></pre></td></tr></table></figure></p>
<p>The latter syntax (method reference) can be used when <code>lambda</code> argument (String x) matches function formal parameters.</p>
<ul>
<li><h5 id="filter-reject-filter-out-certain-optional-values"><a href="#filter-reject-filter-out-certain-Optional-values" class="headerlink" title="filter() - reject (filter out) certain Optional values"></a><strong>filter()</strong> - <em>reject (filter out) certain Optional values</em></h5></li>
</ul>
<p>Sometimes you want to perform some action not only when a reference is set but also when it meets certain condition:<br><figure class="highlight java"><table><tr><td class="code"><pre><div class="line"><span class="keyword">if</span> (x != <span class="keyword">null</span> &amp;&amp; x.contains(<span class="string">"ab"</span>)) &#123;</div><div class="line">    print(x);</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>This can be replaced with <code>Optional.filter()</code> that turns present (set) Optional to empty Optional if underlying value does not meet given predicate. If input Optional was empty, it is returned as-is:<br><figure class="highlight java"><table><tr><td class="code"><pre><div class="line">opt.</div><div class="line">   filter(x -&gt; x.contains(<span class="string">"ab"</span>)).</div><div class="line">   ifPresent(<span class="keyword">this</span>::print);</div><div class="line">```   </div><div class="line">This is equivalent to more imperative:</div><div class="line">```<span class="function">java</span></div><div class="line"><span class="title">if</span><span class="params">(opt.isPresent()</span> &amp;&amp; opt.<span class="title">get</span><span class="params">()</span>.<span class="title">contains</span><span class="params">(<span class="string">"ab"</span>)</span>) &#123;</div><div class="line">    print(opt.get());</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<ul>
<li><h5 id="map-transform-value-if-present"><a href="#map-transform-value-if-present" class="headerlink" title="map() - transform value if present"></a><strong>map()</strong> - <em>transform value if present</em></h5></li>
</ul>
<p>Very often you need to apply some transformation on a value, but only if it’s not null (avoiding <code>NullPointerException</code>):</p>
<figure class="highlight java"><table><tr><td class="code"><pre><div class="line"><span class="keyword">if</span> (x != <span class="keyword">null</span>) &#123;</div><div class="line">    String t = x.trim();</div><div class="line">    <span class="keyword">if</span> (t.length() &gt; <span class="number">1</span>) &#123;</div><div class="line">        print(t);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>This can be done in much more declarative way using <code>map()</code>:<br><figure class="highlight java"><table><tr><td class="code"><pre><div class="line">opt.</div><div class="line">    map(String::trim).</div><div class="line">    filter(t -&gt; t.length() &gt; <span class="number">1</span>).</div><div class="line">    ifPresent(<span class="keyword">this</span>::print);</div></pre></td></tr></table></figure></p>
<p>This becomes tricky. <code>Optional.map()</code> applies given function on a value inside Optional - but only if Optional is present. Otherwise nothing happens and <code>empty()</code> is returned. Remember that the transformation is type-safe - look at generics here:<br><figure class="highlight java"><table><tr><td class="code"><pre><div class="line">Optional&lt;String&gt;  opt = <span class="comment">//...</span></div><div class="line">Optional&lt;Integer&gt; len = opt.map(String::length);</div></pre></td></tr></table></figure></p>
<p>If <code>Optional&lt;String&gt;</code> is present. <code>Optional&lt;Integer&gt;</code> len is present as well, wrapping length of a String. But if <code>opt</code> was empty, <code>map()</code> over it does nothing except changing generic type.</p>
<ul>
<li><h5 id="orelseorelseget-turning-empty-optionallttgt-to-default-t"><a href="#orElse-orElseGet-turning-empty-Optional-lt-T-gt-to-default-T" class="headerlink" title="orElse()/orElseGet() - turning empty Optional&lt;T&gt; to default T"></a><strong>orElse()/orElseGet()</strong> - <em>turning empty <code>Optional&lt;T&gt;</code> to default <code>T</code></em></h5></li>
</ul>
<p>At some point you may wish to unwrap <code>Optional</code> and get a hold of real value inside. But you can’t do this if <code>Optional</code> is empty. Here is a pre-Java 8 way of handling such scenario:<br><figure class="highlight java"><table><tr><td class="code"><pre><div class="line"><span class="keyword">int</span> len = (x != <span class="keyword">null</span>)? x.length() : -<span class="number">1</span>;</div></pre></td></tr></table></figure></p>
<p>With <code>Optional</code> we can say:<br><figure class="highlight java"><table><tr><td class="code"><pre><div class="line"><span class="keyword">int</span> len = opt.map(String::length).orElse(-<span class="number">1</span>);</div></pre></td></tr></table></figure></p>
<p>There is also a version that accepts <code>Supplier&lt;T&gt;</code> if computing default value is slow, expensive or has side-effects:<br><figure class="highlight java"><table><tr><td class="code"><pre><div class="line"><span class="keyword">int</span> len = opt.</div><div class="line">    map(String::length).</div><div class="line">    orElseGet(() -&gt; slowDefault());     </div><div class="line"><span class="comment">//orElseGet(this::slowDefault)</span></div></pre></td></tr></table></figure></p>
<ul>
<li><h5 id="orelsethrow-lazily-throw-exceptions-on-empty-optional"><a href="#orElseThrow-lazily-throw-exceptions-on-empty-Optional" class="headerlink" title="orElseThrow() - lazily throw exceptions on empty Optional"></a><strong>orElseThrow()</strong> - <em>lazily throw exceptions on empty <code>Optional</code></em></h5></li>
</ul>
<p>Often we would like to throw an exception if value is not available:<br><figure class="highlight java"><table><tr><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">char</span> <span class="title">firstChar</span><span class="params">(String s)</span> </span>&#123;</div><div class="line">    <span class="keyword">if</span> (s != <span class="keyword">null</span> &amp;&amp; !s.isEmpty())</div><div class="line">        <span class="keyword">return</span> s.charAt(<span class="number">0</span>);</div><div class="line">    <span class="keyword">else</span></div><div class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException();</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>This whole method can be replaced with the following idiom:<br><figure class="highlight"><table><tr><td class="code"><pre><div class="line">opt.</div><div class="line">    filter(s -&gt; !s.isEmpty()).</div><div class="line">    map(s -&gt; s.charAt(0)).</div><div class="line">    orElseThrow(IllegalArgumentException::new);</div><div class="line">```    </div><div class="line">We don’t want to create an instance of exception in advance because creating an exception has _significant cost_.</div><div class="line"></div><div class="line">* ##### **flatMap()** - _mapping over a function that returns `Optional`_</div><div class="line"></div><div class="line">Imagine you have a function that does not accept null but may produce one:</div><div class="line">```java</div><div class="line">public String findSimilar(@NotNull String s) //...</div></pre></td></tr></table></figure></p>
<p>Using it is a bit cumbersome:<br><figure class="highlight java"><table><tr><td class="code"><pre><div class="line">String similarOrNull = x != <span class="keyword">null</span>? findSimilar(x) : <span class="keyword">null</span>;</div></pre></td></tr></table></figure></p>
<p>With Optional it is a bit more straighforward:<br><figure class="highlight java"><table><tr><td class="code"><pre><div class="line">Optional&lt;String&gt; similar = opt.map(<span class="keyword">this</span>::findSimilar);</div></pre></td></tr></table></figure></p>
<p>If the function we map() over returns null, the result of map() is an empty Optional. Otherwise it’s the result of said function wrapped with (present) Optional. So far so good but why do we return nullable value if we have Optional?<br><figure class="highlight java"><table><tr><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> Optional&lt;String&gt; <span class="title">tryFindSimilar</span><span class="params">(String s)</span>  <span class="comment">//...</span></span></div></pre></td></tr></table></figure></p>
<p>Our intentions are clear but using map() fails to produce correct type. Instead we must use flatMap():<br><figure class="highlight java"><table><tr><td class="code"><pre><div class="line">Optional&lt;Optional&lt;String&gt;&gt; bad = opt.map(<span class="keyword">this</span>::tryFindSimilar);</div><div class="line">Optional&lt;String&gt; similar =       opt.flatMap(<span class="keyword">this</span>::tryFindSimilar);</div></pre></td></tr></table></figure></p>
<p>Do you see double <code>Optional&lt;Optional&lt;...&gt;&gt;</code>? Definitely not what we want. If you are mapping over a function that returns Optional, use flatMap instead. Here is a simplified implementation of this function:<br><figure class="highlight java"><table><tr><td class="code"><pre><div class="line"><span class="keyword">public</span> &lt;U&gt; <span class="function">Optional&lt;U&gt; <span class="title">flatMap</span><span class="params">(Function&lt;T, Optional&lt;U&gt;&gt; mapper)</span> </span>&#123;</div><div class="line">    <span class="keyword">if</span> (!isPresent())</div><div class="line">        <span class="keyword">return</span> empty();</div><div class="line">    <span class="keyword">else</span> &#123;</div><div class="line">        <span class="keyword">return</span> mapper.apply(value);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>Bigger example</p>
<p>Imagine we have a Person with an Address that has a validFrom date. All of these can be null. We would like to know whether validFrom is set and in the past:<br><figure class="highlight java"><table><tr><td class="code"><pre><div class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">boolean</span> <span class="title">validAddress</span><span class="params">(NullPerson person)</span> </span>&#123;</div><div class="line">    <span class="keyword">if</span> (person != <span class="keyword">null</span>) &#123;</div><div class="line">        <span class="keyword">if</span> (person.getAddress() != <span class="keyword">null</span>) &#123;</div><div class="line">            <span class="keyword">final</span> Instant validFrom = person.getAddress().getValidFrom();</div><div class="line">            <span class="keyword">return</span> validFrom != <span class="keyword">null</span> &amp;&amp; validFrom.isBefore(now());</div><div class="line">        &#125; <span class="keyword">else</span></div><div class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">    &#125; <span class="keyword">else</span></div><div class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>Quite ugly and defensive. Alternatively but still ugly:<br><figure class="highlight java"><table><tr><td class="code"><pre><div class="line"><span class="keyword">return</span> person != <span class="keyword">null</span> &amp;&amp;</div><div class="line">       person.getAddress() != <span class="keyword">null</span> &amp;&amp;</div><div class="line">       person.getAddress().getValidFrom() != <span class="keyword">null</span> &amp;&amp;       person.getAddress().getValidFrom().isBefore(now());</div></pre></td></tr></table></figure></p>
<p>Now imagine all of these (person, getAddress(), getValidFrom()) are Optionals of appropriate types, clearly indicating they may not be set:<br><figure class="highlight java"><table><tr><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</div><div class="line"> </div><div class="line">    <span class="keyword">private</span> <span class="keyword">final</span> Optional&lt;Address&gt; address;</div><div class="line"> </div><div class="line">    <span class="function"><span class="keyword">public</span> Optional&lt;Address&gt; <span class="title">getAddress</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> address;</div><div class="line">    &#125;</div><div class="line"> </div><div class="line">    <span class="comment">//...</span></div><div class="line">&#125;</div><div class="line"> </div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Address</span> </span>&#123;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">final</span> Optional&lt;Instant&gt; validFrom;</div><div class="line"> </div><div class="line">    <span class="function"><span class="keyword">public</span> Optional&lt;Instant&gt; <span class="title">getValidFrom</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> validFrom;</div><div class="line">    &#125;</div><div class="line"> </div><div class="line">    <span class="comment">//...</span></div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>Suddenly the computation is much more streamlined:<br><figure class="highlight"><table><tr><td class="code"><pre><div class="line">return person.</div><div class="line">        flatMap(Person::getAddress).</div><div class="line">        flatMap(Address::getValidFrom).</div><div class="line">        filter(x -&gt; x.before(now())).</div><div class="line">        isPresent();</div><div class="line">```        </div><div class="line">Is it more readable? Hard to tell. But at least it’s impossible to produce NullPointerException when Optional is used consistently.</div><div class="line"></div><div class="line">* ##### **Converting Optional&lt;T&gt; to List&lt;T&gt;**</div><div class="line"></div><div class="line">Thinking about Optional as a collection1 having either 0 or 1 elements, this may make understanding of map() and flatMap() easier. Unfortunately Optional doesn’t have toList() method, but it’s easy to implement one:</div><div class="line">```java</div><div class="line">public static &lt;T&gt; List&lt;T&gt; toList(Optional&lt;T&gt; option) &#123;</div><div class="line">    return option.</div><div class="line">            map(Collections::singletonList).</div><div class="line">            orElse(Collections.emptyList());</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>Or less idiomatically:<br><figure class="highlight java"><table><tr><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="keyword">static</span> &lt;T&gt; <span class="function">List&lt;T&gt; <span class="title">toList</span><span class="params">(Optional&lt;T&gt; option)</span> </span>&#123;</div><div class="line">    <span class="keyword">if</span> (option.isPresent())</div><div class="line">        <span class="keyword">return</span> Collections.singletonList(option.get());</div><div class="line">    <span class="keyword">else</span></div><div class="line">        <span class="keyword">return</span> Collections.emptyList();</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>But why limit ourselves to List<t>? What about Set<t> and other collections? Java 8 already abstracts creating arbitrary collection via Collectors API, introduced for Streams. The API is hideous but comprehensible:<br><figure class="highlight java"><table><tr><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="keyword">static</span> &lt;R, A, T&gt; <span class="function">R <span class="title">collect</span><span class="params">(Optional&lt;T&gt; option, Collector&lt;? <span class="keyword">super</span> T, A, R&gt; collector)</span> </span>&#123;</div><div class="line">    <span class="keyword">final</span> A container = collector.supplier().get();</div><div class="line">    option.ifPresent(v -&gt; collector.accumulator().accept(container, v));</div><div class="line">    <span class="keyword">return</span> collector.finisher().apply(container);</div><div class="line">&#125;</div></pre></td></tr></table></figure></t></t></p>
<p>We can now say:<br><figure class="highlight java"><table><tr><td class="code"><pre><div class="line"><span class="keyword">import</span> <span class="keyword">static</span> java.util.stream.Collectors.*;</div><div class="line"> </div><div class="line">List&lt;String&gt; list = collect(opt, toList());</div><div class="line">Set&lt;String&gt;  set  = collect(opt, toSet());</div></pre></td></tr></table></figure></p>
<p><strong>Ref:</strong> </p>
<ol>
<li><a href="http://www.nurkiewicz.com/2013/08/optional-in-java-8-cheat-sheet.html" target="_blank" rel="external">Optional in Java 8 cheat sheet</a></li>
</ol>
]]></content>
    
    <summary type="html">
    
      &lt;ul&gt;
&lt;li&gt;&lt;h4 id=&quot;java-util-Optional&quot;&gt;&lt;a href=&quot;#java-util-Optional&quot; class=&quot;headerlink&quot; title=&quot;java.util.Optional&quot;&gt;&lt;/a&gt;&lt;strong&gt;java.util.Optional&lt;T&gt;&lt;/strong&gt;&lt;/h4&gt;Imagine &lt;code&gt;Optional&lt;/code&gt; as a container that may or may not contain some value. Just like all references in Java can point to some object or be null, &lt;code&gt;Option&lt;/code&gt; may enclose some (non-null!) reference or be empty.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;code&gt;Optional&lt;/code&gt; instead of plain null is statically checked at compile time and much more informative as it clearly indicates that a given variable may be present or not. Of course it requires some discipline - you should never assign null to any variable any more.&lt;br&gt;
    
    </summary>
    
      <category term="Java" scheme="http://volcanohong.github.com/categories/Java/"/>
    
    
      <category term="java" scheme="http://volcanohong.github.com/tags/java/"/>
    
      <category term="coding" scheme="http://volcanohong.github.com/tags/coding/"/>
    
  </entry>
  
  <entry>
    <title>Angular2 Notes I</title>
    <link href="http://volcanohong.github.com/2016/10/01/angular2-notes-1/"/>
    <id>http://volcanohong.github.com/2016/10/01/angular2-notes-1/</id>
    <published>2016-10-01T17:39:45.000Z</published>
    <updated>2017-03-12T04:35:30.000Z</updated>
    
    <content type="html"><![CDATA[<ul>
<li><h2 id="angular-2-basic"><a href="#Angular-2-Basic" class="headerlink" title="Angular 2 Basic"></a><strong>Angular 2 Basic</strong></h2></li>
</ul>
<p>The heart of angular 2 is <code>containers</code>.</p>
<p>import from <code>angular/core</code><br><figure class="highlight js"><table><tr><td class="code"><pre><div class="line"><span class="keyword">import</span> &#123; </div><div class="line">    Component, </div><div class="line">    Input,</div><div class="line">    Output,</div><div class="line">    EventEmitter &#125; <span class="keyword">from</span> <span class="string">'@angular/core'</span>;</div></pre></td></tr></table></figure></p>
<a id="more"></a>
<ul>
<li><h3 id="syntax"><a href="#Syntax" class="headerlink" title="Syntax"></a><strong>Syntax</strong></h3></li>
</ul>
<ul>
<li>Annotations<br>The @ is an annotation and it comes from TypeScript</li>
<li>Component<br>Components teach your browser new tags</li>
<li>Template<br>Views can be defined by the template option</li>
<li><p>Multi-line Strings<br>Using ` backticks allows for easy inline templates</p>
<figure class="highlight html"><table><tr><td class="code"><pre><div class="line">@Component(&#123;</div><div class="line">    selector: 'main-container',</div><div class="line">    template: `</div><div class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">main</span> <span class="attr">class</span>=<span class="string">"main"</span>&gt;</span></div><div class="line">            main content will go here</div><div class="line">        <span class="tag">&lt;/<span class="name">main</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">    `</div><div class="line">&#125;)</div></pre></td></tr></table></figure>
</li>
<li><p>Class Syntax<br>TypeScript allows you to define classes using the class syntax</p>
</li>
<li><p>Events<br>One-way data binding means we fire events instead of modifying data directly</p>
<figure class="highlight js"><table><tr><td class="code"><pre><div class="line"><span class="keyword">export</span> <span class="class"><span class="keyword">class</span> <span class="title">NoteCard</span> </span>&#123;</div><div class="line">    @Input() note = &#123;&#125;;</div><div class="line">    @Output() checked = <span class="keyword">new</span> EventEmitter();</div><div class="line"></div><div class="line">    showCheck: boolean = <span class="literal">false</span>;</div><div class="line">    </div><div class="line">    toggle() &#123;</div><div class="line">        <span class="keyword">this</span>.showCheck = ! <span class="keyword">this</span>.showCheck;</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    onChecked() &#123;</div><div class="line">        <span class="keyword">this</span>.checked.next(<span class="keyword">this</span>.note);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
<li><p>Brackets for Parameters<br>Use [] brackets on an attribute to pass parameters to the directive</p>
</li>
<li>Star Syntax<br>Use the * on an attribute to use a directive on this element</li>
<li><p>Parenthesis for View Actions<br>Use () parenthesis to specify action bindings</p>
<figure class="highlight html"><table><tr><td class="code"><pre><div class="line">@Component(&#123;</div><div class="line">    selector: 'note-card',</div><div class="line">    template: `</div><div class="line">        <span class="tag">&lt;<span class="name">div</span> </span></div><div class="line">            [<span class="attr">ngStyle</span>] = <span class="string">"&#123;'background-color': note.color&#125;"</span></div><div class="line">            <span class="attr">class</span>=<span class="string">"note-card row shadow-1"</span></div><div class="line">            (<span class="attr">mouseenter</span>) = <span class="string">"toggle()"</span></div><div class="line">            (<span class="attr">mouseleave</span>) = <span class="string">"toggle()"</span></div><div class="line">            &gt;</div><div class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"icon"</span> *<span class="attr">ngIf</span>=<span class="string">"showCheck"</span> (<span class="attr">click</span>)=<span class="string">"onChecked()"</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">"material-icons"</span>&gt;</span>check<span class="tag">&lt;/<span class="name">i</span>&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"col-xs-12 title"</span>&gt;</span></div><div class="line">            &#123;&#123; note.title &#125;&#125;</div><div class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"col-xs-12 value"</span>&gt;</span></div><div class="line">            &#123;&#123; note.value &#125;&#125;</div><div class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">    `,</div><div class="line">    style:[``]</div><div class="line">&#125;)</div></pre></td></tr></table></figure>
</li>
<li><p>Strong Typing<br>TypeScript lets us define collections that contain our custom type Product</p>
</li>
<li>Component Definition Class<br>We define new Components with a class</li>
</ul>
<ul>
<li><h3 id="some-syntax-instances"><a href="#Some-Syntax-Instances" class="headerlink" title="Some Syntax Instances"></a><strong>Some Syntax Instances</strong></h3></li>
<li><h4 id="using-to-call-directives"><a href="#Using-to-call-directives" class="headerlink" title="Using * to call directives"></a><strong>Using <code>*</code> to call directives</strong></h4></li>
</ul>
<ul>
<li><code>ngIf</code><br>If the expression is evaluated to be a true, the <code>NgIf</code> shows the elements, otherwise it removes the element from DOM.</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">div</span> *<span class="attr">ngIf</span>=<span class="string">"showMe"</span>&gt;</span></div></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><div class="line">export <span class="class"><span class="keyword">class</span> <span class="title">Angular2NgIf</span> </span>&#123;</div><div class="line">    showMe:<span class="keyword">boolean</span> = <span class="keyword">true</span>; </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li><code>ngFor</code><br>NgFor directive repeats the part of a template for each item in an array.</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">note-card</span> *<span class="attr">ngFor</span> = <span class="string">"let note of notes; let i = index"</span> /&gt;</span></div></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><div class="line">export <span class="class"><span class="keyword">class</span> <span class="title">Notes</span> </span>&#123;</div><div class="line">    notes = [</div><div class="line">        &#123;title: <span class="string">''</span>, value: <span class="string">''</span>&#125;,</div><div class="line">        &#123;title: <span class="string">''</span>, value: <span class="string">''</span>&#125;,</div><div class="line">        <span class="comment">//...</span></div><div class="line">    ];</div></pre></td></tr></table></figure>
<ul>
<li><h4 id="using-to-pass-parameter-to-directives"><a href="#Using-to-pass-parameter-to-directives" class="headerlink" title="Using [] to pass parameter to directives"></a><strong>Using <code>[]</code> to pass parameter to directives</strong></h4></li>
</ul>
<ul>
<li><code>ngStyle</code></li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">div</span> [<span class="attr">ngStyle</span>] = <span class="string">"&#123;'background-color': note.color&#125;"</span> /&gt;</span></div></pre></td></tr></table></figure>
<ul>
<li><code>ngModel</code></li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">input</span></span></div><div class="line">    <span class="attr">type</span>=<span class="string">"text"</span></div><div class="line">    [(<span class="attr">ngModel</span>)]=<span class="string">"newNote.title"</span></div><div class="line">    <span class="attr">name</span>=<span class="string">"newNoteTitle"</span></div><div class="line">    <span class="attr">...</span></div><div class="line">/&gt;</div></pre></td></tr></table></figure>
<p>equals to:</p>
<figure class="highlight html"><table><tr><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">input</span></span></div><div class="line">    <span class="attr">type</span>=<span class="string">"text"</span></div><div class="line">    [<span class="attr">ngModel</span>]=<span class="string">"newNote.title"</span></div><div class="line">    (<span class="attr">ngModelChange</span>) = <span class="string">"newNote.titel = $event"</span></div><div class="line">    <span class="attr">name</span>=<span class="string">"newNoteTitle"</span></div><div class="line">    <span class="attr">...</span></div><div class="line">/&gt;</div></pre></td></tr></table></figure>
<ul>
<li><h4 id="using-to-specify-action-bindings"><a href="#Using-to-specify-action-bindings" class="headerlink" title="Using () to specify action bindings"></a><strong>Using <code>()</code> to specify action bindings</strong></h4></li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">note-card</span> (<span class="attr">checked</span>)=<span class="string">"onNoteChecked($event, i)"</span> /&gt;</span></div></pre></td></tr></table></figure>
<ul>
<li><h3 id="inputoutput"><a href="#Input-Output" class="headerlink" title="Input/Output"></a><strong>Input/Output</strong></h3></li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><div class="line"><span class="keyword">import</span> &#123; </div><div class="line">    Component, </div><div class="line">    Input,</div><div class="line">    Output,</div><div class="line">    EventEmitter &#125; <span class="keyword">from</span> <span class="string">'@angular/core'</span>;</div><div class="line"></div><div class="line"><span class="comment">// in template:    </span></div><div class="line">&lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">"icon"</span> (click)=<span class="string">"onChecked()"</span>&gt;    </div><div class="line">    </div><div class="line"><span class="keyword">export</span> <span class="class"><span class="keyword">class</span> <span class="title">NoteCard</span> </span>&#123;</div><div class="line">    @Input() note = &#123;&#125;;</div><div class="line">    @Output() checked = <span class="keyword">new</span> EventEmitter();  </div><div class="line">    onChecked() &#123;</div><div class="line">        <span class="keyword">this</span>.checked.next(<span class="keyword">this</span>.note);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><code>$event</code> can be used as Rx parameter, e.g., the <code>color</code> object is passing in.<br><figure class="highlight html"><table><tr><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"col-xs-3"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">color-picker</span> </span></div><div class="line">        (<span class="attr">selectedInput</span>)=<span class="string">"onColorSelected($event)"</span></div><div class="line">        [<span class="attr">colors</span>]=<span class="string">"colors"</span>&gt;</div><div class="line">    <span class="tag">&lt;/<span class="name">color-picker</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div></pre></td></tr></table></figure></p>
<p>with function …<br><figure class="highlight java"><table><tr><td class="code"><pre><div class="line">onColorSelected(color: string) &#123;</div><div class="line">    <span class="keyword">this</span>.newNote.color = color;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<ul>
<li><h3 id="basic-routing"><a href="#Basic-Routing" class="headerlink" title="Basic Routing"></a><strong>Basic Routing</strong></h3></li>
</ul>
<p>Three main components configure routing</p>
<ul>
<li><strong>Routes</strong> describes the application’s routes</li>
<li><strong>RouterOutlet</strong> is a “placeholder” component that gets expanded to each route’s content</li>
<li><strong>RouterLink</strong> is used to link to routes</li>
</ul>
<p><em>Routes</em><br><figure class="highlight js"><table><tr><td class="code"><pre><div class="line"><span class="keyword">import</span> &#123; Routes &#125; <span class="keyword">from</span> <span class="string">'@angular/router'</span>;</div><div class="line"><span class="keyword">import</span> &#123; Main, Notes, About&#125; <span class="keyword">from</span> <span class="string">'../containers'</span>; </div><div class="line"></div><div class="line"><span class="keyword">export</span> <span class="keyword">const</span> routes: Routes = [</div><div class="line">    <span class="comment">// &#123; path: '', redirectTo: 'home', pathMatch: 'full' &#125;,</span></div><div class="line">    &#123; <span class="attr">path</span>: <span class="string">''</span>, <span class="attr">component</span>: Main,</div><div class="line">        <span class="attr">children</span>: [</div><div class="line">            &#123; <span class="attr">path</span>: <span class="string">''</span>, <span class="attr">component</span>: Notes&#125;,</div><div class="line">            &#123; <span class="attr">path</span>: <span class="string">'about'</span>,  <span class="attr">component</span>: About &#125;</div><div class="line">        ]</div><div class="line">    &#125;</div><div class="line">]</div></pre></td></tr></table></figure></p>
<p><em>RouterOutlet</em><br><figure class="highlight js"><table><tr><td class="code"><pre><div class="line">@Component(&#123;</div><div class="line">    <span class="attr">selector</span>: <span class="string">'main-container'</span>,</div><div class="line">    <span class="attr">template</span>: <span class="string">`</span></div><div class="line">    &lt;div&gt;</div><div class="line">        &lt;router-outlet&gt;&lt;/router-outlet&gt;</div><div class="line">    &lt;/div&gt;</div><div class="line">    `</div><div class="line">&#125;)</div></pre></td></tr></table></figure></p>
<p><em> RouterLink</em><br><figure class="highlight js"><table><tr><td class="code"><pre><div class="line"><span class="keyword">import</span> &#123; RouterLink &#125; <span class="keyword">from</span> <span class="string">'@angular/router'</span></div><div class="line"></div><div class="line">@Component(&#123;</div><div class="line">    <span class="attr">selector</span>: <span class="string">'app-bar'</span>,</div><div class="line">    <span class="attr">template</span>: <span class="string">`</span></div><div class="line">        &lt;header class="app-bar row middle-xs"&gt;</div><div class="line">        &lt;span [routerLink]="['']" class="logo col-xs-10"&gt;</div><div class="line">            Home</div><div class="line">        &lt;/span&gt;</div><div class="line">        &lt;nav class="col-xs-2"&gt;</div><div class="line">            &lt;div class="row middle-xs between-xs"&gt;</div><div class="line">                &lt;span [routerLink]="['', 'about']"  class="link"&gt;About&lt;/span&gt;</div><div class="line">            &lt;/div&gt;</div><div class="line">        &lt;/nav&gt;</div><div class="line">        &lt;/header&gt;</div><div class="line">    `,</div><div class="line">    <span class="comment">//...</span></div><div class="line">&#125;)</div></pre></td></tr></table></figure></p>
<hr>
<p><strong>Ref:</strong> </p>
<ol>
<li><a href="https://angular.io/docs" target="_blank" rel="external">angular docs.</a></li>
<li><a href="www.ng-book.com/2/">ng-book</a></li>
<li><a href="http://blog.ng-book.com/basic-routing-in-angular-2/" target="_blank" rel="external">basic routing in angular 2</a>    </li>
</ol>
]]></content>
    
    <summary type="html">
    
      &lt;ul&gt;
&lt;li&gt;&lt;h2 id=&quot;Angular-2-Basic&quot;&gt;&lt;a href=&quot;#Angular-2-Basic&quot; class=&quot;headerlink&quot; title=&quot;Angular 2 Basic&quot;&gt;&lt;/a&gt;&lt;strong&gt;Angular 2 Basic&lt;/strong&gt;&lt;/h2&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The heart of angular 2 is &lt;code&gt;containers&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;import from &lt;code&gt;angular/core&lt;/code&gt;&lt;br&gt;&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; &amp;#123; &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    Component, &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    Input,&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    Output,&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    EventEmitter &amp;#125; &lt;span class=&quot;keyword&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&#39;@angular/core&#39;&lt;/span&gt;;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="Javascript" scheme="http://volcanohong.github.com/categories/Javascript/"/>
    
    
      <category term="angular2" scheme="http://volcanohong.github.com/tags/angular2/"/>
    
      <category term="javascript" scheme="http://volcanohong.github.com/tags/javascript/"/>
    
      <category term="html" scheme="http://volcanohong.github.com/tags/html/"/>
    
      <category term="coding" scheme="http://volcanohong.github.com/tags/coding/"/>
    
  </entry>
  
  <entry>
    <title>SQL notes I</title>
    <link href="http://volcanohong.github.com/2016/09/12/sql-notes-1/"/>
    <id>http://volcanohong.github.com/2016/09/12/sql-notes-1/</id>
    <published>2016-09-13T04:00:00.000Z</published>
    <updated>2016-10-01T17:37:50.000Z</updated>
    
    <content type="html"><![CDATA[<ul>
<li><h4 id="design-a-table-with-a-primary-key-of-varchar-or-int"><a href="#Design-a-table-with-a-primary-key-of-varchar-or-int" class="headerlink" title="Design a table with a primary key of varchar or int?"></a><strong>Design a table with a primary key of varchar or int?</strong></h4></li>
</ul>
<ul>
<li>In gereral, <code>VARCHAR</code> or <code>INT</code> has no big differency in query. What matter is the access pattern.</li>
</ul>
<p><strong>Narrowness:</strong><br>On absolute terms, a wider key will always be worse than a narrow key. The type carries no importance, is the width of the key that matters. When compared with INT though, few types can beat INT in narrowness, so INT usually wins that argument just by the fact that it is only 4 bytes wide.</p>
<p>More on this aspect:<br>In most cases, The Primary Key (PK) is defined as INT NOT NULL IDENTITY(1,1) field in each table.<br>On one side, with an IDENTITY field, the database handles all the details of making sure it’s really unique, and the INT datatype is just 4 bytes, and fixed, so it’s easier and more suited to be used for the primary (and clustering) key in the table.<br>On the other side, using a VARCHAR(10) or (20) just uses up too much space - 10 or 20 bytes instead of 4.</p>
<ul>
<li>Another fact is when choosing the PK usually one also selects the clustered key. Those two are often confused. By default, SQL server chooses PK as one of clustering indexes.</li>
</ul>
<a id="more"></a>
<p><strong>Clustering Index:</strong><br>The idea of clustered indexes is to store a complete table in a B-tree structure. If a table has a clustered index, it basically means the index is the table. A clustered index has a strict row order like any other B-tree index: it sorts the rows according to the index definition.</p>
<p><em>Pros</em><br>The upside of clustered indexes is that they can deliver subsequent rows quickly when accessed directly (not via a non-clustered index). In other words, they are fast if you use the clustering key to fetch several rows. Remember that the primary key is the clustering key per default. In that case, it means fetching several rows via primary key—with a single query.</p>
<p><em>Cons</em><br>How bad is the cluster index in query?</p>
<p>Rows Fetched | Time (Heap) | Time (Clustered)</p>
<p>10.000 | 31 | 78</p>
<p>20.000 | 47 |130</p>
<p>50.000 | 109 |297</p>
<p>100.000 | 203 | 624</p>
<p>200.000 | 390 | 1232</p>
<p>Ref: <a href="https://use-the-index-luke.com/blog/2014-01/unreasonable-defaults-primary-key-clustering-key" target="_blank" rel="external">Unreasonable Defaults: Primary Key as Clustering Key</a></p>
<p>The clustering key value will be repeated on every single index entry on every single non-clustered index on the table, so potentially, it is wasting a lot of space (not just on disk - that’s cheap - but also in SQL Server’s main memory). Also, since it’s variable (might be 4, might be 20 chars) it’s harder to SQL server to properly maintain a good index structure.</p>
<p><strong>Conclusion</strong>, it is always the right choice to start with INT NOT NULL IDENTITY(1,1)as the PK. However if considering VARCHAR type PK, it is better to avoid to use it as one of the clustering indexes.</p>
<ul>
<li><h4 id="description-of-primary-keys-and-clustered-keys"><a href="#Description-of-primary-keys-and-clustered-keys" class="headerlink" title="Description of primary keys and clustered keys"></a><strong>Description of primary keys and clustered keys</strong></h4></li>
</ul>
<p><strong>Primary keys</strong> are logical business elements. The primary key is used by your application to identify an entity, and the discussion about primary keys is largely wether to use natural keys or surrogate key. The links go into much more detail, but the basic idea is that natural keys are derived from an existing entity property like ssn or phone number, while surrogate keys have no meaning whatsoever with regard to the business entity, like id or rowid and they are usually of type IDENTITY or some sort of uuid. My personal opinion is that surrogate keys are superior to natural keys, and the choice should be always identity values for local only applicaitons, guids for any sort of distributed data. A primary key never changes during the lifetime of the entity.</p>
<p><strong>Clustered keys</strong> are the key that defines the physical storage of rows in the table. Most times they overlap with the primary key (the logical entity identifier), but that is not actually enforced nor required. When the two are different it means there is a non-clustered unique index on the table that implements the primary key. Clustered key values can actualy change during the lifetime of the row, resulting in the row being physically moved in the table to a new location. If you have to separate the primary key from the clustered key (and sometimes you do), choosing a good clustered key is significantly harder than choosing a primary key.</p>
<ul>
<li><h4 id="sql-scripts-to-set-non-cluster-index"><a href="#SQL-scripts-to-set-non-cluster-index" class="headerlink" title="SQL scripts to set non-cluster index"></a><strong>SQL scripts to set non-cluster index</strong></h4></li>
</ul>
<figure class="highlight sql"><table><tr><td class="code"><pre><div class="line"><span class="comment">-- Enforces the Primary Key constraint with a Unique Non-Clustered Index</span></div><div class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> Foo1</div><div class="line">(</div><div class="line">Col1 <span class="built_in">INT</span> <span class="keyword">NOT</span> <span class="literal">NULL</span> PRIMARY <span class="keyword">KEY</span> NONCLUSTERED,</div><div class="line">Col2 <span class="built_in">INT</span> <span class="keyword">NOT</span> <span class="literal">NULL</span>,</div><div class="line">Col3 <span class="built_in">INT</span> <span class="keyword">NOT</span> <span class="literal">NULL</span></div><div class="line">)</div><div class="line"><span class="keyword">GO</span></div></pre></td></tr></table></figure>
<p>A table without clustered index uses Heap structure to query data.</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><div class="line"><span class="comment">-- Create the Primary Key constraint on an ever-increasing</span></div><div class="line"><span class="comment">-- key column</span></div><div class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> Foo2</div><div class="line">(</div><div class="line">Col1 <span class="built_in">INT</span> <span class="keyword">NOT</span> <span class="literal">NULL</span> PRIMARY <span class="keyword">KEY</span> NONCLUSTERED,</div><div class="line">Col2 UNIQUEIDENTIFIER <span class="keyword">NOT</span> <span class="literal">NULL</span>,</div><div class="line">Col3 <span class="built_in">INT</span> <span class="keyword">NOT</span> <span class="literal">NULL</span></div><div class="line">)</div><div class="line"><span class="keyword">GO</span></div><div class="line"></div><div class="line"><span class="comment">-- Create the Clustered Index on a random key column</span></div><div class="line"><span class="keyword">CREATE</span> <span class="keyword">UNIQUE</span> CLUSTERED <span class="keyword">INDEX</span> ci_Col2 <span class="keyword">ON</span> Foo2(Col2)</div><div class="line"><span class="keyword">GO</span></div></pre></td></tr></table></figure>
<p>A table has both clustered and non-clustered indexes.</p>
<p>Following are the advantages of focusing on index-only scans instead of clustered indexes:</p>
<ul>
<li><p>You are not limited to one index. Any index can be as fast as a clustered index.</p>
</li>
<li><p>Adding INCLUDE columns to a non-clustered index doesn’t affect anything else than this particular index. There is no penalty that hurts all other indexes!</p>
</li>
<li><p>You don’t need to add all table columns to a non-clustered index to enable an index-only scan. Just add the columns that are relevant for the query you’d like to tune. That keeps the index small and can thus become even faster than a clustered index.</p>
</li>
<li><p>And the best part is: there is no mutual exclusion of index-only scans and clustered indexes. Index-only scans work irrespective of the table storage. You can extend non-clustered indexes for index-only scans even if there is a clustered index. That’s also an easy way to avoid paying the “clustered index penalty” on non-clustered indexes.</p>
</li>
</ul>
<figure class="highlight sql"><table><tr><td class="code"><pre><div class="line"><span class="comment">-- Enforces the Primary Key constraint with a Unique Non-Clustered Index</span></div><div class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> Foo1</div><div class="line">(</div><div class="line">Col1 <span class="built_in">INT</span> <span class="keyword">NOT</span> <span class="literal">NULL</span> PRIMARY <span class="keyword">KEY</span> NONCLUSTERED,</div><div class="line">Col2 <span class="built_in">INT</span> <span class="keyword">NOT</span> <span class="literal">NULL</span>,</div><div class="line">Col3 <span class="built_in">INT</span> <span class="keyword">NOT</span> <span class="literal">NULL</span></div><div class="line">)</div><div class="line"><span class="keyword">GO</span></div><div class="line"></div><div class="line"><span class="comment">-- Create the Primary Key constraint on an ever-increasing</span></div><div class="line"><span class="comment">-- key column</span></div><div class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> Foo2</div><div class="line">(</div><div class="line">Col1 <span class="built_in">INT</span> <span class="keyword">NOT</span> <span class="literal">NULL</span> PRIMARY <span class="keyword">KEY</span> NONCLUSTERED,</div><div class="line">Col2 UNIQUEIDENTIFIER <span class="keyword">NOT</span> <span class="literal">NULL</span>,</div><div class="line">Col3 <span class="built_in">INT</span> <span class="keyword">NOT</span> <span class="literal">NULL</span></div><div class="line">)</div><div class="line"><span class="keyword">GO</span></div><div class="line"></div><div class="line"><span class="comment">-- Create the Clustered Index on a random key column</span></div><div class="line"><span class="keyword">CREATE</span> <span class="keyword">UNIQUE</span> CLUSTERED <span class="keyword">INDEX</span> ci_Col2 <span class="keyword">ON</span> Foo2(Col2)</div><div class="line"><span class="keyword">GO</span></div></pre></td></tr></table></figure>
<ul>
<li><h4 id="what-is-a-guid"><a href="#What-is-a-GUID" class="headerlink" title="What is a GUID?"></a><strong>What is a GUID?</strong></h4></li>
</ul>
<p>GUID (or UUID) is an acronym for ‘Globally Unique Identifier’ (or ‘Universally Unique Identifier’). It is a 128-bit integer number used to identify resources. The term GUID is generally used by developers working with Microsoft technologies, while UUID is used everywhere else.</p>
<ul>
<li>How unique is a GUID?</li>
</ul>
<p>128-bits is big enough and the generation algorithm is unique enough that if 1,000,000,000 GUIDs per second were generated for 1 year the probability of a duplicate would be only 50%. Or if every human on Earth generated 600,000,000 GUIDs there would only be a 50% probability of a duplicate.</p>
<ul>
<li>How are GUIDs used?</li>
</ul>
<p>GUIDs are used in enterprise software development in C#, Java, and C++ as database keys, component identifiers, or just about anywhere else a truly unique identifier is required. GUIDs are also used to identify all interfaces and objects in COM programming.</p>
<p>SQL Server has the creation of GUID’s built in. There is no need to write a separate stored procedure for this.<br>You can use</p>
<pre><code>- `NEWID()`
- `NEWSEQUENTIALID()`
</code></pre><p>The key difference between both procedures would be that the sequential GUID should be used if it is for a primary clustered key.</p>
]]></content>
    
    <summary type="html">
    
      &lt;ul&gt;
&lt;li&gt;&lt;h4 id=&quot;Design-a-table-with-a-primary-key-of-varchar-or-int&quot;&gt;&lt;a href=&quot;#Design-a-table-with-a-primary-key-of-varchar-or-int&quot; class=&quot;headerlink&quot; title=&quot;Design a table with a primary key of varchar or int?&quot;&gt;&lt;/a&gt;&lt;strong&gt;Design a table with a primary key of varchar or int?&lt;/strong&gt;&lt;/h4&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;ul&gt;
&lt;li&gt;In gereral, &lt;code&gt;VARCHAR&lt;/code&gt; or &lt;code&gt;INT&lt;/code&gt; has no big differency in query. What matter is the access pattern.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Narrowness:&lt;/strong&gt;&lt;br&gt;On absolute terms, a wider key will always be worse than a narrow key. The type carries no importance, is the width of the key that matters. When compared with INT though, few types can beat INT in narrowness, so INT usually wins that argument just by the fact that it is only 4 bytes wide.&lt;/p&gt;
&lt;p&gt;More on this aspect:&lt;br&gt;In most cases, The Primary Key (PK) is defined as INT NOT NULL IDENTITY(1,1) field in each table.&lt;br&gt;On one side, with an IDENTITY field, the database handles all the details of making sure it’s really unique, and the INT datatype is just 4 bytes, and fixed, so it’s easier and more suited to be used for the primary (and clustering) key in the table.&lt;br&gt;On the other side, using a VARCHAR(10) or (20) just uses up too much space - 10 or 20 bytes instead of 4.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Another fact is when choosing the PK usually one also selects the clustered key. Those two are often confused. By default, SQL server chooses PK as one of clustering indexes.&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
      <category term="Database" scheme="http://volcanohong.github.com/categories/Database/"/>
    
    
      <category term="database" scheme="http://volcanohong.github.com/tags/database/"/>
    
      <category term="sql server" scheme="http://volcanohong.github.com/tags/sql-server/"/>
    
      <category term="sql" scheme="http://volcanohong.github.com/tags/sql/"/>
    
  </entry>
  
</feed>
