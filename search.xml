<?xml version="1.0" encoding="utf-8"?>
<search>
  
    
    <entry>
      <title><![CDATA[CORS Issue Cont.]]></title>
      <url>%2F2018%2F08%2F01%2Fcors-cont%2F</url>
      <content type="text"><![CDATA[CORS Solution Cont. In spring-boot project configuration, @Configuration@ConfigurationProperties(prefix = "app.corsSites")public class CorsSiteConfiguration &#123; public List&lt;String&gt; getAllowSites() &#123; return allowSites; &#125; List&lt;String&gt; allowSites = new ArrayList&lt;String&gt;(); @Bean public WebMvcConfigurer corsConfigurer() &#123; return new WebMvcConfigurerAdapter() &#123; @Override public void addCorsMappings(CorsRegistry registry) &#123; CorsRegistration corsRegistration = registry.addMapping("/**") //config in yml file .allowedOrigins("http://10.0.0.1:8081") //demo .allowedMethods("GET", "POST", "PUT", "DELETE") .allowCredentials(false) .maxAge(3600); if (allowSites == null || allowSites.size() == 0) &#123; corsRegistration.allowedOrigins("*"); &#125; else &#123; allowSites.forEach(site -&gt; corsRegistration.allowedOrigins(site)); &#125; &#125; &#125;; &#125;&#125; In yml file, app: cors-sites: allow-sites: - "*"]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[CORS Issue]]></title>
      <url>%2F2017%2F04%2F10%2Fcors%2F</url>
      <content type="text"><![CDATA[CORS in My Case With an angular 2 app in front-end which calls APIs provided by a RESTful webservice in backend, at beginning, I have CORS issue when calling HTTP GET method. I simply solved it by adding @CrossOrigin annotaion to REST controller, e.g., @CrossOrigin(origins = "http://localhost:3000") Later, when the app calls HTTP POST or PUT, it gets same CORS error with response code 403 and return invalid CORS request. The differences here are POST, PUT method send OPTION request first, and then, send POST or PUT request again. This procedure works fine in local dev enviroment without CORS error. However, when I deployed the app to server, it dosen’t work like that any more, I notice that only POST or PUT request sent instead of sending OPTION request first. Some explanation here… In fact, there is nothing to do in Angular2 regarding cross domain requests. CORS is something natively supported by browsers. This link could help you to understand how it works: http://restlet.com/blog/2015/12/15/understanding-and-using-cors/http://restlet.com/blog/2016/09/27/how-to-fix-cors-problems/ To be short, in the case of cross domain request, the browser automatically adds an Origin header in the request. There are two cases: Simple requests. This use case applies if we use HTTP GET, HEAD and POST methods. In the case of POST methods, only content types with the following values are supported: text/plain, application/x-www-form-urlencoded and multipart/form-data. Preflighted requests. When the “simple requests” use case doesn’t apply, a first request (with the HTTP OPTIONS method) is made to check what can be done in the context of cross-domain requests. So in fact most of work must be done on the server side to return the CORS headers. The main one is the Access-Control-Allow-Origin one. Regarding Angular2, simply use the Http object like any other requests (same domain for example): return this.http.get('https://angular2.apispark.net/v1/companies/') .map(res =&gt; res.json()).subscribe( ...); According to MDN Preflighted requests Unlike simple requests (discussed above), “preflighted” requests first send an HTTP OPTIONS request header to the resource on the other domain, in order to determine whether the actual request is safe to send. Cross-site requests are preflighted like this since they may have implications to user data. In particular, a request is preflighted if: It uses methods other than GET or POST. Also, if POST is used to send request data with a Content-Type other than application/x-www-form-urlencoded, multipart/form-data, or text/plain, e.g. if the POST request sends an XML payload to the server using application/xml or text/xml, then the request is preflighted.It sets custom headers in the request (e.g. the request uses a header such as X-PINGOTHER) Method works in my caseApply intercepter and add http response headers.public class ApiInterceptor extends HandlerInterceptorAdapter &#123; @Override public boolean preHandle(HttpServletRequest request, HttpServletResponse response, Object handler) throws Exception &#123; if ("OPTIONS".equalsIgnoreCase(request.getMethod())) &#123; response.setStatus(HttpServletResponse.SC_OK); &#125; else &#123; response.setHeader("Access-Control-Allow-Origin", request.getHeader("Origin")); response.setHeader("Access-Control-Allow-Credentials", "true"); response.setHeader("Access-Control-Allow-Methods", "GET, POST, PUT, DELETE"); response.setHeader("Access-Control-Max-Age", "3600"); response.setHeader("Access-Control-Allow-Headers", "Content-Type, Accept"); &#125; return true; &#125; Or simply use spring annotation@CrossOrigin(origins = "*") Other Methods I also tried following methods without any luck. Apply JAVA configuration e.g.,@Bean public WebMvcConfigurer corsConfigurer() &#123; return new WebMvcConfigurerAdapter() &#123; @Override public void addCorsMappings(CorsRegistry registry) &#123; registry.addMapping("/**") .allowedOrigins("http://localhost:3000") .allowedMethods("GET", "POST", "PUT", "DELETE") .allowCredentials(false).maxAge(3600); &#125; &#125;; &#125; But enabling CORS for the whole application doesn’t work for me. Enable CORS filter in Tomcat &lt;filter&gt; &lt;filter-name&gt;CorsFilter&lt;/filter-name&gt; &lt;filter-class&gt;org.apache.catalina.filters.CorsFilter&lt;/filter-class&gt; &lt;init-param&gt; &lt;param-name&gt;cors.exposed.headers&lt;/param-name&gt; &lt;param-value&gt;Access-Control-Allow-Origin,Access-Control-Allow-Credentials&lt;/param-value&gt; &lt;/init-param&gt;&lt;/filter&gt; Add headers at front-end private headers:Headers = new Headers(&#123; 'Content-Type': 'application/json', 'Access-Control-Allow-Origin' : '*', // Required for CORS support to work 'Access-Control-Allow-Credentials' : true, // Required for cookies, authorization headers with HTTPS Accept: 'application/json' &#125;); get(url:string, path:string):Observable&lt;any&gt; &#123; this.validateSession(); url = url == '' ? this.api_url : url; return this.http.get( `$&#123;url&#125;$&#123;path&#125;`, &#123; headers: this.headers, search: this.urlParams &#125;) .map(this.getJson) .catch(this.handleError); &#125;]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[Angular2 Apps Script Error in Safari]]></title>
      <url>%2F2017%2F03%2F12%2Fangular2-in-safari%2F</url>
      <content type="text"><![CDATA[Angular2 Encounter Errors in Safari By some workaround, I found it’s an open issue that older version Safari is not supporting angular 2 very well. Problem: The root cause is that angular 2 pipe has some issue in Safari, since Safari missing some internationalization libs or api error. Possible Solutions: S1. Update the Safari from 9.x to 10.x S2. Import international libs from polyfill, e.g., &lt;script src="https://cdn.polyfill.io/v2/polyfill.min.js?features=Intl.~locale.en"&gt;&lt;/script&gt; S3. Install the internationalization package: npm install intl@1.1.0 --save Then add the following lines to your index.html: &lt;script src="node_modules/intl/dist/Intl.min.js"&gt;&lt;/script&gt;&lt;script src="node_modules/intl/locale-data/jsonp/en.js"&gt;&lt;/script&gt; S4. Create custom pipe instead of angular2 default one. E.g., import &#123; Pipe, PipeTransform &#125; from '@angular/core';import * as moment from 'moment';@Pipe(&#123; name: 'customdate'&#125;)export class CustomDatePipe implements PipeTransform &#123; transform(value: string, arg: string): string &#123; return moment(value).format(arg); &#125;&#125; And &#123;&#123; myDate | customdate: 'DD/MM/YYYY' &#125;&#125; Test Results: S1 works since I updated the Safari to 10.x. S2 works fine in my local environment. but fails on Demo server due to Cannot GET /v2/Intl.min.js.map. S3 has no effects. Just a note, the cdn.polyfill script mentioned above works well for the devices and user agents that the polyfill service supports, however it defaults to not providing the polyfill to ‘unrecognised’ user agents. The following update to the script should be made so that the polyfill still loads for unrecognised browers:&lt;script src="https://cdn.polyfill.io/v2/polyfill.js?features=Intl.~locale.en&amp;unknown=polyfill"&gt;&lt;/script&gt; Also tried following methods, but no luck for me. put intl to package.json.:&quot;dependencies&quot;: &#123; &quot;angular2&quot;: &quot;2.0.0-beta.7&quot;, &quot;intl&quot;: &quot;1.1.0&quot;,...&#125; Runnpm install Added to index.html:&lt;script src=&quot;node_modules/intl/dist/Intl.min.js&quot;&gt;&lt;/script&gt; &lt;script src=&quot;node_modules/intl/locale-data/jsonp/en.js&quot;&gt;&lt;/script&gt; Or After npm installed intl and then added the following to polyfill.jsimport 'intl/index';import 'intl/locale-data/jsonp/en.js'; Related Links: DatePipe needs review and potentially breaking changes Date pipe throws Reference error in Safari DateForm Pipe has issues in Safari with internationalization https://github.com/angular/angular/issues/3333]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[Chart.js in Angular 2]]></title>
      <url>%2F2017%2F03%2F01%2Fchartjs-notes%2F</url>
      <content type="text"><![CDATA[Installation You can install ng2-charts using npm npm install ng2-charts --save You need to install and include Chart.js library in application via html or webpack bundler (more options can be found in official chart.js Documentation)E.g., npm install chart.js --save Important: Embedding Chart.js in application is mandatory! &lt;script src=&quot;node_modules/chart.js/src/chart.js&quot;&gt;&lt;/script&gt; Or &lt;script type=&quot;text/javascript&quot; src=&quot;https://cdnjs.cloudflare.com/ajax/libs/Chart.js/2.1.3/Chart.bundle.min.js&quot;&gt;&lt;/script&gt; Demo and API details of ng2-charts can be found here: Demo and Source code. Ticks Congiguration The tick configuration is nested under the scale configuration in the ticks key. It defines options for the tick marks that are generated by the axis. Beginning From Zero scales: &#123; yAxes: [&#123; ticks: &#123; beginAtZero: true &#125; &#125;] &#125; Change Scale Label Creating Custom Tick Formats The callback method may be used for advanced tick customization. In the following example, every label of the Y axis would be displayed in scientific notation. If the callback returns null or undefined the associated grid line will be hidden. scales: &#123; yAxes: [&#123; ticks: &#123; callback: function (label, index, labels) &#123; return label / 1000 + 'k'; &#125;, scaleLabel: &#123; display: true, labelString: '1k = 1000' &#125; &#125; &#125;] &#125; Two y-scales scales: &#123; yAxes: [&#123; ticks: &#123; position: "left", "id": "y-axis-0" &#125;, &#123; ticks: &#123; max: 10, min: -50, stepSize: 10, display: false &#125;, position: "right", "id": "y-axis-1" &#125;]&#125;, with corresponding datasetthis.barChartData.push(&#123;data: data1, label: 'a', yAxisID: "y-axis-0"&#125;);this.barChartData.push(&#123;data: data2, label: 'b', yAxisID: "y-axis-1"&#125;); Tooltips Congiguration Sometime we have to apply tooltips in special style in chart.js.For example, in the following code, the 1st and 2nd data sets show tooltips in currency format, while the 3rd data set has tooltip with percentage symbole as sufix. barChartOptions:any = &#123; tooltips: &#123; callbacks: &#123; label: function (tooltipItems, data) &#123; if (tooltipItems.datasetIndex == 2) &#123; return data.datasets[tooltipItems.datasetIndex].label + ': ' + tooltipItems.yLabel + '%'; &#125; else &#123; return data.datasets[tooltipItems.datasetIndex].label + ': ' + tooltipItems.yLabel.toFixed(2).replace(/(\d)(?=(\d&#123;3&#125;)+\.)/g, '$1,'); &#125; &#125; &#125; &#125;&#125; Here, we implemented tooltip label callback function. Callback Arguments Description label tooltipItem, data Text to render for an individual item in the tooltip All functions are called with the same arguments: a tooltip item and the data object passed to the chart. All functions must return either a string or an array of strings. Arrays of strings are treated as multiple lines of text. Tooltip Item Interface The tooltip items passed to the tooltip callbacks implement the following interface. &#123; // X Value of the tooltip as a string xLabel: String, // Y value of the tooltip as a string yLabel: String, // Index of the dataset the item comes from datasetIndex: Number, // Index of this data item in the dataset index: Number, // X position of matching point x: Number, // Y position of matching point y: Number,&#125; Ref Chart.js Documentation Demo Source code]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[Java Cookie]]></title>
      <url>%2F2017%2F02%2F20%2Fjava-cookie%2F</url>
      <content type="text"><![CDATA[HTTP Only and Secure Flag Set httpOnly and secure flags on session cookie. JSESSIONID For JSESSIONID, we can upgrade web servlet to version 3.0,update web.xml as&lt;web-app version="3.0" xmlns="http://java.sun.com/xml/ns/javaee"xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"xsi:schemaLocation="http://java.sun.com/xml/ns/javaee http://java.sun.com/xml/ns/javaee/web-app_3_0.xsd"&gt; Then, in web.xml, add &lt;cookie-config&gt; as&lt;session-config&gt; &lt;cookie-config&gt; &lt;http-only&gt;true&lt;/http-only&gt; &lt;secure&gt;true&lt;/secure&gt; &lt;/cookie-config&gt;&lt;/session-config&gt; Self-defined Cookie Somehow, the above method does not work on a self-defined cookie in my case. Here we introducing an alternative solution. Implement a security filter and made a mapping to the pages who need filter.&lt;filter&gt; &lt;filter-name&gt;Security Filter&lt;/filter-name&gt; &lt;filter-class&gt;common.SecurityFilter&lt;/filter-class&gt;&lt;/filter&gt;&lt;filter-mapping&gt; &lt;filter-name&gt;Security Filter&lt;/filter-name&gt; &lt;url-pattern&gt;*.jsf&lt;/url-pattern&gt;&lt;/filter-mapping&gt; Implement a wrapper that extends HttpServletResponseWrapperpublic class SecureCookieSetter extends HttpServletResponseWrapper &#123; public SecureCookieSetter(HttpServletResponse response) &#123; super(response); &#125; @Override public void setHeader(String name, String value) &#123; if ((name.equals("Set-Cookie")) &amp;&amp; (!value.matches("(^|.*;)\\s*Secure"))) &#123; value = value + ";Secure"; &#125;// if ((name.equals("Set-Cookie")) &amp;&amp; (!value.matches("(^|.*;)\\s*HttpOnly"))) &#123;// value = value + ";HttpOnly";// &#125; super.setHeader(name, value); &#125;&#125; Implement security filterpublic class SecurityFilter implements Filter &#123; @Override public void doFilter(ServletRequest request, ServletResponse response, FilterChain chain) throws IOException, ServletException &#123; HttpServletRequest httpReq = (HttpServletRequest) request; HttpServletResponse httpResp = (HttpServletResponse) response; // wrap the response response = new SecureCookieSetter(httpResp); // touch the session if the SessionKey dose not change httpReq.getSession(); // overwriting the cookie with Secure attribute set httpResp.setHeader("Set-Cookie", "SessionKey=" + sessionKey + ";Path=/"); &#125;&#125; Understanding JSESSIONID JSESSIONID is a ID generated by Servlet container like Tomcat or Jetty and used for session management in J2EE web application for http protocol.The ID is sent to the client either within a cookie (default) or as part of the URL (called URLrewriting, used only if cookies are disabled on the browser). How JSESSIONID works? When the first request (that demands a creation of session) arrives on a J2EE server, the server creates HTTPSession object and sends the sessionID to the browser. The browser then send the same sessionId for every subsequent requests.Thus the stateless protocol becomes a stateful one. There are 2 ways a request(from browser) notifies a container/server to start a new session.Requesting a jsp page. (as we saw above)The container creates certain implicit objects for a JSP and one among those is the HTTPSession object. HTTPSession object holds the sessionId which is written to the response header. You can alter the default behaviour by adding this directive&lt;%@ page session=&quot;false&quot;%&gt;Requesting a servlet that has code to initiate the creation by calling,request.getSession() - returns a HTTPSession object if it already exists else creates a new onerequest.getSession(true) - same as aboverequest.getSession(false) - returns a pre-existing session if it exits else doesn't create one. Ref: Response wrapper Understand jsessionid]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[Angular2 Notes V]]></title>
      <url>%2F2017%2F02%2F09%2Fangular2-notes-5%2F</url>
      <content type="text"><![CDATA[Interval and Clock Ticker Use IntervalObservable in rxjs to implement interval in angular 2. Create(period) is a static method, which creates an Observable that emits sequential numbers every specified interval of time. import &#123; IntervalObservable &#125; from 'rxjs/observable/IntervalObservable';@Component(&#123; selector: 'demo', templateUrl: '&lt;div&gt;&#123;&#123;time | date:'HH:mm:ss'&#125;&#125;&lt;/div&gt;'&#125;)export class Demo implements OnInit&#123; time:number = Date.now(); ngOnInit() &#123; IntervalObservable.create(1000).subscribe(() =&gt; this.time = Date.now()); &#125;&#125; ngOnChanges Not Detect Changes in Object During change detection, when Angular checks components’ input properties for change, it uses (essentially) === for dirty checking. For arrays, this means the array references (only) are dirty checked. Since the rawLapsData array reference isn’t changing, ngOnChanges() will not be fired. Two possible solutions: Implement ngDoCheck() and perform your own change detection logic to determine if the array contents have changed. Assign a new array to rawLapsData whenever you make any changes to the array contents. Then ngOnChanges() will be called because the array (reference) will appear as a change. Number Pipe Parameters For example,&#123;&#123; tmpNumber | number : '1.2-2' &#125;&#125; The parameter has this syntax: {minIntegerDigits}.{minFractionDigits}-{maxFractionDigits} So the example of ‘1.2-2’ means: A minimum of 1 digit will be shown before decimal point. Show at least 2 digits after decimal point. No more than 2 digits. Matrix URL Matrix parameters are tied to a path segment, while query parameters are tied to the URL. They have different semantics. Maybe it’s hard to tell because you always see it at the end of the URL, but this is also matrix paramterslocalhost:3000/heroes;id=15;foo=foo/bar/baz The parameters are tied to heroes. When you access the route.url, you will see this this.route.url.subscribe((url: UrlSegment[]) =&gt; &#123; let heroes = url[0]; let heroesMatrix = heroes.parameters(); // heroes should contain id=5, foo=foo let bar = url[1].path; let baz = url[2].path;&#125;) Is the matrix url notation the “default” to creating urls with parameters or is better to use the “old” notation with ? No, both could be used, and how to use (create) them is completely different matrix parameters are tied to each path, by passing an object after the path in the array router.navigate([&#39;/foo&#39;, { id:1 }, &#39;bar&#39;, {baz: 2 } ]) Here you will get /foo;id=1/bar;baz=2. Query parameters are created by passing the NavigationExtras as the second argument to navigate router.navigate([&#39;/foo&#39;], { queryParams: { bar: 1, baz: 2 }}); Here you get /foo?bar=1&amp;baz=2 See also: When to use query parameters versus matrix parameters? URL matrix parameters vs. request parameters canActivate Return Observable Note: CanActive is an interface, that indicates a class can be implement to be a guard deciding if a route can be activated. Implement canActivate() method. It can return with 3 types.canActivate(route: ActivatedRouteSnapshot, state: RouterStateSnapshot) : Observable&lt;boolean&gt;|Promise&lt;boolean&gt;|boolean We can get previous path through RouterStateSnapshot. Passing parameters via router.navigate(), and the passed params are matrix URL pattern rather than query params.Have to pass the matrix URL parameters to the redirected error page, so that the error page knows what is the link that user wants to access causing an error. Hope to replace window.location.hrefin the future, it is not written in angular way. canActivate(route:ActivatedRouteSnapshot, state:RouterStateSnapshot): Observable&lt;boolean&gt; &#123; this.path = state.url; return this.roleResourceService.checkStaffRoleResource(this.path) .map(isActivate =&gt; &#123; if(!isActivate) &#123; this.onCanActivate(isActivate); &#125; return isActivate; &#125;); &#125; onCanActivate(canActivate:boolean) &#123; if (!canActivate) &#123; this.router.navigate(['', 'error-role', &#123;path: this.path&#125;]); this.roleResourceService.clearCache(); &#125; &#125; Detect Route Changes import &#123; Router, NavigationStart, NavigationEnd, NavigationError, NavigationCancel, RoutesRecognized &#125; from '@angular/router';constructor(router:Router) &#123; router.events.forEach((event) =&gt; &#123; if(event instanceof NavigationStart) &#123; &#125; // NavigationEnd // NavigationCancel // NavigationError // RoutesRecognized &#125;);&#125; You can also filter by the given event: import 'rxjs/add/operator/filter';constructor(router:Router) &#123; router.events .filter(event =&gt; event instanceof NavigationStart) .subscribe((event:NavigationStart) =&gt; &#123; // You only receive NavigationStart events &#125;);&#125; Using pairwise operator to get the previous and current event also is an nice idea. import 'rxjs/add/operator/pairwise';import &#123;Router&#125; from '@angular/router;export class AppComponent &#123; constructor(private router: Router) &#123; this.router.events.pairwise().subscribe((e) =&gt; &#123; console.log(e); &#125; &#125;);&#125; Ref: Rxjs IntervalObservable When to use query parameters versus matrix parameters? URL matrix parameters vs. request parameters Using pairwise operator]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[Angular2 Notes IV]]></title>
      <url>%2F2017%2F01%2F29%2Fangular2-notes-4%2F</url>
      <content type="text"><![CDATA[Shadow DOMIn fact, Angular doesn’t use native Shadow DOM by default, it uses an emulation. Most browsers simply don’t support Shadow DOM yet, but we should still be able to use the framework. Even better, we can easily tell Angular to use the native Shadow DOM if we want, View Encapsulation in Angular. View Encapsulation TypesAngular comes with view encapsulation built in, which enables us to use Shadow DOM or even emulate it. There are three view encapsulation types: ViewEncapsulation.None - No Shadow DOM at all. Therefore, also no style encapsulation. ViewEncapsulation.Emulated - No Shadow DOM but style encapsulation emulation. ViewEncapsulation.Native - Native Shadow DOM with all it’s goodness. To make that Angular doesn’t use Shadow DOM at all. In case adding some attributes to the style so that the style is not rendered well in the browser.import &#123;Component, OnInit, ViewEncapsulation&#125; from '@angular/core';@Component(&#123; selector: 'app-period', templateUrl: './period.component.html', encapsulation: ViewEncapsulation.None, styleUrls: ['./period.component.scss']&#125;) Bootstrap Datepicker import &#123;DatePickerModule&#125; from 'ng2-datepicker';import &#123;NKDatetimeModule&#125; from 'ng2-datetime/ng2-datetime'import 'ng2-datetime/src/vendor/bootstrap-datepicker/bootstrap-datepicker.min.js';import 'ng2-datetime/src/vendor/bootstrap-timepicker/bootstrap-timepicker.min.js'; &lt;div class="col-md-3 no-padding"&gt; &lt;datetime [(ngModel)]="fromDate" [timepicker]="false" [datepicker]="fromDateOptions" name="dpFromDate" id="dpFromDate" (ngModelChange)="onSelectedDates()"&gt; &lt;/datetime&gt;&lt;/div&gt; Example of datepicker options…this.toDateOptions = &#123; autoclose: true, assumeNearbyYear: true, format: 'dd-mm-yyyy', language: 'en', todayBtn: 'linked', todayHighlight: true, weekStart: 1, icon: 'fa fa-calendar' &#125;; Bootstrap Dropdown Button import &#123; ButtonsModule, DropdownModule &#125; from 'ng2-bootstrap';@NgModule(&#123; imports: [ //... ButtonsModule.forRoot(), DropdownModule.forRoot(), //... ], providers: ..., declarations: ...&#125;) &lt;div class="btn-group" dropdown&gt; &lt;button id="dropdown-btn-curr" class="btn btn-secondary" dropdownToggle&gt; &amp;nbsp; &#123;&#123;currDefault&#125;&#125; &amp;nbsp; &lt;i class="fa fa-caret-down"&gt;&lt;/i&gt; &lt;/button&gt; &lt;ul dropdownMenu role="menu" aria-labelledby="dropdown-btn-curr"&gt; &lt;li role="menuitem" *ngFor="let curr of currCodeList" &gt; &lt;a (click)="onCurrencySelected(curr)" class="dropdown-item"&gt;&#123;&#123;curr&#125;&#125;&lt;/a&gt; &lt;/li&gt; &lt;/ul&gt;&lt;/div&gt; Simple Cache Implementation export class TopWinnerService &#123; pathWinningAmount:string = '/winning-amount'; _listWinningAmount = null; //enable cache for winners' list constructor(private apiService:ApiService) &#123; &#125; getWinningAmount(params:URLSearchParams) &#123; if(this._listWinningAmount == null) &#123; console.log('no cache::_listWinningAmount...'); this._listWinningAmount = this.apiService.query('', this.pathWinningAmount, params) .publishReplay(1) .refCount(); &#125; return this._listWinningAmount; &#125; clearCache() &#123; this._listWinningAmount = null; &#125;&#125; Resource Relative Path logo = require("../../assets/img/03.png"); Dynamic Base Href &lt;base href="./"&gt; Cross Origin ProblemAdd an @CrossOrigin annotation to @RestController or @RequestMapping annotated handler method in order to enable CORS on it. By default @CrossOrigin allows all origins and the HTTP methods specified in the @RequestMapping annotation, CROS Support. E.g., @CrossOrigin(origins = "http://domain2.com", maxAge = 3600) Ref: View Encapsulation in Angular CROS Support]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[Angular2 Notes III]]></title>
      <url>%2F2017%2F01%2F28%2Fangular2-notes-3%2F</url>
      <content type="text"><![CDATA[Angular 2 Notes - Modules State Management The Problem With Concurrency Building components which communicate with each other is a typical task involving state. We frequently have to keep up to date with different Angular components interacting with the same state: when more than one component accesses and modifies that state we call it shared mutable state. keeping the state consistent Create a store to manage the state. E.g., the state of Note can be accessed from the store.import &#123; BehaviorSubject &#125; from 'rxjs/BehaviorSubject';import &#123; Injectable &#125; from '@angular/core';import 'rxjs/Rx';export interface Note &#123; color: string, title: string, value: string, id?: string | number, createdAt?: string, updatedAt?: string, userId?: string&#125;export interface State &#123; notes: Array&lt;Note&gt;&#125;const defaultState : State = &#123; notes: []&#125;const _store = new BehaviorSubject&lt;State&gt;(defaultState);@Injectable()export class Store &#123; private _store = _store; changes = this._store.asObservable().distinctUntilChanged() setState(state: State) &#123; this._store.next(state); &#125; getState(): State &#123; return this._store.value; &#125; purge() &#123; this._store.next(defaultState); &#125;&#125; Apply a store-helper service to keep state…import &#123; Injectable &#125; from '@angular/core';import &#123; Store &#125; from '../store';@Injectable()export class StoreHelper &#123; constructor(private store: Store) &#123;&#125; update(prop, state) &#123; const currentState = this.store.getState(); this.store.setState(Object.assign(&#123;&#125;, currentState, &#123; [prop]: state &#125;)); &#125; add(prop, state) &#123; const currentState = this.store.getState(); const collection = currentState[prop]; this.store.setState(Object.assign(&#123;&#125;, currentState, &#123; [prop]: [state, ...collection] &#125;)); &#125; findAndUpdate(prop, state) &#123; const currentState = this.store.getState(); const collection = currentState[prop]; this.store.setState(Object.assign(&#123;&#125;, currentState, &#123;[prop]: collection.map(item =&gt; &#123; if (item.id !== state.id) &#123; return item; &#125; return Object.assign(&#123;&#125;, item, state) &#125;)&#125;)) &#125; findAndDelete(prop, id) &#123; const currentState = this.store.getState(); const collection = currentState[prop]; this.store.setState(Object.assign(&#123;&#125;, currentState, &#123;[prop]: collection.filter(item =&gt; item.id !== id)&#125;)); &#125;&#125;``` Apply the store...```jsexport class Notes &#123; notes = []; constructor( private store: Store, private noteService: NoteService ) &#123; this.noteService.getNotes().subscribe(); // this.store.changes.pluck('notes') // .subscribe((notes: any) =&gt; this.notes = notes); this.store.changes .map(data =&gt; data.notes) .subscribe(notes =&gt; this.notes = notes); &#125; onCreateNote(note) &#123; this.noteService.createNote(note) .subscribe(); // .subscribe(note =&gt; this.notes.push(note)); &#125; onNoteChecked(note) &#123; this.noteService.completeNote(note) .subscribe(); // .subscribe(note =&gt; &#123; // const i = this.notes.findIndex(localNote =&gt; localNote.id === note.id); // this.notes.splice(i, 1); // &#125;); &#125;&#125; Authentication Management Create authentication service, auth.ts…import &#123; Injectable &#125; from '@angular/core';import &#123;CanActivate, Router&#125; from '@angular/router';import 'rxjs/Rx';@Injectable()export class AuthService implements CanActivate &#123; JWT_KEY: string = 'retain_token'; JWT: string = ''; constructor(private router: Router) &#123;&#125; isAuthorized(): boolean &#123; return Boolean(this.JWT); &#125; canActivate(): boolean &#123; const canActivate = this.isAuthorized(); this.onCanActivate(canActivate); return canActivate; &#125; onCanActivate(canActivate: boolean) &#123; if (!canActivate) &#123; this.router.navigate(['', 'auth']); &#125; &#125;&#125; Add auth control in routes.ts.import &#123; RouterModule &#125; from '@angular/router';import &#123; ModuleWithProviders &#125; from '@angular/core';import &#123; Main, Notes, About, Auth &#125; from './containers';import &#123; AuthService &#125; from './services';export const routes: ModuleWithProviders = RouterModule.forRoot([ &#123; path: '', component: Main, canActivate: [ AuthService ], children: [ &#123; path: '', component: Notes &#125;, &#123; path: 'about', component: About &#125; ] &#125;, &#123; path: 'auth', component: Auth&#125;, &#123; path: '**', redirectTo: '' &#125;]); Auth page for example…import &#123; Component &#125; from '@angular/core';@Component(&#123; selector: 'auth-container', template: ` &lt;div class="auth-container"&gt; &lt;h1&gt;Auth&lt;/h1&gt; &lt;/div&gt; `&#125;) export class Auth &#123;&#125;]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[Angular2 Notes II]]></title>
      <url>%2F2017%2F01%2F04%2Fangular2-notes-2%2F</url>
      <content type="text"><![CDATA[Angular 2 Notes - Modules API Service First, configure the application to use server communication facilities. The Angular Http client communicates with the server using a familiar HTTP request/response protocol. The Http client is one of a family of services in the Angular HTTP library. E.g., main.ts ...import &#123; HttpModule&#125; from '@angular/http';//import &#123; HttpModule, JsonpModule &#125; from '@angular/http';import &#123; App, providers&#125; from './app';...@NgModule(&#123; declarations: [ App, Main ], providers, imports: [BrowserModule, FormsModule, HttpModule], bootstrap: [App]&#125;) When importing from the @angular/http module, SystemJS knows how to load services from the Angular HTTP library because the systemjs.config.js file maps to that module name. JsonpModule isn’t necessary for plain HTTP. Make a General ServiceE.g., api.ts import &#123; Injectable &#125; from '@angular/core';import &#123; Headers, Http, Response &#125; from '@angular/http';import &#123; Observable &#125; from 'rxjs/Observable';import 'rxjs/Rx';import 'rxjs/add/observable/throw';@Injectable()export class ApiService &#123; headers: Headers = new Headers(&#123; 'Content-Type': 'application/json', Accept: 'application/json' &#125;); api_url: string = 'http://localhost:3500'; //Http client service is injected the constructor. constructor(private http: Http) &#123;&#125; //the response object doesn't hold the data in a form the app can use directly. //we must parse the response data into a JSON object. private getJson(response: Response) &#123; return response.json(); &#125; //always handle errors private checkForError(response: Response): Response &#123; if (response.status &gt;= 200 &amp;&amp; response.status &lt; 300) &#123; return response; &#125; else &#123; var error = new Error(response.statusText) error['response'] = response; console.error(error); throw error; &#125; &#125; //it will return an Observable when the Http client fetched from the server. //think of an Observable as a stream of events published by some source. get(path: string): Observable&lt;any&gt; &#123; return this.http.get(`$&#123;this.api_url&#125;$&#123;path&#125;`, &#123; headers: this.headers &#125;) .map(this.checkForError) .catch(err =&gt; Observable.throw(err)) .map(this.getJson) &#125; post(path: string, body): Observable&lt;any&gt; &#123; return this.http.post( `$&#123;this.api_url&#125;$&#123;path&#125;`, JSON.stringify(body), &#123; headers: this.headers &#125; ) .map(this.checkForError) .catch(err =&gt; Observable.throw(err)) .map(this.getJson) &#125; delete(path: string): Observable&lt;any&gt; &#123; return this.http.delete( `$&#123;this.api_url&#125;$&#123;path&#125;`, &#123; headers: this.headers &#125; ) .map(this.checkForError) .catch(err =&gt; Observable.throw(err)) .map(this.getJson) &#125;&#125; In fact, the http.get method returns an Observable of HTTP Responses (Observable) from the RxJS library and map is one of the RxJS operators. Export providersE.g., ../index.ts import * as services from './services'export &#123; App &#125; from './app';const mapValuesToArray = (obj) =&gt; Object.keys(obj).map(key =&gt; obj[key]);export const providers = [ ...mapValuesToArray(services)]; Export servicesE.g., ../services/index.ts export &#123; ApiService &#125; from './api';export &#123; NoteService &#125; from './notes'; Implement a serviceE.g., note.ts import &#123; Injectable &#125; from '@angular/core';import &#123; ApiService &#125; from './api';import 'rxjs/Rx';@Injectable()export class NoteService &#123; path: string = '/notes'; constructor(private apiService: ApiService) &#123;&#125; createNote(note) &#123; return this.apiService.post(this.path, note) &#125; getNotes() &#123; return this.apiService.get(this.path) &#125; completeNote(note) &#123; return this.apiService.delete(`$&#123;this.path&#125;/$&#123;note.id&#125;`) &#125;&#125; Apply a serviceE.g., notes.ts import &#123; NoteService &#125; from '../services';...export class Notes &#123; notes = []; //inject NoteService to constructor constructor(private noteService: NoteService) &#123;&#125; //Although at runtime the component requests heroes immediately after //creation, you don't call the service's get method in the component's //constructor. Instead, call it inside the ngOnInit() ngOnInit() &#123; this.noteService.getNotes() .subscribe(res =&gt; this.notes = res.data); &#125; //golden rule: always delegate data access to a supporting service class. onCreateNote(note) &#123; this.noteService.createNote(note) .subscribe(note =&gt; this.notes.push(note)); &#125; onNoteChecked(note) &#123; this.noteService.completeNote(note) .subscribe(note =&gt; &#123; const i = this.notes.findIndex(localNote =&gt; localNote.id === note.id); this.notes.splice(i, 1); &#125;); &#125;&#125; This is a best practice. Components are easier to test and debug when their constructors are simple, and all real work (especially calling a remote server) is handled in a separate method. To listen for events in this stream, subscribe to the Observable (Here, we have translated the obserable to json). These subscriptions specify the actions to take when the web request produces a success event (with the data in the event payload) or a fail event (with the error in the payload). Promise Based getHeroes (): Promise&lt;Hero[]&gt; &#123; return this.http.get(this.heroesUrl) .toPromise() .then(this.extractData) .catch(this.handleError);&#125;addHero (name: string): Promise&lt;Hero&gt; &#123; let headers = new Headers(&#123; 'Content-Type': 'application/json' &#125;); let options = new RequestOptions(&#123; headers: headers &#125;); return this.http.post(this.heroesUrl, &#123; name &#125;, options) .toPromise() .then(this.extractData) .catch(this.handleError);&#125;private extractData(res: Response) &#123; let body = res.json(); return body.data || &#123; &#125;;&#125;private handleError (error: Response | any) &#123; // In a real world app, we might use a remote logging infrastructure let errMsg: string; if (error instanceof Response) &#123; const body = error.json() || ''; const err = body.error || JSON.stringify(body); errMsg = `$&#123;error.status&#125; - $&#123;error.statusText || ''&#125; $&#123;err&#125;`; &#125; else &#123; errMsg = error.message ? error.message : error.toString(); &#125; console.error(errMsg); return Promise.reject(errMsg);&#125; We can follow the promise then(this.extractData).catch(this.handleError) pattern as in this example. While promises may be more familiar, observables have many advantages. Alternatively, you can call toPromise(success, fail). The observable’s map callback moves to the first success parameter and its catch callback to the second fail parameter in this pattern: .toPromise(this.extractData, this.handleError). Also, We have to adjust the calling component to expect a Promise instead of an observable:getHeroes() &#123; this.heroService.getHeroes() .then( heroes =&gt; this.heroes = heroes, error =&gt; this.errorMessage = &lt;any&gt;error);&#125;addHero (name: string) &#123; if (!name) &#123; return; &#125; this.heroService.addHero(name) .then( hero =&gt; this.heroes.push(hero), error =&gt; this.errorMessage = &lt;any&gt;error);&#125; The less obvious but critical difference is that these two methods return very different results. The promise-based then returns another promise. You can keep chaining more then and catch calls, getting a new promise each time.The subscribe method returns a Subscription. A Subscription is not another Observable. It’s the end of the line for observables. You can’t call map on it or call subscribe again. The Subscription object has a different purpose, signified by its primary method, unsubscribe. Observalbe Based* ConceptObservable in short addresses asynchronous processing and events. Comparing to promise, it can be described as observable = promise + events. What is great with observables is that they are lazy. Observables can be canceled and you can apply some operators in them (like map, filter, …). This allows to handle asynchronous things in a very flexible way. A great sample describing the strong power of observables is the way to connect a filter input to a corresponding filtered list. When the user enters characters, the list is refreshed. Observables handle corresponding AJAX requests and cancel previous in progress requests if another one is triggered by new value in the input. E.g., this.textValue.valueChanges .debounceTime(500) .switchMap(data =&gt; this.httpService.getListValues(data)) .subscribe(data =&gt; console.log('new list values', data)); In action Manage the observable by your own. In this case, call the subscribe method on the observable and assign the result into an attribute of the component. Then use this attribute in the view to iterate over the collection: @Component(&#123; template: ` &lt;h1&gt;My Friends&lt;/h1&gt; &lt;ul&gt; &lt;li *ngFor="#frnd of result"&gt; &#123;&#123;frnd.name&#125;&#125; is &#123;&#123;frnd.age&#125;&#125; years old. &lt;/li&gt; &lt;/ul&gt; `, directive:[CORE_DIRECTIVES]&#125;)export class FriendsList implement OnInit, OnDestroy &#123; result:Array&lt;Object&gt;; constructor(http: Http) &#123; &#125; ngOnInit() &#123; this.friendsObservable = http.get('friends.json') .map(response =&gt; response.json()) .subscribe(result =&gt; this.result = result); &#125; ngOnDestroy() &#123; this.friendsObservable.dispose(); &#125;&#125; Returns from both get and map methods are the observable not the result (in the same way than with promises). Manage the observable by the Angular template. You can also use the a pipe to implicitly manage the observable. In this case, there is no need to explicitly call the subscribe method. @Component(&#123; template: ` &lt;h1&gt;My Friends&lt;/h1&gt; &lt;ul&gt; &lt;li *ngFor="#frnd of (result | async)"&gt; &#123;&#123;frnd.name&#125;&#125; is &#123;&#123;frnd.age&#125;&#125; years old. &lt;/li&gt; &lt;/ul&gt; `, directive:[CORE_DIRECTIVES]&#125;)export class FriendsList implement OnInit &#123; result:Array&lt;Object&gt;; constructor(http: Http) &#123; &#125; ngOnInit() &#123; this.result = http.get('friends.json') .map(response =&gt; response.json()); &#125;&#125; Note that observables are lazy. So the corresponding HTTP request will be only called once when a listener attached on it is using the subscribe method. The map method is used to extract the JSON content from the response and use it in the observable processing. State Management Make a Store e.g., store.tsimport &#123; BehaviorSubject &#125; from 'rxjs/BehaviorSubject';import &#123; Injectable &#125; from '@angular/core';import 'rxjs/Rx';export interface Note &#123; color: string, title: string, value: string, id?: string | number, createdAt?: string, updatedAt?: string, userId?: string&#125;export interface State &#123; notes: Array&lt;Note&gt;&#125;const defaultState : State = &#123; notes: []&#125;const _store = new BehaviorSubject&lt;State&gt;(defaultState);@Injectable()export class Store &#123; private _store = _store; changes = this._store.asObservable().distinctUntilChanged() setState(state: State) &#123; this._store.next(state); &#125; getState(): State &#123; return this._store.value; &#125; purge() &#123; this._store.next(defaultState); &#125;&#125; Make a Store-Helper e.g., store-helper.ts import &#123; Injectable &#125; from '@angular/core';import &#123; Store &#125; from '../store';@Injectable()export class StoreHelper &#123; constructor(private store: Store) &#123;&#125; update(prop, state) &#123; const currentState = this.store.getState(); this.store.setState(Object.assign(&#123;&#125;, currentState, &#123; [prop]: state &#125;)); &#125; add(prop, state) &#123; const currentState = this.store.getState(); const collection = currentState[prop]; this.store.setState(Object.assign(&#123;&#125;, currentState, &#123; [prop]: [state, ...collection] &#125;)); &#125; findAndUpdate(prop, state) &#123; const currentState = this.store.getState(); const collection = currentState[prop]; this.store.setState(Object.assign(&#123;&#125;, currentState, &#123;[prop]: collection.map(item =&gt; &#123; if (item.id !== state.id) &#123; return item; &#125; return Object.assign(&#123;&#125;, item, state) &#125;)&#125;)) &#125; findAndDelete(prop, id) &#123; const currentState = this.store.getState(); const collection = currentState[prop]; this.store.setState(Object.assign(&#123;&#125;, currentState, &#123;[prop]: collection.filter(item =&gt; item.id !== id)&#125;)); &#125;&#125; Implement a Store In container note.ts, import &#123; Store &#125; from '../store';//...export class Notes implements OnDestroy&#123; notes = []; constructor( private store: Store, private noteService: NoteService )&#123; this.noteService.getNotes().subscribe(); // this.store.changes.pluck('notes') // .subscribe((notes: any) =&gt; this.notes = notes); this.store.changes .map(data =&gt; data.notes) .subscribe(notes =&gt; this.notes = notes); &#125; onCreateNote(note) &#123; this.noteService.createNote(note) .subscribe(); // .subscribe(note =&gt; this.notes.push(note)); &#125; onNoteChecked(note) &#123; this.noteService.completeNote(note) .subscribe(); // .subscribe(note =&gt; &#123; // const i = this.notes.findIndex(localNote =&gt; localNote.id === note.id); // this.notes.splice(i, 1); // &#125;); &#125;&#125; In service note.ts, keep the store up-to-date. import &#123; StoreHelper &#125; from './store-helper';//...@Injectable()export class NoteService &#123; path: string = '/notes'; constructor( private apiService: ApiService, private storeHelper: StoreHelper ) &#123;&#125; createNote(note) &#123; return this.apiService.post(this.path, note) .do(savedNote =&gt; this.storeHelper.add('notes', savedNote)) &#125; getNotes() &#123; return this.apiService.get(this.path) .do(res =&gt; this.storeHelper.update('notes', res.data)); &#125; completeNote(note) &#123; return this.apiService.delete(`$&#123;this.path&#125;/$&#123;note.id&#125;`) .do(res =&gt; this.storeHelper.findAndDelete('notes', res.id)); &#125;&#125; Ref: angular2 http client]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[Angular Datatable Notes]]></title>
      <url>%2F2017%2F01%2F01%2Fangular-datatable%2F</url>
      <content type="text"><![CDATA[Recently, I am developing Apps by using angular datatables. The followings are some issues or note that I have to record. Datatable OptionsSelected datatable options… vm.dtOptions = DTOptionsBuilder.newOptions() .withDOM('&lt;"html5buttons"B&gt;lTfgitp') .withOption('deferRender', true) // deferred rendering for additional speed of initialisation .withOption('deferLoading', true) // delay the loading of server-side data until second draw .withOption('processing', true) // add processing indicator // change the options in the page length select list. .withOption('lengthMenu', [[5, 10, 25, 50, 100, -1], [5, 10, 25, 50, 100, 'ALL']]) .withOption('aoColumnDefs', [&#123;"bVisible": false, "aTargets": [3, 4]&#125;]) //could affect search function // .withOption('scrollX', '600px') // add horizontal scroll // .withOption('scrollY', '500px') // add vertical scroll // .withOption('scrollCollapse', true) // table collapse on less data // .withOption('paging', false) // disable pagination // .withOption('searchCols', [null, null, null, &#123; "search": ''&#125;]) // define an initial search for individual columns. .withOption('aoColumnDefs', [&#123;"bVisible": false, "aTargets": [3, 4]&#125;]) //enable or disable the display of this column More options and instruction can refer datatable options. Reloading DatatableCalling dtInstance..rerender()… &lt;table datatable="ng" dt-options="ps.dtOptions" dt-instance="ps.dtInstance"&gt;&lt;/table&gt; $scope.reloadData = function () &#123; //call api and get some data setTimeout(function () &#123; $scope.$apply(function () &#123; // vm.dtInstance.rerender(); $scope.dtInstance._renderer.rerender(); &#125;); &#125;, 1); &#125;; Create a New FilterCreate a new filter for datatable by calling function $.fn.dataTableExt.afnFiltering.push(function (oSettings, aData, iDataIndex) {}. Then, redraw the table, dtInstance.dataTable.fnDraw(), to apply the filter. For example:vm.reloadDataByFilter = function () &#123; $.fn.dataTableExt.afnFiltering.push(function (oSettings, aData, iDataIndex) &#123; // `aData` returns current data array in the table &#123; // some logic here... var val = aData.slice(5); var res = false; angular.forEach(val, function (v, k) &#123; v = Number(v.replace(/[^0-9\.]+/g, "")); //remove currency symbol res = vm.checkValue(v, aData[4], aData[3]) || res; if (res) return res; &#125;); return res; &#125; &#125;); vm.dtInstance.dataTable.fnDraw(); &#125;; Missing Buttons on Data Change &lt;%--angular-datatables - v0.5.2--%&gt;&lt;script src="../dataTables/datatables.min.js"&gt;&lt;/script&gt;&lt;script src="../dataTables/angular-datatables.min.js"&gt;&lt;/script&gt;&lt;script src="../dataTables/angular-datatables.buttons.min.js"&gt;&lt;/script&gt;//datatable controller $scope.dtOptions = DTOptionsBuilder.newOptions() .withDOM('&lt;"html5buttons"B&gt;lTfgitp') .withButtons([ &#123;extend: 'copy'&#125;, &#123;extend: 'csv'&#125;, &#123; extend: 'print', customize: function (win) &#123; $(win.document.body).addClass('white-bg'); $(win.document.body).css('font-size', '10px'); $(win.document.body).find('table') .addClass('compact') .css('font-size', 'inherit'); &#125; &#125; ]); When the data is changed, the buttons such as ‘Copy’, ‘Print’ and ‘CSV’ from datatable-buttons plugin disappear. Cause: It seems the datatable dose not redraw the options like button plugin after data change. Solution:We can manually add button-options by using angular-datatable drawCallback function, where the function is called every time DataTables performs a draw. var buttonsOpt = [ &#123; text: '&lt;i class="fa fa-copy"&gt;&lt;/i&gt;', extend: 'copy' &#125;, &#123; text: '&lt;i class="fa fa-file-text-o"&gt;&lt;/i&gt;', extend: 'csv' &#125; ];vm.dtOptions = DTOptionsBuilder.newOptions() .withDOM('&lt;"html5buttons"B&gt;lTfgitp') .withButtons(buttonsOpt.slice());vm.dtOptions.drawCallback = function () &#123; var api = $(this).DataTable(); new $.fn.dataTable.Buttons(api, &#123; buttons: buttonsOpt.slice() &#125;); $(this).parent().find('.dt-buttons').replaceWith(api.buttons().container()); &#125;; Ref: datatables]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[Jhipster MicroService]]></title>
      <url>%2F2016%2F12%2F18%2Fjhipster-microservice%2F</url>
      <content type="text"><![CDATA[Introduction of JHipster MS JHipster Registry Create Microservice a. Microservice: Job App b. Microservice: Gateway App Security a. JWT (JSON Web Token) Access Control a. Microservice - Job App API b. Microservice - Gateway App API]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[Firebase Cloud Messaging Notification]]></title>
      <url>%2F2016%2F12%2F10%2Ffcm-notification%2F</url>
      <content type="text"><![CDATA[Integration of Google FCM Notification Introduction a. Key Capability b. FCM Message Type c. Implementation Path Create FCM Project Server Side Implementation a. Server Coding b. Server API Test]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[Jhipster Project]]></title>
      <url>%2F2016%2F11%2F18%2Fjhipster-project%2F</url>
      <content type="text"><![CDATA[Security Configuration JHipster Security To use Spring Security with a Single Web Page Application, like the ones generated by JHipster, you need Ajax login/logout/error views. We have configured Spring Security in order to use those views correctly, and of course we generate all the JavaScript and HTML code for you.By default, JHipster comes with 4 different users:“system”, who is mainly used by our audit logs, when something is done automatically“anonymousUser”, who is given to anonymous users when they do an action“user”, who is a normal user with “ROLE_USER” authorization. His default password is “user”“admin”, who is an admin user with “ROLE_USER” and “ROLE_ADMIN” authorizations. His default password is “admin”For security reasons, you should change those default passwords.More info are provided here: https://jhipster.github.io/security/ Role ManagementWhen adding a new ROLE, consider the following steps, Update role data in DB, In src/main/resources/config/liquibase directory, add new role to authorities.cs. Update AuthoritiesConstants.java, add new role constant, and the static method if you need. Change the corresponding security control and your logic. Java Security Configuration Project level In SecurityConfiguration.java, define WebSecurity (e.g., specify which api is an exemption) and HttpSecurity public void configure(WebSecurity web) throws Exception &#123; web.ignoring() .antMatchers("/swagger-ui/index.html") .antMatchers("/api/register") .antMatchers("/api/activate");&#125; In OAuth2ServerConfiguration.java, prevent an API from OAuth2 authentication. Object levelAllow a particular role to access an API. @RestController@RequestMapping("/api")@Secured(AuthoritiesConstants.USER)public class IpsUserProfileResource &#123;...&#125; Method levelCheck whether or not the current login user has a particular role. if (!SecurityUtils.isUserInRole(AuthoritiesConstants.ADMIN)) &#123; //...&#125; Angular Security ConfigurationSome recommendation here (need explore more and the differences…) &lt;div has-role="ROLE_ADMIN"&gt; &lt;/div&gt;&lt;div has-authority="ROLE_ADMIN"&gt; &lt;/div&gt; More Features OAuth2 AuthenticationOAuth2 is a stateless security mechanism, so you might prefer it if you want to scale your application across several machines. Spring Security provides an OAuth2 implementation, which we have configured for you.The biggest issue with OAuth2 is that requires to have several database tables in order to store its security tokens. If you are using an SQL database, we provide the necessary Liquibase changlog so that those tables are automatically created for you. JWT authenticationJSON Web Token (JWT) authentication, like OAuth2, is a stateless security mechanism, so it’s another good option if you want to scale on several different servers.This authentication mechanism doesn’t exist by default with Spring Security, it’s a JHipster-specific integration of the Java JWT project. It is easier to use and implement than OAuth2, as it does not require a persistence mechanism, so it works on all SQL and NoSQL options.This solution uses a secure token that holds the user’s login name and authorities. As the token is signed, it cannot be altered by a user.The secret key should be configured in the application.yml file, as the jhipster.security.authentication.jwt.secret property. HTTP Session AuthenticationThis is the “classical” Spring Security authentication mechanism, but we have improved it quite significantly. It uses the HTTP Session, so it is a stateful mechanism: if you plan to scale your application on multiple servers, you need to have a load balancer with sticky sessions so that each user stays on the same server. Improved remember-me mechanismWe have modified the Spring Security remember-me mechanism so that you have a unique token, that is stored in your database (SQL or NoSQL database, depending on your choice during generation!). We also store more information than the standard implementation, so you have a better understanding of where those tokens come from: IP address, browser, date… And we generate a complete administration screen, so that you can invalidate sessions, for example if you forgot to log out on another computer. Cookie theft protectionWe have added a very complete cookie theft protection mechanism: we store your security information in a cookie, as well as in the database, and each time a user logs in we modify those values and check if they have been altered. That way, if a user ever steals your cookie, he will be able to use only once, at most. CSRF protectionSpring Security and AngularJS both have CSRF protection out-of-the-box, but unfortunately they don’t use the same cookies or HTTP headers! In practice, you have in fact no protection at all for CSRF attacks. Of course, we re-configure both tools so that they correctly work together. Social LoginJHipster provide “social login”, using Spring Social, so users can connect to your application using their Google, Facebook or Twitter authentication. This is configured using Sping Boot’s starter modules. DB Management Update DB Manually Database updates by manually editing the change log If you prefer (or need) to do a database update manually, here is the development workflow: Modify your JPA entity (add a field, a relationship, etc.) Create a new change log in your src/main/resources/config/liquibase/changelog directory. The files in that directory are prefixed by their creation date (in yyyyMMddHHmmss format), and then have a title describing what they do. For example, 20141006152300_added_price_to_product.xml is a good name. &lt;?xml version="1.0" encoding="UTF-8"?&gt;&lt;databaseChangeLog xmlns="http://www.liquibase.org/xml/ns/dbchangelog" xmlns:ext="http://www.liquibase.org/xml/ns/dbchangelog-ext" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://www.liquibase.org/xml/ns/dbchangelog-ext http://www.liquibase.org/xml/ns/dbchangelog/dbchangelog-ext.xsd http://www.liquibase.org/xml/ns/dbchangelog http://www.liquibase.org/xml/ns/dbchangelog/dbchangelog-3.5.xsd"&gt; &lt;changeSet author="volcanohong (generated)" id="1481426741244-1"&gt; &lt;addColumn tableName="loyalty_scheme"&gt; &lt;column name="created_date" type="timestamp"/&gt; &lt;/addColumn&gt; &lt;/changeSet&gt; &lt;changeSet author="volcanohong (generated)" id="1481426741244-2"&gt; &lt;addColumn tableName="loyalty_scheme"&gt; &lt;column name="last_modified_date" type="timestamp"/&gt; &lt;/addColumn&gt; &lt;/changeSet&gt;&lt;/databaseChangeLog&gt; Add this “change log” file in your src/main/resources/config/liquibase/master.xml file, so it is applied the next time you run your applicationMore information for using Liquibase. Note that in pom.xml, liquibase plugin configuration needs to be updated accordingly. &lt;plugin&gt; &lt;groupId&gt;org.liquibase&lt;/groupId&gt; &lt;artifactId&gt;liquibase-maven-plugin&lt;/artifactId&gt; &lt;version&gt;$&#123;liquibase.version&#125;&lt;/version&gt; &lt;dependencies&gt; &lt;dependency&gt; &lt;groupId&gt;org.javassist&lt;/groupId&gt; &lt;artifactId&gt;javassist&lt;/artifactId&gt; &lt;version&gt;3.18.2-GA&lt;/version&gt; &lt;/dependency&gt; &lt;dependency&gt; &lt;groupId&gt;org.liquibase.ext&lt;/groupId&gt; &lt;artifactId&gt;liquibase-hibernate4&lt;/artifactId&gt; &lt;version&gt;$&#123;liquibase-hibernate4.version&#125;&lt;/version&gt; &lt;/dependency&gt; &lt;dependency&gt; &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt; &lt;artifactId&gt;spring-boot-starter-data-jpa&lt;/artifactId&gt; &lt;version&gt;$&#123;project.parent.version&#125;&lt;/version&gt; &lt;/dependency&gt; &lt;/dependencies&gt; &lt;!--&lt;configuration&gt;--&gt; &lt;!--&lt;changeLogFile&gt;src/main/resources/config/liquibase/master.xml&lt;/changeLogFile&gt;--&gt; &lt;!--&lt;diffChangeLogFile&gt;src/main/resources/config/liquibase/changelog/$&#123;maven.build.timestamp&#125;_changelog.xml&lt;/diffChangeLogFile&gt;--&gt; &lt;!--&lt;driver&gt;org.h2.Driver&lt;/driver&gt;--&gt; &lt;!--&lt;url&gt;jdbc:h2:file:./target/h2db/db/xxxisg&lt;/url&gt;--&gt; &lt;!--&lt;defaultSchemaName /&gt;--&gt; &lt;!--&lt;username&gt;xxxISG&lt;/username&gt;--&gt; &lt;!--&lt;password /&gt;--&gt; &lt;!--&lt;referenceUrl&gt;hibernate:spring:com.xxx.isg.domain?dialect=org.hibernate.dialect.H2Dialect&amp;amp;hibernate.ejb.naming_strategy=org.springframework.boot.orm.jpa.hibernate.SpringNamingStrategy&lt;/referenceUrl&gt;--&gt; &lt;!--&lt;verbose&gt;true&lt;/verbose&gt;--&gt; &lt;!--&lt;logging&gt;debug&lt;/logging&gt;--&gt; &lt;!--&lt;diffExcludeObjects&gt;oauth_access_token, oauth_approvals, oauth_client_details, oauth_client_token, oauth_code, oauth_refresh_token&lt;/diffExcludeObjects&gt;--&gt; &lt;!--&lt;/configuration&gt;--&gt; &lt;configuration&gt; &lt;changeLogFile&gt;src/main/resources/config/liquibase/master.xml&lt;/changeLogFile&gt; &lt;diffChangeLogFile&gt;src/main/resources/config/liquibase/changelog/$&#123;maven.build.timestamp&#125;_changelog.xml&lt;/diffChangeLogFile&gt; &lt;driver&gt;com.microsoft.sqlserver.jdbc.SQLServerDriver&lt;/driver&gt; &lt;url&gt;jdbc:sqlserver://xxx.xxx.net:1433;databaseName=xxx_iscango&lt;/url&gt; &lt;defaultSchemaName /&gt; &lt;username&gt;admin&lt;/username&gt; &lt;password&gt;admin&lt;/password&gt; &lt;referenceUrl&gt;hibernate:spring:com.xxx.isg.domain?dialect=org.hibernate.dialect.H2Dialect&amp;amp;hibernate.ejb.naming_strategy=org.springframework.boot.orm.jpa.hibernate.SpringNamingStrategy&lt;/referenceUrl&gt; &lt;verbose&gt;true&lt;/verbose&gt; &lt;logging&gt;debug&lt;/logging&gt; &lt;diffExcludeObjects&gt;oauth_access_token, oauth_approvals, oauth_client_details, oauth_client_token, oauth_code, oauth_refresh_token&lt;/diffExcludeObjects&gt; &lt;/configuration&gt;&lt;/plugin&gt; And there is no need to change any existing xml files except master.xml. Otherwise, a liquibase checksum validation error will raise. Load Data to DB Create a .csv file with data in src/main/resources/config/liquibase directory. Create a change log in src/main/resources/config/liquibase/changelog directory. For example, a xml file with name 20161140000001_load_data_UserDevice.xml, which specify the changelog id, data file, separator and table name. &lt;?xml version="1.0" encoding="utf-8"?&gt;&lt;databaseChangeLog xmlns="http://www.liquibase.org/xml/ns/dbchangelog" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://www.liquibase.org/xml/ns/dbchangelog http://www.liquibase.org/xml/ns/dbchangelog/dbchangelog-3.4.xsd"&gt; &lt;!-- Loaded data for UserDevice. --&gt; &lt;changeSet id="20161110000001-3" author="jhipster"&gt; &lt;loadData encoding="UTF-8" file="config/liquibase/user_device.csv" separator="," tableName="user_device"/&gt; &lt;/changeSet&gt;&lt;/databaseChangeLog&gt; Update master.xml file with the changelog of loading data. &lt;databaseChangeLog&gt;... &lt;include file="classpath:config/liquibase/changelog/20161140000001_load_data_UserDevice.xml" relativeToChangelogFile="false"/&gt;...&lt;/databaseChangeLog&gt; run ./mvnw clean to clean the DB. Update Default DataHere taking USER and USER_AUTHORITY table for example. In file users.csv, update all default user dataThe password should be encrypted. import org.springframework.security.crypto.password.PasswordEncoder;@Injectprivate PasswordEncoder passwordEncoder;String encryptedPassword = passwordEncoder.encode(password); In file users_authorities.csv, update user authorities bridge table. Run maven test to make sure all tests can pass. For example, if the admin user is changed, one of the test in UserResourceIntTest.java might be failed.]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[Jhipster Notes]]></title>
      <url>%2F2016%2F11%2F11%2Fjhipster-notes%2F</url>
      <content type="text"><![CDATA[Install JHipster Requirement: Java 8, Maven, Git, Node.js Start with installing Yeoman and Bower npm install -g yo YEOMAN, the web’s scaffording tool for webapps. Yeoman helps you to kickstart new projects, prescribing best practices and tools to help you stay productive. npm install -g bower BOWER, a package manager for the web. Web sites are made of lots of things — frameworks, libraries, assets, and utilities. Bower manages all these things for you. Bower keeps track of these packages in a manifest file, bower.json. Then, install Grunt and jHipster npm install -g grunt-cli GRUNT, the javascript task runner. With literally hundreds of plugins to choose from, you can use Grunt to automate just about anything with a minimum of effort. npm install -g generator-jhipster JHipster is a fully Open Source, widely used application generator. Easily create high-quality Spring Boot + AngularJS projects! We may also need to do this.npm install bower install And option for installing Gulp gulp install Gulp is a task/build runner for development. It allows you to do a lot of stuff within your development workflow. You can compile sass files, uglify and compress js files and much more. The kicker for gulp is that its a streaming build system which doesn’t write temp files. It’s like Pipes in bash. One task flow into another. Gulp could be compared to Grunt in its usage. New Project Invoke jHipster to create a new project yo jhipster On running this command, it needs to answer questions about how the application to be generated. After answering all the questions, JHipster created a whole bunch of files. Run Test To make sure everything was good to go, Run unit tests using grunt test or ./mvnw test (or mvn test if you have maven). Run Project Command for running a project ./mvnw Whenever the DB is updated, it has to clean the /target file which including temporary and DB files to initialize the DB. ./mvnw clean Sometimes, when the temporary files are deleted, the app may raise error like ... bean not found. Try to avoid it by compile again ./mvnw compile Update Jhipster Update jHipsternpm update -g generator-jhipster This installs the latest version of JHipster, but does nothing to upgrade the project. Then, run the following command to update the project.yo jhipster Add Material Design For instance,Check bower.json with&quot;bootstrap-material-design&quot;: &quot;~0.3.0&quot; At bottom of index.html (src/main/webapp/index.html), add&lt;script&gt; $.material.init()&lt;/script&gt; Liquibase Inconsistency If you add or modify a JPA entity, you will need to update your DB schema. If you have choosen to use MySQL, MariaDB or PostgreSQL in development, you can use the ./mvnw liquibase:diff goal to automatically generate a changelog. Entity Creation or Update Method 1: The jhipster command used to create an entity, then in command line, answer the questions, such as field name, type, constraints and relationships to other entities. yo jhipster:entity &lt;name&gt; Method 2: Generating an entity directily by json files. For instance, first creating json file, e.g., UserGroup.json, then, run yo jhipster:entity userGroup and re-gernerate the entity. &#123; "fluentMethods": true, "relationships": [ &#123; "relationshipType": "many-to-one", "relationshipName": "loyaltyScheme", "otherEntityName": "loyaltyScheme", "otherEntityField": "id" &#125; ], "fields": [ &#123; "fieldName": "name", "fieldType": "String", "fieldValidateRules": [ "required" ] &#125;, &#123; "fieldName": "age", "fieldType": "Integer" &#125;, &#123; "fieldName": "gender", "fieldType": "GenderType", "fieldValues": "M,F" &#125; ], "changelogDate": "20161107000001", "dto": "mapstruct", "service": "no", "entityTableName": "user_group", "pagination": "infinite-scroll"&#125; The above json file define the entity name, fields, relationships, changelog id, whether or not to generate DTO and service layers, the style of pagination at the same time. Method 3: Using JDL to create a whole bunch of entities based on DB schema. Jhipster Domain Language (JDL) The JDL is a JHipster specific domain language which describes all the entities and their relationships in a single file (or more than one) with a simple and user-friendly syntax. Entity syntax: entity name is the name of the entity, field name the name of one field of the entity, type the JHipster supported type of the field, and as an option the validations for the field. entity Author &#123; name String required, address String required maxlength(100), age Integer required min(18)&#125; relationship (OneToMany | ManyToOne | OneToOne | ManyToMany) &#123; &lt;from entity&gt;[&#123;&lt;relationship name&gt;&#125;] to &lt;to entity&gt;[&#123;&lt;relationship name&gt;&#125;]&#125; For example,relationship OneToMany &#123; Author&#123;book&#125; to Book&#123;writer(name)&#125;&#125; Command for jhipster to create entity by using JDL file yo jhipster:import-jdl jhipster-jdl.jh Q &amp; A Delete a entity ?Currently, jhipster has no function to delete an entity after creating it (20+ files). The best way is using version control to revert to the version before creating new entities. Make Foreign Key to be required field?All the relationships in jhipster is a loose control. So the FK cannot set to be required when creating entities. Ref JHipster]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[AngularJS notes I]]></title>
      <url>%2F2016%2F11%2F01%2Fangularjs-notes-1%2F</url>
      <content type="text"><![CDATA[Error: $digest already in progress when calling $scope.$apply() Raise error when calling $scope.$apply() $scope.$apply(function () &#123; vm.error = 'ERROR';&#125;); Problem is fixed by calling $timeout instead. $timeout(function () &#123; //code here will run afterwards vm.error = 'ERROR';&#125;, 1); Comments: Simply using $timeout is not the best nor the right solution. Also, make sure that if you are concerned by performances or scalability. Things we should know $$phase is private to the framework and there are good reasons for that. $timeout(callback) will wait until the current digest cycle (if any) is done, then execute the callback, then run at the end a full $apply. $timeout(callback, delay, false) will do the same (with an optional delay before executing the callback), but will not fire an $apply (third argument) which saves performances if you didn’t modify your Angular model ($scope). $scope.$apply(callback) invokes, among other things, $rootScope.$digest, which means it will redigest the root scope of the application and all of its children, even if you’re within an isolated scope. $scope.$digest() will simply sync its model to the view, but will not digest its parents scope, which can save a lot of performances when working on an isolated part of your HTML with an isolated scope (from a directive mostly). $digest does not take a callback: you execute the code, then digest. $scope.$evalAsync(callback) has been introduced with angularjs 1.2, and will probably solve most of your troubles. Please refer to the last paragraph to learn more about it.if you get the $digest already in progress error, then your architecture is wrong: either you don’t need to redigest your scope, or you should not be in charge of that (see below). How to structure your code When you get that error, you’re trying to digest your scope while it’s already in progress: since you don’t know the state of your scope at that point, you’re not in charge of dealing with its digestion. function editModel() &#123; $scope.someVar = someVal; /* Do not apply your scope here since we don't know if that function is called synchronously from Angular or from an asynchronous code */&#125;// Processed by Angular, for instance called by a ng-click directive$scope.applyModelSynchronously = function() &#123; // No need to digest editModel();&#125;// Any kind of asynchronous code, for instance a server requestcallServer(function() &#123; /* That code is not watched nor digested by Angular, thus we can safely $apply it */ $scope.$apply(editModel);&#125;); And if you know what you’re doing and working on an isolated small directive while part of a big Angular application, you could prefer $digest instead over $apply to save performances. Update since Angularjs 1.2 A new, powerful method has been added to any $scope: $evalAsync. Basically, it will execute its callback within the current digest cycle if one is occurring, otherwise a new digest cycle will start executing the callback. That is still not as good as a $scope.$digest if you really know that you only need to synchronize an isolated part of your HTML (since a new $apply will be triggered if none is in progress), but this is the best solution when you are executing a function which you cannot know it if will be executed synchronously or not, for instance after fetching a resource potentially cached: sometimes this will require an async call to a server, otherwise the resource will be locally fetched synchronously. In these cases and all the others where you had a ! $scope.$$phase, be sure to use $scope.$evalAsync(callback). Ref angular docs.]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[Java QR code]]></title>
      <url>%2F2016%2F10%2F07%2Fjava-qr-code%2F</url>
      <content type="text"><![CDATA[QR Code Generator Utilize google QR code generator …Define the charset, format, and size.Use MatrixToImageWriter to write a BitMatrix to BufferedImage, file or stream. toBufferedImage methodpublic static BufferedImage toBufferedImage(BitMatrix matrix) &#123;...&#125; encode methodpublic BitMatrix encode(String contents, BarcodeFormat format, int width, int height, Map&lt;EncodeHintType, ?&gt; hints) throws WriterException &#123;...&#125; decode methodpublic Result decode(BinaryBitmap image, Map&lt;DecodeHintType, ?&gt; hints) throws NotFoundException &#123;...&#125; Available BarcodeFormatpublic enum BarcodeFormat &#123; AZTEC, CODABAR, CODE_39, CODE_93, CODE_128, DATA_MATRIX, EAN_8, EAN_13, ITF, MAXICODE, PDF_417, QR_CODE, RSS_14, RSS_EXPANDED, UPC_A, UPC_E, UPC_EAN_EXTENSION;&#125; An example goes here …import com.google.zxing.*;import com.google.zxing.client.j2se.BufferedImageLuminanceSource;import com.google.zxing.client.j2se.MatrixToImageWriter;import com.google.zxing.common.HybridBinarizer;import com.google.zxing.qrcode.decoder.ErrorCorrectionLevel;import javax.imageio.ImageIO;import java.*;public class ZxingUtil &#123; private static final Map&lt;EncodeHintType, ErrorCorrectionLevel&gt; encodeMap = new HashMap&lt;EncodeHintType, ErrorCorrectionLevel&gt;(); private static final Map&lt;DecodeHintType, ErrorCorrectionLevel&gt; decodeMap = new HashMap&lt;DecodeHintType, ErrorCorrectionLevel&gt;(); private static final String charset="UTF-8", format="png"; private static final int size = 150; private ZxingUtil() &#123;&#125; /** * QR code encoder * * @param data data to be encoded * @throws WriterException * @throws IOException */ public static BufferedImage createQRCode(String data) throws WriterException, IOException &#123; return MatrixToImageWriter.toBufferedImage(new MultiFormatWriter() .encode(new String(data.getBytes(charset), charset), BarcodeFormat.QR_CODE, size, size, encodeMap)); &#125; /** * QR code decoder * * @param image QR code image * @return * @throws FileNotFoundException * @throws IOException * @throws NotFoundException */ public static String readQRCode(byte[] image) throws FileNotFoundException, IOException, NotFoundException &#123; return new MultiFormatReader().decode( new BinaryBitmap( new HybridBinarizer( new BufferedImageLuminanceSource( ImageIO.read(new ByteArrayInputStream(image))))), decodeMap).getText(); &#125;&#125; Example to Create QR Code An example of using above method to create QR code … /** * create user QR scan code * @param userScanCodeDTO * @return Optional&lt;BufferedImage&gt; */public Optional&lt;Image&gt; createUserQRCode(@NotNull UserScanCodeDTO userScanCodeDTO) &#123; log.debug("create user QR code : &#123;&#125;", userScanCodeDTO); return Optional.of(userScanCodeDTO) .map(usc -&gt; &#123; BufferedImage bufferedImage = null; try &#123; bufferedImage = ZxingUtil.createQRCode(usc.getScanCode()); &#125; catch (Exception e) &#123; log.debug(e.getMessage()); &#125; return bufferedImage; &#125;) .map(bufferedImage -&gt; &#123; ByteArrayOutputStream bs = new ByteArrayOutputStream(); Image image = null; try &#123; ImageIO.write(bufferedImage, "png", bs); image = new Image() .name(userScanCodeDTO.getScanCode()) .image(bs.toByteArray()) .imageContentType("image/png"); bs.close(); &#125; catch (IOException e) &#123; log.debug(e.getMessage()); &#125; return image; &#125;);&#125; Ref: ZXing 3.3.0 API]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[Java8 notes I]]></title>
      <url>%2F2016%2F10%2F06%2Fjava8-notes-1%2F</url>
      <content type="text"><![CDATA[java.util.OptionalImagine Optional as a container that may or may not contain some value. Just like all references in Java can point to some object or be null, Option may enclose some (non-null!) reference or be empty. Optional instead of plain null is statically checked at compile time and much more informative as it clearly indicates that a given variable may be present or not. Of course it requires some discipline - you should never assign null to any variable any more. There are few ways of creating Optional:\\Optional must contain not null value and will throw an exception if null is passed. opt = Optional.of(notNull);\\ofNullable() will either return empty or present (set) Optional.opt = Optional.ofNullable(mayBeNull);\\empty() always return empty Optional, corresponding to null. It’s a singleton because Optional&lt;T&gt; is immutable.opt = Optional.empty(); In this case, opt is never null, but may or may not contain some value (present or empty). ifPresent() - do something when Optional is set Tedious if statement:if (x != null) &#123; print(x);&#125; can be replaced with higher-order function ifPresent():opt.ifPresent(x -&gt; print(x));opt.ifPresent(this::print); The latter syntax (method reference) can be used when lambda argument (String x) matches function formal parameters. filter() - reject (filter out) certain Optional values Sometimes you want to perform some action not only when a reference is set but also when it meets certain condition:if (x != null &amp;&amp; x.contains("ab")) &#123; print(x);&#125; This can be replaced with Optional.filter() that turns present (set) Optional to empty Optional if underlying value does not meet given predicate. If input Optional was empty, it is returned as-is:opt. filter(x -&gt; x.contains("ab")). ifPresent(this::print);``` This is equivalent to more imperative:```javaif(opt.isPresent() &amp;&amp; opt.get().contains("ab")) &#123; print(opt.get());&#125; map() - transform value if present Very often you need to apply some transformation on a value, but only if it’s not null (avoiding NullPointerException): if (x != null) &#123; String t = x.trim(); if (t.length() &gt; 1) &#123; print(t); &#125;&#125; This can be done in much more declarative way using map():opt. map(String::trim). filter(t -&gt; t.length() &gt; 1). ifPresent(this::print); This becomes tricky. Optional.map() applies given function on a value inside Optional - but only if Optional is present. Otherwise nothing happens and empty() is returned. Remember that the transformation is type-safe - look at generics here:Optional&lt;String&gt; opt = //...Optional&lt;Integer&gt; len = opt.map(String::length); If Optional&lt;String&gt; is present. Optional&lt;Integer&gt; len is present as well, wrapping length of a String. But if opt was empty, map() over it does nothing except changing generic type. orElse()/orElseGet() - turning empty Optional&lt;T&gt; to default T At some point you may wish to unwrap Optional and get a hold of real value inside. But you can’t do this if Optional is empty. Here is a pre-Java 8 way of handling such scenario:int len = (x != null)? x.length() : -1; With Optional we can say:int len = opt.map(String::length).orElse(-1); There is also a version that accepts Supplier&lt;T&gt; if computing default value is slow, expensive or has side-effects:int len = opt. map(String::length). orElseGet(() -&gt; slowDefault()); //orElseGet(this::slowDefault) orElseThrow() - lazily throw exceptions on empty Optional Often we would like to throw an exception if value is not available:public char firstChar(String s) &#123; if (s != null &amp;&amp; !s.isEmpty()) return s.charAt(0); else throw new IllegalArgumentException();&#125; This whole method can be replaced with the following idiom:opt. filter(s -&gt; !s.isEmpty()). map(s -&gt; s.charAt(0)). orElseThrow(IllegalArgumentException::new);``` We don’t want to create an instance of exception in advance because creating an exception has _significant cost_.* ##### **flatMap()** - _mapping over a function that returns `Optional`_Imagine you have a function that does not accept null but may produce one:```javapublic String findSimilar(@NotNull String s) //... Using it is a bit cumbersome:String similarOrNull = x != null? findSimilar(x) : null; With Optional it is a bit more straighforward:Optional&lt;String&gt; similar = opt.map(this::findSimilar); If the function we map() over returns null, the result of map() is an empty Optional. Otherwise it’s the result of said function wrapped with (present) Optional. So far so good but why do we return nullable value if we have Optional?public Optional&lt;String&gt; tryFindSimilar(String s) //... Our intentions are clear but using map() fails to produce correct type. Instead we must use flatMap():Optional&lt;Optional&lt;String&gt;&gt; bad = opt.map(this::tryFindSimilar);Optional&lt;String&gt; similar = opt.flatMap(this::tryFindSimilar); Do you see double Optional&lt;Optional&lt;...&gt;&gt;? Definitely not what we want. If you are mapping over a function that returns Optional, use flatMap instead. Here is a simplified implementation of this function:public &lt;U&gt; Optional&lt;U&gt; flatMap(Function&lt;T, Optional&lt;U&gt;&gt; mapper) &#123; if (!isPresent()) return empty(); else &#123; return mapper.apply(value); &#125;&#125; Bigger example Imagine we have a Person with an Address that has a validFrom date. All of these can be null. We would like to know whether validFrom is set and in the past:private boolean validAddress(NullPerson person) &#123; if (person != null) &#123; if (person.getAddress() != null) &#123; final Instant validFrom = person.getAddress().getValidFrom(); return validFrom != null &amp;&amp; validFrom.isBefore(now()); &#125; else return false; &#125; else return false;&#125; Quite ugly and defensive. Alternatively but still ugly:return person != null &amp;&amp; person.getAddress() != null &amp;&amp; person.getAddress().getValidFrom() != null &amp;&amp; person.getAddress().getValidFrom().isBefore(now()); Now imagine all of these (person, getAddress(), getValidFrom()) are Optionals of appropriate types, clearly indicating they may not be set:class Person &#123; private final Optional&lt;Address&gt; address; public Optional&lt;Address&gt; getAddress() &#123; return address; &#125; //...&#125; class Address &#123; private final Optional&lt;Instant&gt; validFrom; public Optional&lt;Instant&gt; getValidFrom() &#123; return validFrom; &#125; //...&#125; Suddenly the computation is much more streamlined:return person. flatMap(Person::getAddress). flatMap(Address::getValidFrom). filter(x -&gt; x.before(now())). isPresent();``` Is it more readable? Hard to tell. But at least it’s impossible to produce NullPointerException when Optional is used consistently.* ##### **Converting Optional&lt;T&gt; to List&lt;T&gt;**Thinking about Optional as a collection1 having either 0 or 1 elements, this may make understanding of map() and flatMap() easier. Unfortunately Optional doesn’t have toList() method, but it’s easy to implement one:```javapublic static &lt;T&gt; List&lt;T&gt; toList(Optional&lt;T&gt; option) &#123; return option. map(Collections::singletonList). orElse(Collections.emptyList());&#125; Or less idiomatically:public static &lt;T&gt; List&lt;T&gt; toList(Optional&lt;T&gt; option) &#123; if (option.isPresent()) return Collections.singletonList(option.get()); else return Collections.emptyList();&#125; But why limit ourselves to List? What about Set and other collections? Java 8 already abstracts creating arbitrary collection via Collectors API, introduced for Streams. The API is hideous but comprehensible:public static &lt;R, A, T&gt; R collect(Optional&lt;T&gt; option, Collector&lt;? super T, A, R&gt; collector) &#123; final A container = collector.supplier().get(); option.ifPresent(v -&gt; collector.accumulator().accept(container, v)); return collector.finisher().apply(container);&#125; We can now say:import static java.util.stream.Collectors.*; List&lt;String&gt; list = collect(opt, toList());Set&lt;String&gt; set = collect(opt, toSet()); Ref: Optional in Java 8 cheat sheet]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[Angular2 Notes I]]></title>
      <url>%2F2016%2F10%2F01%2Fangular2-notes-1%2F</url>
      <content type="text"><![CDATA[Angular 2 Basic The heart of angular 2 is containers. import from angular/coreimport &#123; Component, Input, Output, EventEmitter &#125; from '@angular/core'; Syntax AnnotationsThe @ is an annotation and it comes from TypeScript ComponentComponents teach your browser new tags TemplateViews can be defined by the template option Multi-line StringsUsing ` backticks allows for easy inline templates @Component(&#123; selector: 'main-container', template: ` &lt;div&gt; &lt;main class="main"&gt; main content will go here &lt;/main&gt; &lt;/div&gt; `&#125;) Class SyntaxTypeScript allows you to define classes using the class syntax EventsOne-way data binding means we fire events instead of modifying data directly export class NoteCard &#123; @Input() note = &#123;&#125;; @Output() checked = new EventEmitter(); showCheck: boolean = false; toggle() &#123; this.showCheck = ! this.showCheck; &#125; onChecked() &#123; this.checked.next(this.note); &#125;&#125; Brackets for ParametersUse [] brackets on an attribute to pass parameters to the directive Star SyntaxUse the * on an attribute to use a directive on this element Parenthesis for View ActionsUse () parenthesis to specify action bindings @Component(&#123; selector: 'note-card', template: ` &lt;div [ngStyle] = "&#123;'background-color': note.color&#125;" class="note-card row shadow-1" (mouseenter) = "toggle()" (mouseleave) = "toggle()" &gt; &lt;div class="icon" *ngIf="showCheck" (click)="onChecked()"&gt; &lt;i class="material-icons"&gt;check&lt;/i&gt; &lt;/div&gt; &lt;div class="col-xs-12 title"&gt; &#123;&#123; note.title &#125;&#125; &lt;/div&gt; &lt;div class="col-xs-12 value"&gt; &#123;&#123; note.value &#125;&#125; &lt;/div&gt; &lt;/div&gt; `, style:[``]&#125;) Strong TypingTypeScript lets us define collections that contain our custom type Product Component Definition ClassWe define new Components with a class Some Syntax Instances Using * to call directives ngIfIf the expression is evaluated to be a true, the NgIf shows the elements, otherwise it removes the element from DOM. &lt;div *ngIf="showMe"&gt; export class Angular2NgIf &#123; showMe:boolean = true; &#125; ngForNgFor directive repeats the part of a template for each item in an array. &lt;note-card *ngFor = "let note of notes; let i = index" /&gt; export class Notes &#123; notes = [ &#123;title: '', value: ''&#125;, &#123;title: '', value: ''&#125;, //... ]; Using [] to pass parameter to directives ngStyle &lt;div [ngStyle] = "&#123;'background-color': note.color&#125;" /&gt; ngModel &lt;input type="text" [(ngModel)]="newNote.title" name="newNoteTitle" .../&gt; equals to: &lt;input type="text" [ngModel]="newNote.title" (ngModelChange) = "newNote.titel = $event" name="newNoteTitle" .../&gt; Using () to specify action bindings &lt;note-card (checked)="onNoteChecked($event, i)" /&gt; Input/Output import &#123; Component, Input, Output, EventEmitter &#125; from '@angular/core';// in template: &lt;div class="icon" (click)="onChecked()"&gt; export class NoteCard &#123; @Input() note = &#123;&#125;; @Output() checked = new EventEmitter(); onChecked() &#123; this.checked.next(this.note); &#125;&#125; $event can be used as Rx parameter, e.g., the color object is passing in.&lt;div class="col-xs-3"&gt; &lt;color-picker (selectedInput)="onColorSelected($event)" [colors]="colors"&gt; &lt;/color-picker&gt;&lt;/div&gt; with function …onColorSelected(color: string) &#123; this.newNote.color = color;&#125; Basic Routing Three main components configure routing Routes describes the application’s routes RouterOutlet is a “placeholder” component that gets expanded to each route’s content RouterLink is used to link to routes Routesimport &#123; Routes &#125; from '@angular/router';import &#123; Main, Notes, About&#125; from '../containers'; export const routes: Routes = [ // &#123; path: '', redirectTo: 'home', pathMatch: 'full' &#125;, &#123; path: '', component: Main, children: [ &#123; path: '', component: Notes&#125;, &#123; path: 'about', component: About &#125; ] &#125;] RouterOutlet@Component(&#123; selector: 'main-container', template: ` &lt;div&gt; &lt;router-outlet&gt;&lt;/router-outlet&gt; &lt;/div&gt; `&#125;) RouterLinkimport &#123; RouterLink &#125; from '@angular/router'@Component(&#123; selector: 'app-bar', template: ` &lt;header class="app-bar row middle-xs"&gt; &lt;span [routerLink]="['']" class="logo col-xs-10"&gt; Home &lt;/span&gt; &lt;nav class="col-xs-2"&gt; &lt;div class="row middle-xs between-xs"&gt; &lt;span [routerLink]="['', 'about']" class="link"&gt;About&lt;/span&gt; &lt;/div&gt; &lt;/nav&gt; &lt;/header&gt; `, //...&#125;) Ref: angular docs. ng-book basic routing in angular 2]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[SQL notes I]]></title>
      <url>%2F2016%2F09%2F12%2Fsql-notes-1%2F</url>
      <content type="text"><![CDATA[Design a table with a primary key of varchar or int? In gereral, VARCHAR or INT has no big differency in query. What matter is the access pattern. Narrowness:On absolute terms, a wider key will always be worse than a narrow key. The type carries no importance, is the width of the key that matters. When compared with INT though, few types can beat INT in narrowness, so INT usually wins that argument just by the fact that it is only 4 bytes wide. More on this aspect:In most cases, The Primary Key (PK) is defined as INT NOT NULL IDENTITY(1,1) field in each table.On one side, with an IDENTITY field, the database handles all the details of making sure it’s really unique, and the INT datatype is just 4 bytes, and fixed, so it’s easier and more suited to be used for the primary (and clustering) key in the table.On the other side, using a VARCHAR(10) or (20) just uses up too much space - 10 or 20 bytes instead of 4. Another fact is when choosing the PK usually one also selects the clustered key. Those two are often confused. By default, SQL server chooses PK as one of clustering indexes. Clustering Index:The idea of clustered indexes is to store a complete table in a B-tree structure. If a table has a clustered index, it basically means the index is the table. A clustered index has a strict row order like any other B-tree index: it sorts the rows according to the index definition. ProsThe upside of clustered indexes is that they can deliver subsequent rows quickly when accessed directly (not via a non-clustered index). In other words, they are fast if you use the clustering key to fetch several rows. Remember that the primary key is the clustering key per default. In that case, it means fetching several rows via primary key—with a single query. ConsHow bad is the cluster index in query? Rows Fetched | Time (Heap) | Time (Clustered) 10.000 | 31 | 78 20.000 | 47 |130 50.000 | 109 |297 100.000 | 203 | 624 200.000 | 390 | 1232 Ref: Unreasonable Defaults: Primary Key as Clustering Key The clustering key value will be repeated on every single index entry on every single non-clustered index on the table, so potentially, it is wasting a lot of space (not just on disk - that’s cheap - but also in SQL Server’s main memory). Also, since it’s variable (might be 4, might be 20 chars) it’s harder to SQL server to properly maintain a good index structure. Conclusion, it is always the right choice to start with INT NOT NULL IDENTITY(1,1)as the PK. However if considering VARCHAR type PK, it is better to avoid to use it as one of the clustering indexes. Description of primary keys and clustered keys Primary keys are logical business elements. The primary key is used by your application to identify an entity, and the discussion about primary keys is largely wether to use natural keys or surrogate key. The links go into much more detail, but the basic idea is that natural keys are derived from an existing entity property like ssn or phone number, while surrogate keys have no meaning whatsoever with regard to the business entity, like id or rowid and they are usually of type IDENTITY or some sort of uuid. My personal opinion is that surrogate keys are superior to natural keys, and the choice should be always identity values for local only applicaitons, guids for any sort of distributed data. A primary key never changes during the lifetime of the entity. Clustered keys are the key that defines the physical storage of rows in the table. Most times they overlap with the primary key (the logical entity identifier), but that is not actually enforced nor required. When the two are different it means there is a non-clustered unique index on the table that implements the primary key. Clustered key values can actualy change during the lifetime of the row, resulting in the row being physically moved in the table to a new location. If you have to separate the primary key from the clustered key (and sometimes you do), choosing a good clustered key is significantly harder than choosing a primary key. SQL scripts to set non-cluster index -- Enforces the Primary Key constraint with a Unique Non-Clustered IndexCREATE TABLE Foo1(Col1 INT NOT NULL PRIMARY KEY NONCLUSTERED,Col2 INT NOT NULL,Col3 INT NOT NULL)GO A table without clustered index uses Heap structure to query data. -- Create the Primary Key constraint on an ever-increasing-- key columnCREATE TABLE Foo2(Col1 INT NOT NULL PRIMARY KEY NONCLUSTERED,Col2 UNIQUEIDENTIFIER NOT NULL,Col3 INT NOT NULL)GO-- Create the Clustered Index on a random key columnCREATE UNIQUE CLUSTERED INDEX ci_Col2 ON Foo2(Col2)GO A table has both clustered and non-clustered indexes. Following are the advantages of focusing on index-only scans instead of clustered indexes: You are not limited to one index. Any index can be as fast as a clustered index. Adding INCLUDE columns to a non-clustered index doesn’t affect anything else than this particular index. There is no penalty that hurts all other indexes! You don’t need to add all table columns to a non-clustered index to enable an index-only scan. Just add the columns that are relevant for the query you’d like to tune. That keeps the index small and can thus become even faster than a clustered index. And the best part is: there is no mutual exclusion of index-only scans and clustered indexes. Index-only scans work irrespective of the table storage. You can extend non-clustered indexes for index-only scans even if there is a clustered index. That’s also an easy way to avoid paying the “clustered index penalty” on non-clustered indexes. -- Enforces the Primary Key constraint with a Unique Non-Clustered IndexCREATE TABLE Foo1(Col1 INT NOT NULL PRIMARY KEY NONCLUSTERED,Col2 INT NOT NULL,Col3 INT NOT NULL)GO-- Create the Primary Key constraint on an ever-increasing-- key columnCREATE TABLE Foo2(Col1 INT NOT NULL PRIMARY KEY NONCLUSTERED,Col2 UNIQUEIDENTIFIER NOT NULL,Col3 INT NOT NULL)GO-- Create the Clustered Index on a random key columnCREATE UNIQUE CLUSTERED INDEX ci_Col2 ON Foo2(Col2)GO What is a GUID? GUID (or UUID) is an acronym for ‘Globally Unique Identifier’ (or ‘Universally Unique Identifier’). It is a 128-bit integer number used to identify resources. The term GUID is generally used by developers working with Microsoft technologies, while UUID is used everywhere else. How unique is a GUID? 128-bits is big enough and the generation algorithm is unique enough that if 1,000,000,000 GUIDs per second were generated for 1 year the probability of a duplicate would be only 50%. Or if every human on Earth generated 600,000,000 GUIDs there would only be a 50% probability of a duplicate. How are GUIDs used? GUIDs are used in enterprise software development in C#, Java, and C++ as database keys, component identifiers, or just about anywhere else a truly unique identifier is required. GUIDs are also used to identify all interfaces and objects in COM programming. SQL Server has the creation of GUID’s built in. There is no need to write a separate stored procedure for this.You can use - `NEWID()` - `NEWSEQUENTIALID()` The key difference between both procedures would be that the sequential GUID should be used if it is for a primary clustered key.]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[Machine learning notes]]></title>
      <url>%2F2016%2F09%2F01%2Fmachine-learning-notes%2F</url>
      <content type="text"><![CDATA[What is machine learning? Core Task Finds patterns in data Use those patterns to predict future What is learning? Identifying patterns Recognizing those patterns when you see them again Machine can find a pattern in existing data, then create and use a model that recognize those patterns in new data A Data Scientist needs to master statistics machine learning software some problem domain (application fields) Languages R Python Steps of Sovling a Problem Ask a question first? such as… How to keep a player to play longer? How to get a player to play instantly? Whether or not having lots of right data? Pattern, Model and Application? Need knowledge: Training data: the prepared data used to create a model Supervised learning: the value you want to predict is in the training data, data is labelled, the target value is part of training data.(and unsupervised learning) Classifying machine learning problems and algorithms Supervised: Regression, Classification, Unsupervised: Clustering Algorithms: Decision tree, Neural network, Bayesian, K-means Training a model Testing a model Using a model]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[Hippo notes 2]]></title>
      <url>%2F2016%2F08%2F24%2Fhippo-notes-2%2F</url>
      <content type="text"><![CDATA[Carousel Parameters Problem: In Hippo banner carousel setting, changing parameter height has no effect. Solution: This is because missing configuration of CSS with parameter height in essentials-carousel.ftl. The following code is a good example to show that using object from java bean to dynamically configure the CSS in script. &lt;#-- @ftlvariable name=&quot;cparam&quot; type=&quot;org.onehippo.cms7.essentials.components.info.EssentialsCarouselComponentInfo&quot; --&gt; &lt;@hst.headContribution category="htmlHead"&gt; &lt;style type="text/css"&gt; &lt;#-- Carousel base class --&gt; .swiper-wrapper &#123; max-height: $&#123;cparam.carouselHeight&#125;px; &#125; &lt;/style&gt;&lt;/@hst.headContribution&gt;]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[Spring MVC notes I]]></title>
      <url>%2F2016%2F08%2F12%2Fspring-mvc-notes%2F</url>
      <content type="text"><![CDATA[MVC A web framework built around the principles of Spring POJO based and interface driven Based on a Dispatcher Servlet / Front Controller pattern Support for: Themes Locales | i18n Restful services Annotation based configuration Seamless integration with other Spring Service/beans Request / Response Lifecycle DispatherServlet: The entry / configuration point for the application Controller: Command pattern object that handles the request and determines which view to route to RequestMapping: The url and request type that a methode is tied to ViewResolver: Used to locate JSP pages etc. Servlet-config: Configuration file per DispatcherServlet POJO: Plain Old Java Object Bean: A Spring configured POJO Maven Dependencies: spring-webmvc servlet-api jstl]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[Freemarker notes]]></title>
      <url>%2F2016%2F08%2F10%2Ffreemarker-notes%2F</url>
      <content type="text"><![CDATA[Built-in Function Built-ins are like methods that are added to the objects by FreeMarker. To prevent name clashes with actual methods and other sub-variables, instead of dot (.), you separate them from the parent object with question mark (?). Some examples: $&#123;testString?upper_case&#125;$&#123;testString?html&#125;$&#123;testString?upper_case?html&#125;$&#123;testSequence?size&#125;$&#123;testSequence?join(&quot;, &quot;)&#125; Assuming that testString stores the string “Tom &amp; Jerry”, and testSequnce stores the strings “foo”, “bar” and “baz”, the output will be: TOM &amp; JERRYTom &amp;amp; JerryTOM &amp;amp; JERRY3foo, bar, baz html(deprecated): This built-in is deprecated by the auto-escaping mechanism introduced in 2.3.24. Other examples: path?ensure_starts_with(&apos;/&apos;)path?length &lt;#--not path?length()--&gt; Ref links: builtin methods]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[Hadoop notes I]]></title>
      <url>%2F2016%2F08%2F08%2Fhadoop-notes%2F</url>
      <content type="text"><![CDATA[Introduction Why big data?In case of Google: ~40 billion web pages x 30 kb each = Petabyte average disk speed reads about 120 mb/sec over 3 months to read the web about 1,000 drives to store and use Distributed computing challenge Scale out with distributed computing Volume, velocity and variety Recover from failures Shared nothing architecture (name node &amp; job tracker) a. Google file system (GFS) (2003), which the hadoop file system (HDFS) is based upon.b. MapReduce (2004) Hadoop Open source Relax the complexities of distributed systems Fault-tolerant distributed file system API HDFS Tackle files rather than database Split file into chunks or blocks (64 to 128 mb each) Place each block of data on a different data node, and replicate each block to three nodes by default Read data in the same rack Hive query MapReduce Map Shuffle and sort Reduce]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[Javascript/jQuery notes I]]></title>
      <url>%2F2016%2F08%2F06%2Fjavascripts-notes-1%2F</url>
      <content type="text"><![CDATA[HTML DIV overflow and scrollSometimes, the overflow-y:scroll is not working.$('#div_scroll').css('overflow-y', 'auto') Simply because the height property is missing.$('#div_scroll').css('height', '200px') Datepicker Configure datepicker: make sure the right jQuery libs have been included. Show calendar image only with a hidden input field.&lt;input type="hidden" id="dp" /&gt; $("#dp").datepicker(&#123; buttonImage: '../images/calendar.png', buttonImageOnly: true, changeMonth: true, changeYear: true, showOn: 'both',&#125;); Show both date input and image fields. The datepicker is binding to the input field. Then, when clicking the image, it also trigger the popup of same datepicker.&lt;input type="text" id="date" &gt;&lt;div&gt; &lt;img id="date_img" src="../images/calendar.png”&gt;&lt;/div&gt; $("#date").datepicker(&#123; format: "yyyy-mm-dd", autoclose: true&#125;);$("#date_img").on( "click", function() &#123; $('#date').datepicker('show');&#125;); Possible conflict with bootstrap: when it comes with &lt;div class=&quot;input-group date&quot; data-provide=&quot;datepicker&quot;&gt; in HTML, the datepicker does not popup. Get URL Parameters &lt;script type="text/javascript"&gt; function $_GET(q,s) &#123; s = s ? s : window.location.search; var re = new RegExp('&amp;'+q+'(?:=([^&amp;]*))?(?=&amp;|$)','i'); return (s=s.replace(/^\?/,'&amp;').match(re)) ? (typeof s[1] == 'undefined' ? '' : decodeURIComponent(s[1])) : undefined; &#125; &lt;/script&gt; This is a JavaScript implementation of PHP’s $_GET functionality. It uses a regular expression to keep the code to a minimum. Here is a simple example of how to use it: // this code would print "hello world" with http://someurl?var1=hello&amp;var2=worldvar var1 = $_GET('var1');var var2 = $_GET('var2');document.write(var1 + " " + var2); // get the src parameter and split it down to the search query stringvar src = document.getElementById('example').src;params = src.split('?');var var1 = $_GET('var1','?'+params[1]); Two Digits Hours and Minutes function currentFormatTime()&#123; var date = new Date(),str=''; var currHours = date.getHours(); currHours = ("0" + currHours).slice(-2); str += currHours + ':'; var currMins = date.getMinutes(); currMins = ("0" + currMins).slice(-2); str += currMins + ''; return str;&#125;//set current time$("#currentTime").html(currentFormatTime);setInterval(function()&#123;$("#currentTime").html(currentFormatTime)&#125;,1000); Format Date to MM/DD/YY NOTE: Consider the case with a single digit in month and day Consider to slice the year to two digits. getYear() returns [year]-1900. E.g., 2016 - 1900 = 116. function formatDate(date) &#123; var pDate = new Date(date); var month = pDate.getMonth() + 1; month = month &lt; 10 ? "0" + month : month; var day = pDate.getDate(); day = day &lt; 10 ? "0" + day : day; var year = pDate.getFullYear(); year = year.toString().substr(2,2); return month + '/' + day + '/' + year;&#125; Populate HTML Table Dynamically &lt;div&gt; &lt;table&gt; &lt;thead&gt; &lt;tr&gt; &lt;td&gt;ID&lt;/td&gt; &lt;th&gt;NAME&lt;/th&gt; &lt;th&gt;STATUS&lt;/th&gt; &lt;/tr&gt; &lt;/thead&gt; &lt;tbody id="tableBody"&gt; &lt;/tbody&gt; &lt;/table&gt;&lt;/div&gt; NOTE: $(&quot;#tableBody&quot;).empty() clear the all children html elements inside #tableBody $(&quot;#tableBody&quot;).remove() removes all including #tableBody itself. $("#tableBody").empty();$.each(data, function (key, value) &#123; htmlTable(value.id, value.name, value.status);&#125;);//populate html tablefunction htmlTable(id, name, status) &#123; // &lt;th&gt;ID&lt;/th&gt; // &lt;th&gt;NAME&lt;/th&gt; // &lt;th&gt;STATUS&lt;/th&gt; var tr = '&lt;tr&gt;' tr += '&lt;th scope="row"&gt;' + id + '&lt;/th&gt;'; tr += '&lt;td&gt;' + name + '&lt;/td&gt;'; tr += '&lt;td&gt;' + status + '&lt;/td&gt;'; tr += '&lt;/tr&gt;'; $("#tableBody").append(tr);&#125; Treat String like Variable Name User eval (may have some problem…).Here, the #tableBody shows content based on the option being selected in a dropdown list #select. Suppose variable varName has corresponding html table content.$('#select').on('change', function () &#123; $('#tableBody').empty(); var varName = $( "#select option:selected" ).val(); eval("$('#tableBody').append(" + varName + ")");&#125;) Another method, if varName has been defined as global variable. Call it by window[varName].$(&#39;#tableBody&#39;).append(window[varName]);]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[Spring notes I]]></title>
      <url>%2F2016%2F08%2F03%2Fspring-notes-1%2F</url>
      <content type="text"><![CDATA[Introduction Inversion of Control (IoC): The core of the Spring framework is based on the principle of IoC. IoC is a technique that externalizes the creation and management of component dependencies. A alternative descriptive name is Dependency Injection (DI). Such behavior takes place at runtime, in which an instance of class A is provided to class B by some external process if B depends on A to perform some processing. Aspect Oriented Programing (AOP): AOP provids another way of thinking about program structure. The key unit of modularity in OOP is the class, whereas in AOP the unit of modularity is the aspect. Aspects enable the modularization of concerns such as transaction management, log management, and input field validation that cut across multiple types and objects. The best document: Spring Framework Documents Spring Basics applicationContext.xml It’s a IOC container like BeanFactory with more extensions Doesn’t have to be named applicationContext.xml A simple view of Spring is that it is Hashmap of objects Objects are name/value pairs It can be used as a simple Registry There are namespaces that aid in configuration and validation ApplicationContext appContext = new ClassPathXmlApplicationContext(new String[]&#123;“applicationContext.xml”&#125;);Object obj = appContext.getBean("Object", Object.class) Import multiple configuration files &lt;beans&gt; &lt;import resource=”spring-dao.xml”/&gt; &lt;import resource=”spring-service.xml”/&gt; &lt;import resource=”spring-action.xml”/&gt; ... &lt;bean&gt; &lt;/bean&gt; ... &lt;/beans&gt; Beans Essentially classes Defining beans replaces using the keyword “new” Define the class by using the interface Id or Name Can be used interchaneably Id has to be a valid XML identifier Name can contain special characters Constructor Args Used to refernce properties of the constructor Properties Getters and Setters of the POJO References Ref. to other beans that we have defined Values Basic primitive values that are setting on POJO Default No-Args Constructor Setter Injection v.s. Constructor Injection Setter Injection The class should provide corresponding setters and getters. Setter injection is more common.&lt;bean id="..." class="..."&gt; &lt;property name="prop1" value="" ref=""/&gt; &lt;property name="prop2" value="" ref=""/&gt; ... &lt;/bean&gt; Constructor Injection The class should provide appropriate class constructor. Constructor injection guarantees the contract.&lt;bean id="..." class="..."&gt; &lt;constructor-arg&gt;para1&lt;/constructor-arg&gt; &lt;constructor-arg&gt;para2&lt;/constructor-arg&gt; &lt;constructor-arg index="0" ref=""/&gt; ... &lt;/bean&gt; Index field indicates the arguments’ indexes. Autowiring Spring can automatically wire beans together byType Allows a property to be autowired if exactly one bean of the property type exists in the container. A fatal exception is thrown if more than one exists. byName By property name. Spring looks for a bean with the same name as the property that needs to be autowired Constructor Similar to byType, but applies to constructor arguments. For example,&lt;!--need appropriate constructor--&gt;&lt;bean id="..." class="..." autowire="constructor" /&gt; &lt;!--need default constructor and setter--&gt;&lt;bean id="..." class="..." autowire="byType" /&gt;&lt;!--looking for the type of setter's parameter--&gt; &lt;!--need default constructor and setter--&gt;&lt;bean id="..." class="..." autowire="byName" /&gt; &lt;!--looking for setter's name--&gt; Set Injection &lt;bean id="..." class="..."&gt; &lt;!--set or list--&gt; &lt;set&gt; &lt;value&gt;value1&lt;/value&gt; &lt;value&gt;value2&lt;/value&gt; &lt;/set&gt; &lt;/bean&gt; &lt;bean id="..." class="..."&gt; &lt;!--map--&gt; &lt;map&gt; &lt;entry key="k1" value=""&gt; &lt;entry key="k2" value=""&gt; &lt;/map&gt; &lt;/bean&gt; &lt;bean id="..." class="..."&gt; &lt;!--properties--&gt; &lt;props&gt; &lt;prop key="k1" value=""/&gt; &lt;prop key="k2" value=""/&gt; &lt;/props&gt; &lt;/bean&gt; Spring Annotation Part of the context namespace xmlns:context="http://www.springframework.org/schema/context"xsi:schemaLocation="http://www.springframework.org/schema/contexthttp://www.springframework.org/schema/context/spring-context-2.5.xsd" Two elements have to be configured &lt;context:annotation-config&gt; &lt;context:component-scan base-package="com.projectname"/&gt; Stereotype Annotation @Component Regular components / beans, any POJO @Service Service tier where business logic is contained e.g. @Service(&quot;customerService&quot;) @Controller Control layer / actions @Repository Data access tier / database interaction layer e.g. @Repository(&quot;userDao&quot;) Autowired member variables @Autowiredprivate CustomerRepository customerRepository; uses reflection to set it Constructor Setter call the actual setter Java Configuration No XML @Configuration is a class level annotation @Bean is a method level annotation @Configurationpublic class AppConfig&#123; @Bean(name = "customerService") public CustomerService getCustomerService()&#123; return new CustomerServiceImpl(); &#125;&#125; ApplicationContext appContext = new AnnotationConfigApplicationContext(AppConfig.class); Autowired @ComponentScan({&quot;com.xxx&quot;}), class level annotation Singleton Scope @Scope(&quot;singleton&quot;) Prototype Scope @Scope(&quot;prototype&quot;) A new instance per request Web Scopes Refer to Spring MVC Request Return a single bean per HTTP Request Session Return a single bean per HTTP Session GlobalSession Return a single bean per per Application Spring Boot Spring boot makes it easy to create stand-alone, production-grade Spring based Applications that you can “just run”. Most Spring Boot applications need very little Spring configuration. Features: Create stand-alone Spring applications Embed Tomcat, Jetty or Undertow directly (no need to deploy WAR files) Provide opinionated ‘starter’ POMs to simplify your Maven configuration Automatically configure Spring whenever possible Provide production-ready features such as metrics and health checks Absolutely no code generation and no requirement for XML configuration Configuration of spring boot in pom.xml &lt;!-- Spring Boot : parent dependency --&gt;&lt;parent&gt; &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt; &lt;artifactId&gt;spring-boot-starter-parent&lt;/artifactId&gt; &lt;version&gt;1.3.6.RELEASE&lt;/version&gt;&lt;/parent&gt;&lt;dependencies&gt; &lt;dependency&gt; &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt; &lt;artifactId&gt;spring-boot-starter-web&lt;/artifactId&gt; &lt;/dependency&gt;&lt;/dependencies&gt; Create a controller @Controller@EnableAutoConfigurationpublic class DoSthController &#123; @RequestMapping("/") public int divide(int a, int b) &#123; return a / b; &#125; //// create a main funtion to run here //public static void main(String[] args) throws Exception &#123; // SpringApplication.run(DoSthController.class, args); //&#125;&#125; Or create an seperate spring application @SpringBootApplicationpublic class DoSthApplication &#123; public static void main(String[] args) &#123; SpringApplication.run(DoSthApplication.class, args); &#125;&#125; Create a unit test public class DoSthControllerTest &#123; @Test public void testDivide_success() &#123; assertEquals(1, new DoSthController().divide(5, 5)); &#125; @Test(expected = Exception.class) public void testDivide_fail() throws Exception &#123; DoSthController doSth = new DoSthController(); doSth.divide(5, 0); &#125;&#125; Start Tomcat, then right-click and run DoSthApplication, or just run the test class and the test methods.]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[MySQL notes I]]></title>
      <url>%2F2016%2F07%2F29%2Fmysql-notes-1%2F</url>
      <content type="text"><![CDATA[Install MySQL Here are the instructions for installing MySQL on a MacOS by using homebrew. First, ensure that homebrew is up to date and ready to brew brew updatebrew doctorbrew upgradebrew update Installed mysql brew install mysql Run the commands that brew suggested Try it first:mysql_install_db --verbose --user=`whoami` --basedir="$(brew --prefix mysql)" --datadir=/usr/local/var/mysql --tmpdir=/tmp IF HAVING ERRORmysql_install_db: [ERROR] unknown variable 'tmpdir=/tmp' TRY THIS INSTEADmysqld -initialize --verbose --user=whoami --basedir="$(brew --prefix mysql)" --datadir=/usr/local/var/mysql --tmpdir=/tmp Start MySQL server mysql.server start MySQL configuration mysql_secure_installation Add the following my.cnf file to /etc: ## The MySQL database server configuration file.## You can copy this to one of:# - &quot;/etc/mysql/my.cnf&quot; to set global options,# - &quot;~/.my.cnf&quot; to set user-specific options.## One can use all long options that the program supports.# Run program with --help to get a list of available options and with# --print-defaults to see which it would actually understand and use.## For explanations see# http://dev.mysql.com/doc/mysql/en/server-system-variables.html # This will be passed to all mysql clients# It has been reported that passwords should be enclosed with# ticks/quotes escpecially if they contain &quot;#&quot; chars...# Remember to edit /etc/mysql/debian.cnf when changing# the socket location.[client]port = 3306#socket = /var/run/mysqld/mysqld.sock # Here is entries for some specific programs# The following values assume you have at least 32M ram # This was formally known as [safe_mysqld]. Both versions# are currently parsed.[mysqld_safe]#socket = /var/run/mysqld/mysqld.sock#nice = 0 [mysqld]## * Basic Settings# ## * IMPORTANT# If you make changes to these settings and your system uses# apparmor, you may also need to also adjust# /etc/apparmor.d/usr.sbin.mysqld.# #user = mysql#socket = /var/run/mysqld/mysqld.sockport = 3306#basedir = /usr#datadir = /var/lib/mysql#tmpdir = /tmpskip-external-locking## Instead of skip-networking the default is now to listen only on# localhost which is more compatible and is not less secure.bind-address = 127.0.0.1## * Fine Tuning#key_buffer = 16Mmax_allowed_packet = 16Mthread_stack = 192Kthread_cache_size = 8# This replaces the startup script and checks MyISAM tables if needed# the first time they are touchedmyisam-recover = BACKUP#max_connections = 100#table_cache = 64#thread_concurrency = 10## * Query Cache Configuration#query_cache_limit = 1Mquery_cache_size = 16M## * Logging and Replication## Both location gets rotated by the cronjob.# Be aware that this log type is a performance killer.# As of 5.1 you can enable the log at runtime!#general_log_file = /var/log/mysql/mysql.log#general_log = 1 log_error = /var/log/mysql/error.log # Here you can see queries with especially long duration#log_slow_queries = /var/log/mysql/mysql-slow.log#long_query_time = 2#log-queries-not-using-indexes## The following can be used as easy to replay backup logs or# for replication.# note: if you are setting up a replication slave, see# README.Debian about other settings you may need# to change.#server-id = 1#log_bin = /var/log/mysql/mysql-bin.logexpire_logs_days = 10max_binlog_size = 100M#binlog_do_db = include_database_name#binlog_ignore_db = include_database_name## * InnoDB## InnoDB is enabled by default with a 10MB datafile in /var/lib/mysql/.# Read the manual for more InnoDB related options. There are many!## * Security Features## Read the manual, too, if you want chroot!# chroot = /var/lib/mysql/## For generating SSL certificates I recommend the OpenSSL GUI &quot;tinyca&quot;.## ssl-ca=/etc/mysql/cacert.pem# ssl-cert=/etc/mysql/server-cert.pem# ssl-key=/etc/mysql/server-key.pem # Query Cachingquery-cache-type = 1 # Default to InnoDBdefault-storage-engine=innodb [mysqldump]quickquote-namesmax_allowed_packet = 16M [mysql]#no-auto-rehash # faster start of mysql but no tab completition [isamchk]key_buffer = 16M Go to MySQL console mysql -h localhost -u root -p Create database create database dbName; Create user create user username@localhost identified by 'password'; Grant privilege GRANT ALL PRIVILEGES ON newpal.* TO username@localhost WITH GRANT OPTION; Some commands: Restart the MySQL server mysql.server restart Stop MySQL servermysql.server stop Check if a MySQL instance is runnig ps ax | grep mysql Check MySQL status mysqladmin -u root -p status Changing the permission to MySQL folder. If you are working locally, you can try: sudo chmod -R 755 /var/lib/mysql/ Export MySQL DBmysqldump -u dbName1 -p dbName2 &gt; fileName.sql Note: The .sql file might be large. You may gzip it and then use sftp to get it back Import MySQL DB mysql -h ip_address -u username -p dbName &lt; fileName.sql Remove MySQL brew remove mysqlbrew cleanup --forcelaunchctl unload -w ~/Library/LaunchAgents/homebrew.mxcl.mysql.plistrm ~/Library/LaunchAgents/homebrew.mxcl.mysql.plistsudo rm -rf /usr/local/var/mysql]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[Hippo notes I]]></title>
      <url>%2F2016%2F07%2F18%2Fhippo-notes-1%2F</url>
      <content type="text"><![CDATA[Introduction Hippo is a java based Content Management System (CMS) that allows you to create, control, and deliver engaging content to your visitors in every channel. Hippo CMS is an open-source, dual licensed platform. Ref: onehippo There are three components to Hippo CMS (wiki): Delivery tier The Hippo Site Toolkit is the presentation framework, using either JSP or FreeMarker to generate pages. Alternatively a EST API can be defined to serve structured content. Interface The user interface through which the content management and administrative functionalities can be used. Content repository All content, metadata and configuration is stored in a modified version of Apache Jackrabbit. With Hippo’s open-source technology which integrates with a wide range of tools and data sources, you can analyse the behaviour of your visitors and optimise the performance of your content in any context, whether it’s web, mobile, social, apps, displays, billboards, or Internet-of-Things devices. It’s also easy to experiment and build new digital properties rapidly with Hippo’s open architecture and easy-to-use interface, bringing businesses the agility and freedom needed for creating the best next personalized digital customer experience. Getting Started Learn Hippo: Demo, Tutorials &amp; downloads. Step 1: Create the ‘myhippoproject’ from the Hippo maven archetype using the command below.mvn archetype:generate \-DarchetypeGroupId=org.onehippo.cms7 \-DarchetypeArtifactId=hippo-project-archetype \-DarchetypeVersion=4.0.0 \-DarchetypeRepository=http://maven.onehippo.com/maven2 Do not use special characters such as dot or dash in the artifactId. Also avoid using ‘cms’ or ‘hippo’ as artifactId because these are known to cause naming conflicts. Type n at the prompt if you want to customize your project name or other parameters. Step 2: Go to your project root folder ‘myhippoproject’and build your new project.cd myhippoprojectmvn clean verify If you are doing this for the first time, it might take some time as Maven will download all project dependencies from a remote repository server. Step 3: Launch Hippo CMS by running the following command in myhippoprojectmvn -P cargo.run -Drepo.path=storage This creates WAR files and immediately runs the project using Cargo. Hippo CMS is now running and you are ready to start implementing your Hippo-based website. Hippo CMS UI at http://localhost:8080/cms Use admin/admin or editor/editor or author/author as username/password combination. Hippo CMS Console at http://localhost:8080/cms/console Setup Application at http://localhost:8080/essentials The setup application provides a Feature Library from which features can be added to your project. The first time you use the application it will show a setup screen. Read carefully and if needed, change the default parameters before clicking on Get Started. Website at http://localhost:8080/site The website will initially be empty. Once you have added some features from the library to the site it will render them using a default bootstrap theme. Setup Hippo Project Choose templating language Either JSP or FreeMarker The project needs to rebuild after adding plugins Note that the pending changes will be deleted automatically by the setup application. You don’t need to rebuild for every single feature you add to the project, it is sufficient to rebuild after you added a batch of features. Hello page Compile and run the project by using the following Maven commands: mvn verifymvn –P cargo.run Put the home.jsp file in site/src/main/webapp/WEB-INF/jsp/. Open hippo console, in the hst:hst/hst:configurations/myhippoproject/hst:templates, add a node and name it homepage. Add property hst:renderpath with value jsp/home.jsp. Select the hst:pages node and add a child node called home of type hst:component. Add a property hst:template to the home node with the value homepage (referring to the homepage just created). Select the hst:sitemap node and add a child node called root of type hst:sitemapitem. Add a property called hst:componentconfigurationid and set the value to hst:pages/home (referring to the page configuration just created). In Hippo, each page configuration consists of a hierarchy of components. Each component has their own template. Click on the Write changes to repository button in the top right corner. Open the site ( http://localhost:8080/site/) to see the wonderfully simple page created. Not convenient: every time making a change to the .jsp file, the project needs to rebuild. MVC in Hippo: A Hello Page ViewIn http://localhost:8080/cms/ -&gt; content a. Create a document type b. Create a document Model In http://localhost:8080/essentials/, Tools tab, click on Use Beanwriter. It will generate the beans for you. Then in site/src/main/java/org/example/beans/Simpledocument.java, @HippoEssentialsGenerated(internalName = "myhippoproject:simpledocument")@Node(jcrType = "myhippoproject:simpledocument")public class Simpledocument extends BaseDocument &#123; @HippoEssentialsGenerated(internalName = "myhippoproject:title") public String getTitle() &#123; return getProperty("myhippoproject:title"); &#125; @HippoEssentialsGenerated(internalName = "myhippoproject:content") public HippoHtml getContent() &#123; return getHippoHtml("myhippoproject:content"); &#125;&#125; Controller Create a new Java class in the site module, in the package org.example.components, named SimpleComponent with package org.example.components; import org.example.beans.Simpledocument;import org.hippoecm.hst.component.support.bean.BaseHstComponent;import org.hippoecm.hst.core.component.HstComponentException;import org.hippoecm.hst.core.component.HstRequest;import org.hippoecm.hst.core.component.HstResponse;import org.hippoecm.hst.core.request.HstRequestContext;import org.slf4j.Logger;import org.slf4j.LoggerFactory; public class SimpleComponent extends BaseHstComponent &#123; public static final Logger log = LoggerFactory.getLogger(SimpleComponent.class); @Override public void doBeforeRender(final HstRequest request, final HstResponse response) throws HstComponentException &#123; super.doBeforeRender(request, response); final HstRequestContext ctx = request.getRequestContext(); // Retrieve the document based on the URL Simpledocument document = (Simpledocument) ctx.getContentBean(); if (document != null) &#123; // Put the document on the request request.setAttribute("document", document); &#125; &#125;&#125; Dynamic viewIn home.ftl file, &lt;#assign hst=JspTaglibs["http://www.hippoecm.org/jsp/hst/core"] &gt;&lt;html&gt;&lt;head&gt;&lt;/head&gt;&lt;body&gt; &lt;#if document??&gt; &lt;h1&gt;$&#123;document.title?html&#125;&lt;/h1&gt; &lt;div&gt; &lt;@hst.html hippohtml=document.content /&gt; &lt;/div&gt; &lt;#else&gt; &lt;h1&gt;Goodbye? cruel world&lt;/h1&gt; &lt;/#if&gt;&lt;/body&gt;&lt;/html&gt; Rebuild project Configure the MVC Component In cms/console:/hst:hst/hst:configurations/myhippoproject/hst:components + simplecomponent [hst:component] - hst:componentclassname = org.example.components.SimpleComponent /hst:hst/hst:configurations/myhippoproject/hst:pages/home - hst:referencecomponent = hst:components/simplecomponent - hst:template = homepage Map the URL to the ContentThe template engine currently executes the logic for not having a document present. This makes sense, because you have configure your view and your controller, but not yet where to retrieve your model (and thus, your document). /hst:hst/hst:configurations/myhippoproject/hst:sitemap/root - hst:componentconfigurationid = hst:pages/home - hst:relativecontentpath = hello-world Resolve Links to Static Resources The exact URLs of those static resources depend on the context in which the application is deployed. They must be resolved dynamically using &lt;@hst.webfile&gt;. E.g., replace: &lt;link rel="stylesheet" media="screen" type="text/css" href="css/yui-css.css" /&gt; to &lt;link rel="stylesheet" media="screen" type="text/css" href="&lt;@hst.webfile path="/css/yui-css.css"/&gt;" /&gt; Note that the path attribute of the &lt;@hst.webfile&gt; tag starts with a slash, where the original href attribute of the &lt; link&gt; element didn’t. Include Head Contributions Components further down in the hierarchy may require additional CSS and Javascript files to be loaded. In that case those components will make a head contribution. The top level component’s template must include those contributions. Inside the html element, just before the closing tag, insert the following line:&lt;@hst.headContributions categoryIncludes="htmlHead" xhtml=true/&gt; Inside the html element, just before the closing tag, insert the following line:&lt;@hst.headContributions categoryIncludes="htmlBodyEnd" xhtml=true/&gt; Open the file bootstrap/webfiles/src/main/resources/site/freemarker/hstdefault/essentials-carousel.ftl. This is the template for the out-of-the-box banner carousel.In the template you can see an example of head contributions:&lt;@hst.headContribution category="htmlBodyEnd"&gt; &lt;script type="text/javascript" src="&lt;@hst.link path="/js/jquery-2.1.0.min.js"/&gt;"&gt;&lt;/script&gt; &lt;/@hst.headContribution&gt; &lt;@hst.headContribution category="htmlBodyEnd"&gt; &lt;script type="text/javascript" src="&lt;@hst.link path="/js/bootstrap.min.js"/&gt;"&gt;&lt;/script&gt; &lt;/@hst.headContribution&gt; Include Pages Include other html markup by using code &lt;@hst.include ref="menu"/&gt; Generate dynamic menus in bootstrap/webfiles/src/main/resources/site/freemarker/gogreen/base-top-menu.ftl. (Note that the file name and ref name is of difference.) &lt;#include "../include/imports.ftl"&gt;&lt;#if menu??&gt; &lt;#if menu.siteMenuItems??&gt; &lt;nav&gt; &lt;ul class="navigation" id="main-navigation"&gt; &lt;#list menu.siteMenuItems as item&gt; &lt;#if item.selected || item.expanded&gt; &lt;li&gt;&lt;a href="&lt;@hst.link link=item.hstLink/&gt;" class="activelink"&gt;&lt;span class="label-nav"&gt;$&#123;item.name?html&#125;&lt;/span&gt; &lt;/a&gt;&lt;/li&gt; &lt;#else&gt; &lt;li&gt;&lt;a href="&lt;@hst.link link=item.hstLink/&gt;"&gt;&lt;span class="label-nav"&gt;$&#123;item.name?html&#125;&lt;/span&gt;&lt;/a&gt;&lt;/li&gt; &lt;/#if&gt; &lt;/#list&gt; &lt;/ul&gt; &lt;/nav&gt; &lt;/#if&gt; &lt;@hst.cmseditmenu menu=menu/&gt;&lt;#else&gt; &lt;#if editMode&gt; &lt;h5&gt;[Menu Component]&lt;/h5&gt; &lt;sub&gt;Click to edit Menu&lt;/sub&gt; &lt;/#if&gt;&lt;/#if&gt; By following the same way, we have&lt;@hst.include ref="main"/&gt;&lt;!-- and --&gt;&lt;@hst.include ref="footer"/&gt; with the corresponding files like and homepage-main.ftl and base-footer.ftl. Ref: Base page configuration Configure Banners In homepage-main.ftl, add a container.&lt;#include "../include/imports.ftl"&gt;&lt;@hst.include ref="container"/&gt; Then, in http://localhost:8080/cms/, add images in Content/Images -&gt; folder banners. Then, create banner documents in Content/Documents -&gt; folder banners. Add related banner image and artical link Publish it Then, in Channel/YourWebsite/, click Edit. Drag the Carousel component icon into the rectangle labeled container in the home page’s main content area. A configuration dialog will appear. In the Carousel Item 1 field click on the looking glass icon, browse to one of the Banner documents you added and select it. Click Save, then close the configuration dialog. The Banner Carousel now displays the selected banners. Click Changes, then Publish. Confiure Search Test search plugin: http://localhost:8080/site/search?query=news. In base-layout.ftl, replace the value of the element’s action attribute with &lt;@hst.link siteMapItemRefId=&quot;search&quot; /&gt;. It should now look like this:&lt;div class="searchbox"&gt; &lt;form action="&lt;@hst.link siteMapItemRefId="search" /&gt;" method="get"&gt; &lt;input type="text" class="searchbox-inputtext" id="searchbox-inputtext" name="query" placeholder="Search" /&gt; &lt;label class="searchbox-icon" for="searchbox-inputtext"&gt;&lt;/label&gt; &lt;input type="submit" class="searchbox-submit" value="Search" /&gt; &lt;/form&gt;&lt;/div&gt;]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[Effective java notes]]></title>
      <url>%2F2016%2F07%2F16%2Feffective-java-notes%2F</url>
      <content type="text"><![CDATA[Item 38: check parameters for validity Most methods and constructors have some restrictions on what values may be passed into their parameters. For example, index values must be non-negative and object values must be non-null. You should enforce them with checks at beginning of the method body. Notes: Once an error occur, throw the exception as early as possible For public methods, use Javadoc @throws tag to document the exception. (IlliegalArgumentException, IndexOutofBoundsException, or NullPointerException) For un exported methods, use assert for validity checks, e.g., assert a != null;. Enable assert by command -ea (or -enableassertions) to the java interpreter. It is particular important to check the validity of parameters that are not used by a method but are stored away for later use. (It’s quite hard to debug if there is an error in this case) Design API to be as general as it is practical to make them. Item 39: Make defensive copies when needed Notes: Never trust a user input data Item 40: Design method signatures carefully Notes: Avoid too many functions in a class | interface Avoid long parameter list (larger than 4) For parameter types, use interfaces instead of classes For control parameters, prefer two-element enum types to boolean Item 41: Use overloading judiciously Notes: overload: polymorphism in compile time; override: polymorphism in run time Avoid using different types of a parameter to design overloading methods Never export two overloading with the same number of parameters Item 42: Use varargs judiciously Item 43: Return empty arrays or collections, not nulls Notes: It’s arguable that a null return is preferable to an empty array in case of mitigating system expense. The right way to return an array of a collection // The right way to return an array of a collection private final List&lt;Cheese&gt; cheeseInStock = ...; private static final Cheese[] EMPTY_CHEESE_ARRAY = new Cheese[0]; public Cheese[] getCheese() &#123; return cheesesInStock.toArray(EMPTY_CHEESE_ARRAY);&#125; The right way to return a copy of a collection // The right way to return a copy of a collectionpublic List&lt;Cheese&gt; getCheeseList() &#123;if (cheesesInStock.isEmpty()) return Collections.emptyList(); // Always returns same listelse return new ArrayList&lt;Cheese&gt;(cheesesInStock);&#125; Item 44: Write doc comments for all exposed API elements Notes: @param, @return, @throws @throws starts with if statement @{code} and@{literal} Document enum and annotation types]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[Linux notes I]]></title>
      <url>%2F2016%2F07%2F14%2Flinux-notes-1%2F</url>
      <content type="text"><![CDATA[Commands grep grep is a useful command to search text in a file. Format:grep [–bcEFilnqsvx] [–e pattern] ... [–f patternfile] ... [pattern] [file ...] grep with multiple strings:/logs/xxx | grep -e 'error' -e 'falure' grep with highlight color:egrep --color=auto -i '(error|fatal|warn|drop)' /logs/xxx Change grep display color: following will set background to red and foreground to white:export GREP_OPTIONS='--color=auto'export GREP_COLOR='1;37;41' Useful links:Writing shell scriptsSearch a file for a specified pattern]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[Java SSL debugging]]></title>
      <url>%2F2016%2F07%2F13%2Fjava-ssl-debugging%2F</url>
      <content type="text"><![CDATA[SSL: ValidatorException Exception Message: sun.security.validator.ValidatorException: PKIX path building failed: sun.security.provider.certpath.SunCertPathBuilderException: unable to find valid certification path to requested target This is possibly because the server uses a certificate that is little known to java, which means when java try to verify the SSL, it realize it is not trustable.Another explanation: It is because incomplete trust path for the server certificate; the server’s certificate is probably not trusted by the client. SolutionCommonly, the fix is to import the server’s certificate authority (CA) into the client’s trust store (add the root CA, not server CA, to your cacerts file). Here are the step: Identify the root CA using SSL Checker. Find out the root cert. from server side. Create the .pem file. e.g., DSTRootCAX3.pem Update the cacerts file of your java. Normally, it is located in (Mac) /Library/Java/JavaVirtualMachines/jdk1.8.0_65.jdk/Contents/Home/jre/lib/security or(Linux) /home/omega/java/jre/lib/security SSL: HandshakeException After the CA import, it man still have error like handshake_failure. Read the detailed log by using -Djavax.net.debug=all Exception Message:Cipher Suites: […Long list of ciphers…]Compression Methods: &#123; 0 &#125;Extension elliptic_curves, curve names: &#123;…&#125;Extension ec_point_formats, formats: [uncompressed]Extension server_name, server_name: [host_name: HOST]***main, WRITE: TLSv1 Handshake, length = 168main, READ: TLSv1 Alert, length = 2main, RECV TLSv1 ALERT: fatal, handshake_failuremain, called closeSocket()main, handling exception: javax.net.ssl.SSLHandshakeException: Received fatal alert: handshake_failure One possible reason is the JRE Library lacks of supported algorithm. (The server side is using some high security encryption algorithms) . SolutionThis problem can be solved by updating the JRE Library with adding stronger algorithms: JCE Unlimited Strength. In a high security environment, one way of strengthening algorithms in the JDK is through the JCE Unlimited Strength policy files. In this particular case, replacing those policy files allows it to use the stronger variants of existing algorithms and connect successfully. JCE Unlimited Strength downloads: JDK 8, JDK 7, or JDK 6. Installation: unzip the dowload file and copy local_policy.jar and US-export_policy.jar to /lib/security NOTES: Some cases might be related to TLS protocols, e.g., JDK 8 using TLSv1.2 by default, while JDK 7 has TLSv1 by default. To make the TLS protocols being compliant with each other, try debugging in java with command -Dhttps.protocols=TLSv1,TLSv1.1,TLSv1.2. Someone mentioned that using http: instead of https:. It certainly works without errors, but that is not the reasonable solution. Some cases may refer to server name indication (SNI). If the server requires SNI, trying to setup a connection without SNI will fail. All modern browsers support SNI, but not all SSL stacks in programming languages support SNI or use it by default.To avoid SNI: -Djsse.enableSNIExtension=false,To check SNI with a server, # without SNI$ openssl s_client -connect www.google.com:443CONNECTED(00000003)140612985652896:error:14077410:SSL routines:SSL23_GET_SERVER_HELLO:sslv3 alert handshake failure:s23_clnt.c:770:....New, (NONE), Cipher is (NONE) Ref. links:Debugging SSL/TLS Connections from docs.OracleDiagnosing TLS, SSL, and HTTPS from blog.OracleReceived fatal alert: handshake_failure through SSLHandshakeException from stackOverfLowSSL handshake alert: unrecognized_name error from stackOverflow]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[Hexo notes I]]></title>
      <url>%2F2016%2F07%2F10%2Fhexo-notes-1%2F</url>
      <content type="text"><![CDATA[Hexo commands Install Hexo, make sure you have node.js installed npm install hexo-cli -g Create hexo folder (your site folder) hexo init &lt;folder-name&gt;cd blognpm install Once initialised, the site folder structure looks like: .├── _config.yml├── package.json├── scaffolds├── source| ├── _drafts| └── _posts└── themes New post: If no layout is provided, Hexo will use the default_layout from _config.yml. If the title contains spaces, surround it with quotation marks. The new post file appears in /source/_posts. $ hexo new [layout] &lt;title&gt; Start server: by default http://localhost:4000/ hexo server Clean cache file db.json hexo clean Watch file changes in debug mode hexo s --debug Generate static file hexo generate Before deployment, in _config.yml file deploy: type: git repo: https://github.com/xxx... branch: [master] message: "Site updated: &#123;&#123; now('YYYY-MM-DD HH:mm:ss') &#125;&#125;" Deploy the website hexo deploy If ERROR shows like Deployer not found: github, it needs to change the deploy type to git. npm install hexo-deployer-git --save Commands shortcut hexo g == hexo generatehexo d == hexo deployhexo s == hexo serverhexo n == hexo new# e.g. commands combinationhexo d -g Create draft and publish it hexo new draft &lt;title&gt;hexo publish draft &lt;title&gt; Drafts are not displayed by default. You can add the --draft option when running Hexo or enable the render_drafts setting in _config.yml to render drafts. Ref: Hexo getting started Hexo themes 1. NexTInstall NexT theme git clone https://github.com/iissnan/hexo-theme-next themes/next Folow the setup instructions in /theme/next/_config.yml 2. BootstrapAnother theme, Bootstrap, with good layout and available functions. 3. PacmanA bueatiful theme, Pacman. Create post TOC It might be a different based on the theme, but the logic behind is similar. Taking the NexT theme for instance, in /theme/next/layout/_macro, find the file post.swig, which configures the post content display. &#123;% if post.toc %&#125; &lt;div id="toc" class="post-toc"&gt; &#123;% set toc = toc(page.content, &#123;"class": "nav", list_number: post.toc_num&#125;) %&#125; &lt;strong class=""&gt;Table of Contents&lt;/strong&gt; &lt;div class="post-toc-content"&gt;&#123;&#123; toc &#125;&#125;&lt;/div&gt; &lt;/div&gt;&#123;% endif %&#125; There are two controls there, so in the post front-matter, one can add toc: true for display TOC and toc_num: true for showing list numbers. For defaut display TOC, just change the if statement, e.g., &#123;% if (post.toc == false) %&#125;# and show list number by default&#123;% set toc = toc(page.content, &#123;"class": "nav", list_number: post.toc_num==false&#125;) %&#125; Then, you don’t have to set front-matter for each post. Error: Module version mismatchIt seems there is a mismatch between one of: The hexo in node_modules/.bin The hexo in /usr/local/bin/hexo The globally installed hexo which may well have been the one from 2. One solution is: npm uninstall -g hexo-clirm /usr/local/bin/hexorm -rf node_modulesnpm installnpm install -g hexo-cli]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[JUnit test notes I]]></title>
      <url>%2F2016%2F07%2F08%2Fjunit-test-notes-1%2F</url>
      <content type="text"><![CDATA[Test method with parameter: @Mocked object Learn how to recording expectations…, which needs further justification. @Testpublic void test_targetMethod(@Mocked final SomeObj someObj) throws Exception &#123; new Expectations() &#123;&#123; final int A = 5; someObj.getStringList((Integer) any); result = new mockit.Delegate() &#123; ArrayList&lt;String&gt; getStirngList(int para) &#123; List&lt;String&gt; strList = new ArrayList&lt;String&gt;(); for(int i = 1; i &lt;= 3; ++i)&#123; strList.add(String.valueOf(A * i)); &#125; return strList; &#125; &#125;; &#125;&#125;; List&lt;String&gt; result = someClass.targetMethod(); assertNotNull(result); assertEquals(3, result.size());&#125; REMARK 1:a) Define @Morked object as a member in class levelFor example: @Mocked private Object httpServiceImpl; //as a class member Then, if we have result in the httpServiceImpl, it turns out that result is NULL. b) Define as a parameter in methodFor example: public void testProcessDeposit_success(@Mocked final HttpServiceImpl httpServiceImpl)&#123;&#125; Then, results in httpServiceImpl has real value. REMARK 2:a) In case of NonStrictExpectations. When calling the method, the order does not matter. new NonStrictExpectations()&#123;&#123; execute1(); execute2();&#125;&#125;; b) In case of Expectations, the test must follow the order of steps exactly. new Expectations() &#123;&#123; //Step 1; executeFirst(); //Step 2; executeSecond();&#125;&#125;; The test will fail if the executeSecond() is called before executeFirst(). Debug: “method should have no parameters” Using Junit 4.8, Jmockit 1.8, Jmock 1.1 for unit test and facing the error: java.lang.Exception: Method testMethod should have no parameters when having test method as: @Testpublic void testMethod(@Mocked final Object obj) throws Exception &#123;&#125; Commonly, @Test method is not allowed to have parameters. But it’s not the case with Jmockit: “Jmockit getting started: recording expectations“. Finally, the problem is solved by reordering the library in module config file for ItelliJ. In .iml file, the order of the the JMockit jar must appear before JUnit. For example, &lt;orderEntry type="library" name="Maven: jmockit:1.8" level="project" /&gt;&lt;orderEntry type="library" name="Maven: jmock:1.1.0" level="project" /&gt;&lt;orderEntry type="library" name="Maven: junit:4.8.1" level="project" /&gt;]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[Java coding notes III]]></title>
      <url>%2F2016%2F07%2F04%2Fjava-notes-3%2F</url>
      <content type="text"><![CDATA[Sending HTTP post request In case of sending HTTP post request to a URL with parameters such as submitting a HTML form and expecting to receive some response.More details: Apache HTTP Client import org.apache.http.client.*; //import org.apache.commons.httpclient.HttpException;//import org.apache.commons.httpclient.HttpStatus;//import org.apache.commons.httpclient.methods.PostMethod;CloseableHttpClient httpClient = HttpClients.createDefault();HttpPost httpPost = new HttpPost("https://someUrl");List&lt;NameValuePair&gt; paraList = new ArrayList&lt;NameValuePair&gt;();paraList.add(new BasicNameValuePair("para1", para1));paraList.add(new BasicNameValuePair("para2", para2));httpPost.setEntity(new UrlEncodedFormEntity(paraList, "UTF-8"));CloseableHttpResponse httpResponse = httpClient.execute(httpPost);try &#123; System.out.println(httpResponse.getStatusLine()); HttpEntity httpEntity = httpResponse.getEntity(); if (httpEntity!= null) &#123; InputStream instream = httpEntity.getContent(); &#125;&#125; catch (HttpException e) &#123; //...&#125; catch (IOException e) &#123; //... &#125; finally &#123; httpResponse.close();&#125; Another method or an old way … import java.net.*;try &#123; URL url = new URL("https://someUrl"); //open connection HttpURLConnection connection = (HttpURLConnection) url.openConnection(); //set connection output | input to true connection.setDoOutput(true); connection.setDoInput(true); //instead of a GET, using method="POST" connection.setRequestMethod("POST"); //an OutputStreamWriter for output stream by getOutputStream which writes to the connection. OutputStreamWriter writer = new OutputStreamWriter(connection.getOutputStream()); //write data String para = URLEncoder.encode(apiKey, "UTF-8"); writer.write("para=" + para); writer.flush(); //read from connection.getInputStream BufferedReader reader = new BufferedReader(new InputStreamReader(connection.getInputStream())); String readLine; while ((readLine = reader.readLine()) != null) &#123; //process readLine... &#125; writer.close(); reader.close(); if (connection.getResponseCode() == HttpURLConnection.HTTP_OK) &#123; //connection is good &#125; else &#123; //HTTP error code. &#125;&#125; catch (MalformedURLException e) &#123; //...&#125; catch (IOException e) &#123; //...&#125; Scaling BigDecimal Some methods for scaling a BigDecimal number. import java.math.*BigDecimal amount = new BigDecimal(98.7654);//option A: output 9876BigDecimal amount1 = amount.scaleByPowerOfTen(2).setScale(0, RoundingMode.HALF_UP);System.out.println(String.valueOf(amount1));//option B: output 9876.54BigDecimal amount2 = amount.movePointRight(2).setScale(2, RoundingMode.HALF_UP);System.out.println(String.valueOf(amount2));//option C: output 9876.5400BigDecimal amount3 = amount.multiply(new BigDecimal(100)).setScale(4, RoundingMode.HALF_UP);System.out.println(String.valueOf(amount3));//output: 12.3 System.out.println(String.valueOf(new BigDecimal("12.3456").round(new MathContext(3, RoundingMode.HALF_UP))));//output: 12.35System.out.println(String.valueOf(new BigDecimal("12.3456").setScale(2, RoundingMode.HALF_UP)));]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[Java coding notes II]]></title>
      <url>%2F2016%2F06%2F28%2Fjava-notes-2%2F</url>
      <content type="text"><![CDATA[Print all properties of an Object with name/value public void printObjectFields(Object object) &#123; Field[] fields = object.getClass().getDeclaredFields(); StringBuilder msg = new StringBuilder(); String newLine = System.getProperty("line.separator"); msg.append( object.getClass().getName() ); msg.append(newLine); Method method = null; String methodName = ""; String methodValue = ""; for ( Field field : fields ) &#123; msg.append(" "); try &#123; methodName = field.getName(); msg.append( methodName ); msg.append(": "); //requires access to private field: //field.setAccessible(true); //run the `get` method to obtain the value methodName = "get" + Character.toUpperCase(methodName.charAt(0)) + methodName.substring(1); method = object.getClass().getMethod(methodName); methodValue = String.valueOf(method.invoke(object)); msg.append(methodValue); &#125; catch (SecurityException e) &#123; &#125; catch (NoSuchMethodException e) &#123; &#125; catch ( IllegalAccessException e ) &#123; &#125; catch (IllegalArgumentException e) &#123; &#125; catch (InvocationTargetException e) &#123; &#125; msg.append(newLine); &#125; //print msg &#125; Compare two objects Compare every filed of two objects by using CompareToBuilder… private int compareBrand(Brand oldBrand, Brand newBrand) &#123; return new CompareToBuilder().append(oldBrand.getBrandId(), newBrand.getBrandId()) .append(oldBrand.getBrandName(), newBrand.getBrandName()) .toComparison();&#125; URL encoding of query string parameter Either using java.net.URLEncoder: String str = "a=b+c";str = URLEncoder.encode(str, "UTF-8"); OR using Regex: String str = "a=b+c";str = str.replaceAll("\\+", "%2B").replaceAll("\\=", "%3D"); Useful link: What every web developer must know about URL encoding Base64 data encoding | decoding import java.util.Base64;String str = "abcde"byte[] bytes = str.getBytes("UTF-8");String encoded = Base64.getEncoder().encodeToString(bytes);byte[] decoded = Base64.getDecoder().decode(encoded);strDecoded - new String(decoded); Scrambling a string (scrambled email) Recently, I need a method to generate a fake email address with existing user email… 1. Scramble a input string by shuffling all charaters with equal probablities 2. Scrambling by appending some random letters and numbers 3. First character should be a letter Here is the code: public static String scrambleString(Random random, String str)&#123; //convert string to a char array char charArray[] = str.toCharArray(); //random alpha and num String randAlphaNum = RandomStringUtils.randomAlphanumeric(str.length()).toLowerCase(); //random first letter final String allowedChars = "abcdefghijklmnopqrstuvwxyz"; char firstChar = allowedChars.charAt(random.nextInt(allowedChars.length()-1)); // Scramble the letters with equal probabilities for( int i = 0; i &lt; charArray.length - 1; i++ ) &#123; // Choose a random num from remaining numbers int j = random.nextInt(charArray.length - 1 - i) + i; // Swap letters char temp = charArray[i]; charArray[i] = charArray[j]; charArray[j] = temp; &#125; return firstChar + new String(charArray) + randAlphaNum;&#125; A simple way to swap values int swap(int a, int b) &#123; return a;&#125;//when usage b = swap(a, a=b); This method is a bit tricky. It relies on the fact that a will pass into swap() before b is assigned to a. Then, b is returned and assigned to a. This method can be generic and swap any number of objects of the same type: int swap(int a, int b, int c) &#123; return a;&#125;//usagec = swap(a, a=b, b=c) Convert String[] to List&lt;String&gt; In order to use some util method like add(), remove(), contains()… List&lt;String&gt; newCurrencies = new ArrayList(Arrays.asList(currencies));List&lt;String&gt; oldCurrencies = new ArrayList(); Note: If initializing it in the following way, the size of newCurrencies will be fixed, so it cannot use some of the util methods.E.g. List&lt;String&gt; newCurrencies = Arrays.asList(currencies); Null-safe comparator It’s case-insensitive with assumption of emptyString == null. public static int nullSafeStringComparator(final Object str1, final Object str2) &#123; if (str1 == null ^ str2 == null) &#123; //particularly, we consider null == emptyString if (String.valueOf(str1).trim().isEmpty() || String.valueOf(str2).trim().isEmpty()) return 0; return (str1 == null) ? -1 : 1; &#125; if (str1 == null &amp;&amp; str2 == null) return 0; //since neither one is NULL here, toString() works return str1.toString().compareToIgnoreCase(str2.toString());&#125;]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[Java coding notes I]]></title>
      <url>%2F2016%2F06%2F26%2Fjava-notes-1%2F</url>
      <content type="text"><![CDATA[Create a singleton by enum A Singleton means a class can have one instance only (instantiated exactly once). The declaration will make it clear that the class is a singleton. It gives us the flexibility to change whether the class should be singleton without changing its API. public class Moose &#123; public static final Moose INSTANCE = new Moose(); private Moose() &#123;...&#125; public static Moose getInstance() &#123; return INSTANCE;&#125;&#125; Making an enum type with one element // Enum singletonpublic enum Moose &#123; INSTANCE; public void Move()&#123; ... &#125;&#125; This approach is functionally equivalent to the public field approach. Builder pattern for creating an object In the case that a constructor has many parameters and it’s hard to remember the names. Problem in JavaBeans pattern: A JavaBean may be in an inconsistent state partway through its construction. It precludes the possibility of making a class immutable. Builder is a static member of the class.public class StaffActionLog&#123; private final StaffMember staffMember; private final DateTime date; private String actionField; private StaffActionLog(Builder builder)&#123; this.staffMember = builder.staffMember; this.actionField = builder.actionField; this.date = builder.date; &#125; //StaffActionLog builder public static class Builder&#123; //mandatary fields private final StaffMember staffMember; //reserved field private final DateTime date = new LocalDate().toDateTimeAtCurrentTime(); //optional fields private String actionField; //constructor for mandatory field public Builder(StaffMember staffMember) &#123; this.staffMember = staffMember; &#125; //setter method for option field public Builder actionField(String actionField)&#123; this.actionField = actionField; return this; &#125; //build() method, return the object public StaffActionLog build()&#123; return new StaffActionLog(this); &#125; &#125;&#125; Call the builder functionStaffActionLog staffActionLog = new StaffActionLog.Builder(staffMember).actionField(actionField).build(); Static factory method Use static factory method instead of common constructor… //static factory method for creating staff action logpublic static StaffActionLog staticCreateStaffActionLog(StaffMember staffMember, String actionField, String oldValue, String newValue)&#123; return new StaffActionLog.Builder(staffMember).actionField(actionField).oldValue(oldValue).newValue(newValue).build();&#125; Why we use static factory method compared to the constructor? A readable name for the method to create an instance + Refer the static methods in class `java.util.concurrent.Executors` in JDK, such as `newFixedThreadPool`, `newSingleThreadExecutor`, `newCachedThreadPool`, and `newScheduledThreadPool` etc. Not required to create a new instance each time + It&apos;s possibly that the static method returns a instance existing in the cache rather than a new instance, which can improve the performance. E.g., static method for `Integer` in JDK, public static Integer valueOf(int i) &#123; assert IntegerCache.high &gt;= 127; if (i &gt;= IntegerCache.low &amp;&amp; i &lt;= IntegerCache.high) return IntegerCache.cache[i + (-IntegerCache.low)]; return new Integer(i); &#125; + The above code will return the `Integer` instances in the cache with high probability integers. Can return an object of any type + Return the instance of an inherited object, e.g., the application of `java.util.EnumSet` in JDK, + In the following code, the `noneOf()` function will return an instance based on the parameters. public abstract class EnumSet&lt;E extends Enum&lt;E&gt;&gt; extends AbstractSet&lt;E&gt; implements Cloneable, java.io.Serializable &#123; EnumSet(Class&lt;E&gt;elementType, Enum[] universe) &#123; &#125; public static &lt;E extends Enum&lt;E&gt;&gt; EnumSet&lt;E&gt; noneOf(Class&lt;E&gt; elementType) &#123; if (universe.length &lt;= 64) return new RegularEnumSet&lt;&gt;(elementType, universe); else return new JumboEnumSet&lt;&gt;(elementType, universe); &#125; &#125; Siplified the creation of a new object + Use this public static &lt;K, V&gt; HashMap&lt;K, V&gt; newInstance() &#123; return new HashMap&lt;K, V&gt;();&#125;Map&lt;String, List&lt;String&gt;&gt; m = HashMap.newInstance(); Rather than Map&lt;String, List&lt;String&gt;&gt; m = new HashMap&lt;String, List&lt;String&gt;&gt;(); Disadvantages: With only static factory method, classes without public or protected constructors cannot be subclassed. The static factory methods are not readily distinguishable from other static methods.]]></content>
    </entry>

    
  
  
</search>
